{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-10-10T09:39:22.993706Z", "invocation_id": "ad2c21f4-d510-449a-8240-5d5073b0cf17", "env": {}, "project_name": "warehouse", "project_id": "372d30dd2849813ef674855253900679", "user_id": "ac29dc63-525e-4f71-ae06-891fef42d0af", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.warehouse.box_detailed": {"database": "teamdata-291012", "schema": "accounting", "name": "box_detailed", "resource_type": "model", "package_name": "warehouse", "path": "dwh/accounting/box_detailed.sql", "original_file_path": "models/dwh/accounting/box_detailed.sql", "unique_id": "model.warehouse.box_detailed", "fqn": ["warehouse", "dwh", "accounting", "box_detailed"], "alias": "box_detailed", "checksum": {"name": "sha256", "checksum": "6fb971c8caae8a73910d8acca54d35d0be51b6fcfa74090393326520236b3c54"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "view", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "ignore"}, "created_at": 1759995463.699852, "relation_name": "`teamdata-291012`.`accounting`.`box_detailed`", "raw_code": "{{ config(\n    materialized='view',\n    on_schema_change='ignore'\n) }}\n\n\nWITH maybe_inverted_debit_credit AS (\n    SELECT t1.report_year,\n           t1.report_month,\n           t1.journal,\n           t1.code_libelle,\n           CASE WHEN t1.code_libelle = 'X' THEN 'first day'\n                ELSE 'last day'\n           END AS date,\n           t1.type,\n           t1.p_codification,\n           t1.store_code,\n           t1.shipping_country,\n           t1.shipping_country_classification,\n           t1.vat_rate,\n           SUM(t1.value) AS v,\n           daa.account,\n           CONCAT(CASE WHEN t1.journal = 'VT1' THEN ''\n                       WHEN t1.code_libelle IS NULL THEN 'PCA '\n                       WHEN t1.code_libelle = 'X' THEN 'Extourne PCA '\n                       ELSE ''\n                  END, daa.type_nice_name, ' BOX ', t1.store_code, ' ', LPAD(CAST(report_month AS STRING), 2, '0'), RIGHT(CAST(report_year AS STRING), 2)) AS ecriture,\n           CASE WHEN t1.journal = 'VT1' AND t1.type = 'DISCOUNT' THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle IS NULL AND t1.type IN ('SALES', 'SHIPPING') THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle = 'X' AND t1.type = 'DISCOUNT' THEN SUM(t1.value)\n                ELSE 0\n           END AS debit,\n           CASE WHEN t1.journal = 'VT1' AND t1.type IN ('SALES', 'SHIPPING', 'VAT') THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle IS NULL AND t1.type = 'DISCOUNT' THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle = 'X' AND t1.type IN ('SALES', 'SHIPPING') THEN SUM(t1.value)\n                ELSE 0\n           END AS credit,\n           daa.analytic\n    FROM (\n        SELECT report_year,\n               report_month,\n               CASE WHEN j.journal <> 'ODS Extourne' THEN j.journal\n                    ELSE 'ODS'\n               END AS journal,\n               CASE WHEN j.journal = 'ODS Extourne' THEN 'X'\n               END AS code_libelle,\n               box.type,\n               box.store_code,\n               box.shipping_country,\n               box.shipping_country_classification,\n               box.product_codification AS p_codification,\n               box.vat_rate,\n               CASE WHEN j.journal = 'VT1' AND box.product_codification LIKE '%current month%' THEN box.value\n                    WHEN j.journal = 'ODS' AND box.product_codification LIKE '%current month/future box%' THEN box.value\n                    WHEN j.journal = 'ODS Extourne' AND box.product_codification LIKE '%past month/current box%' THEN box.value\n                    ELSE 0\n               END AS value\n    FROM\n    (\n    -- sales\n    SELECT 'SALES' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(gross_revenue) AS value\n    FROM {{ ref('box_turnover') }}\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n\n    UNION ALL\n\n    -- discounts\n    SELECT 'DISCOUNT' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(discount) AS total_discount\n    FROM {{ ref('box_turnover') }}\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n\n    UNION ALL\n\n    -- shipping\n    SELECT 'SHIPPING' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(shipping) AS total_discount\n    FROM {{ ref('box_turnover') }}\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n\n    UNION ALL\n\n    -- VAT on sales\n    SELECT 'VAT' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(vat_on_gross_revenue - vat_on_discount + vat_on_shipping) AS value\n    FROM {{ ref('box_turnover') }}\n    WHERE box_turnover.payment_period <> '01- past' -- pas d'extourne de TVA sur la pass\u00e9\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n    ) box\n    CROSS JOIN accounting.journaux j\n    ) t1\n    LEFT JOIN accounting.model daa \n      ON  daa.type = t1.type\n      AND daa.product_codification = t1.p_codification\n      AND daa.store_code = t1.store_code\n      AND (t1.shipping_country_classification <> 'HUE' AND daa.shipping_country = t1.shipping_country\n           OR t1.shipping_country_classification = 'HUE' AND daa.shipping_country = t1.shipping_country_classification)\n      AND (CAST(daa.vat_rate AS STRING) = CAST(t1.vat_rate AS STRING) OR (daa.vat_rate IS NULL AND t1.vat_rate IS NULL))\n      AND t1.value <> 0\n\n    GROUP BY report_year,\n             report_month,\n             journal,\n             code_libelle,\n             date,\n             t1.type,\n             t1.p_codification,\n             t1.store_code,\n             t1.shipping_country,\n             t1.shipping_country_classification,\n             t1.vat_rate,\n             account,\n             ecriture,\n             analytic\n    HAVING v <> 0\n    AND (credit <> 0 OR debit <> 0)\n)\nSELECT * EXCEPT(debit, credit),\n       GREATEST(debit, -credit) AS debit,\n       GREATEST(credit, -debit) AS credit\nFROM maybe_inverted_debit_credit", "language": "sql", "refs": [{"name": "box_turnover", "package": null, "version": null}, {"name": "box_turnover", "package": null, "version": null}, {"name": "box_turnover", "package": null, "version": null}, {"name": "box_turnover", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_turnover"]}, "compiled_path": "target/compiled/warehouse/models/dwh/accounting/box_detailed.sql", "compiled": true, "compiled_code": "\n\n\nWITH maybe_inverted_debit_credit AS (\n    SELECT t1.report_year,\n           t1.report_month,\n           t1.journal,\n           t1.code_libelle,\n           CASE WHEN t1.code_libelle = 'X' THEN 'first day'\n                ELSE 'last day'\n           END AS date,\n           t1.type,\n           t1.p_codification,\n           t1.store_code,\n           t1.shipping_country,\n           t1.shipping_country_classification,\n           t1.vat_rate,\n           SUM(t1.value) AS v,\n           daa.account,\n           CONCAT(CASE WHEN t1.journal = 'VT1' THEN ''\n                       WHEN t1.code_libelle IS NULL THEN 'PCA '\n                       WHEN t1.code_libelle = 'X' THEN 'Extourne PCA '\n                       ELSE ''\n                  END, daa.type_nice_name, ' BOX ', t1.store_code, ' ', LPAD(CAST(report_month AS STRING), 2, '0'), RIGHT(CAST(report_year AS STRING), 2)) AS ecriture,\n           CASE WHEN t1.journal = 'VT1' AND t1.type = 'DISCOUNT' THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle IS NULL AND t1.type IN ('SALES', 'SHIPPING') THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle = 'X' AND t1.type = 'DISCOUNT' THEN SUM(t1.value)\n                ELSE 0\n           END AS debit,\n           CASE WHEN t1.journal = 'VT1' AND t1.type IN ('SALES', 'SHIPPING', 'VAT') THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle IS NULL AND t1.type = 'DISCOUNT' THEN SUM(t1.value)\n                WHEN t1.journal = 'ODS' AND t1.code_libelle = 'X' AND t1.type IN ('SALES', 'SHIPPING') THEN SUM(t1.value)\n                ELSE 0\n           END AS credit,\n           daa.analytic\n    FROM (\n        SELECT report_year,\n               report_month,\n               CASE WHEN j.journal <> 'ODS Extourne' THEN j.journal\n                    ELSE 'ODS'\n               END AS journal,\n               CASE WHEN j.journal = 'ODS Extourne' THEN 'X'\n               END AS code_libelle,\n               box.type,\n               box.store_code,\n               box.shipping_country,\n               box.shipping_country_classification,\n               box.product_codification AS p_codification,\n               box.vat_rate,\n               CASE WHEN j.journal = 'VT1' AND box.product_codification LIKE '%current month%' THEN box.value\n                    WHEN j.journal = 'ODS' AND box.product_codification LIKE '%current month/future box%' THEN box.value\n                    WHEN j.journal = 'ODS Extourne' AND box.product_codification LIKE '%past month/current box%' THEN box.value\n                    ELSE 0\n               END AS value\n    FROM\n    (\n    -- sales\n    SELECT 'SALES' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(gross_revenue) AS value\n    FROM `teamdata-291012`.`accounting`.`box_turnover`\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n\n    UNION ALL\n\n    -- discounts\n    SELECT 'DISCOUNT' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(discount) AS total_discount\n    FROM `teamdata-291012`.`accounting`.`box_turnover`\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n\n    UNION ALL\n\n    -- shipping\n    SELECT 'SHIPPING' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(shipping) AS total_discount\n    FROM `teamdata-291012`.`accounting`.`box_turnover`\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n\n    UNION ALL\n\n    -- VAT on sales\n    SELECT 'VAT' AS type,\n           report_year,\n           report_month,\n           product_codification,\n           store_code,\n           shipping_country,\n           shipping_country_classification,\n           vat_rate,\n           SUM(vat_on_gross_revenue - vat_on_discount + vat_on_shipping) AS value\n    FROM `teamdata-291012`.`accounting`.`box_turnover`\n    WHERE box_turnover.payment_period <> '01- past' -- pas d'extourne de TVA sur la pass\u00e9\n    GROUP BY type,\n             report_year,\n             report_month,\n             product_codification,\n             store_code,\n             shipping_country,\n             shipping_country_classification,\n             vat_rate\n    ) box\n    CROSS JOIN accounting.journaux j\n    ) t1\n    LEFT JOIN accounting.model daa \n      ON  daa.type = t1.type\n      AND daa.product_codification = t1.p_codification\n      AND daa.store_code = t1.store_code\n      AND (t1.shipping_country_classification <> 'HUE' AND daa.shipping_country = t1.shipping_country\n           OR t1.shipping_country_classification = 'HUE' AND daa.shipping_country = t1.shipping_country_classification)\n      AND (CAST(daa.vat_rate AS STRING) = CAST(t1.vat_rate AS STRING) OR (daa.vat_rate IS NULL AND t1.vat_rate IS NULL))\n      AND t1.value <> 0\n\n    GROUP BY report_year,\n             report_month,\n             journal,\n             code_libelle,\n             date,\n             t1.type,\n             t1.p_codification,\n             t1.store_code,\n             t1.shipping_country,\n             t1.shipping_country_classification,\n             t1.vat_rate,\n             account,\n             ecriture,\n             analytic\n    HAVING v <> 0\n    AND (credit <> 0 OR debit <> 0)\n)\nSELECT * EXCEPT(debit, credit),\n       GREATEST(debit, -credit) AS debit,\n       GREATEST(credit, -debit) AS credit\nFROM maybe_inverted_debit_credit", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.reconciliation_live": {"database": "teamdata-291012", "schema": "accounting", "name": "reconciliation_live", "resource_type": "model", "package_name": "warehouse", "path": "dwh/accounting/reconciliation_live.sql", "original_file_path": "models/dwh/accounting/reconciliation_live.sql", "unique_id": "model.warehouse.reconciliation_live", "fqn": ["warehouse", "dwh", "accounting", "reconciliation_live"], "alias": "reconciliation_live", "checksum": {"name": "sha256", "checksum": "17b6e8962208405018f1b1a568fbea2a4b8b392b5813870f78eb5e15c3846b6a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "view", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "ignore"}, "created_at": 1759995463.701628, "relation_name": "`teamdata-291012`.`accounting`.`reconciliation_live`", "raw_code": "{{ config(\n    materialized='view',\n    on_schema_change='ignore'\n) }}\n\nwith GIft as (\nSELECT date,\ncase when store_code = 'FR' then 'BirchboxFR'\nwhen store_code = 'DE' then 'BlissimDE'\nwhen store_code = 'ES' then 'BlissimES'\nwhen store_code = 'IT' then 'BlissimIT'\nwhen store_code = 'Store' then 'BirchboxFR_Store01'\nelse 'Unknown store' end as merchantAccountCode\n,\n\n ifnull(SUM(gross_revenue_ttc) - SUM(total_discount_ttc),0) AS cash_gift\nFROM (SELECT 'GIFT' AS product_codification,date_trunc(order_date,month) as date,\n       ss.store_code,\n       CAST(NULL AS STRING) AS shipping_country,\n       CAST(NULL AS STRING) AS shipping_country_classification,\n       SUM(gross_revenue + vat_on_gross_revenue) AS gross_revenue_ttc,\n       SUM(total_discount + vat_on_total_discount) AS total_discount_ttc\nFROM {{ ref('shop_sales') }} ss\nWHERE product_codification_id = 34\n\nGROUP BY ss.store_code,date)\nGROUP BY merchantAccountCode,date\n\n\n\n),\ntktk as (\n\nselect 'BirchboxFR' as merchantAccountCode, date_trunc(order_date,month) as date, sum(net_revenue)*1.2 as net\nfrom sales.shop_sales \nwhere dw_country_code='FR'\nand store_id = 3\ngroup by all\n\n)\n,Adyen as (\nselect merchantAccountCode,date(date_trunc(eventDate, month)) as date,\nifnull(sum(case when eventcode IN('AUTHORISATION','REFUND_FAILED') then value/100 end ),0) as adyen_authorisation,\nifnull(sum(case when eventcode in ('REFUND','CANCEL_OR_REFUND') then value/100 end ),0) as adyen_refund,\nifnull(sum(case when eventcode='AUTHORISATION' then value/100 end ),0)-ifnull(sum(case when eventcode in ('REFUND','CANCEL_OR_REFUND') then value/100 end ),0) as Adyen_total\n from {{ ref('adyen_notifications') }}\n \nwhere success=1  \ngroup by all\n\n),\n\nshop as (\nSELECT case when store_code = 'FR' then 'BirchboxFR'\nwhen store_code = 'DE' then 'BlissimDE'\nwhen store_code = 'ES' then 'BlissimES'\nwhen store_code = 'IT' then 'BlissimIT'\nwhen store_code = 'Store' then 'BirchboxFR_Store01'\nelse 'Unknown store' end as merchantAccountCode,\ndate_trunc(date,month) as date,\n SUM(credit) - SUM(debit) AS cash_shop\nFROM {{ ref('shop_detailed') }}\n\nGROUP BY ALL\norder by date desc\n),\n\nbox as (\nSELECT \ncast(concat(report_year,'-',case when report_month <10 then concat('0',cast(report_month as string))  else cast(report_month as string) end,'-01') as date) as date,\ncase when store_code = 'FR' then 'BirchboxFR'\nwhen store_code = 'DE' then 'BlissimDE'\nwhen store_code = 'ES' then 'BlissimES'\nwhen store_code = 'IT' then 'BlissimIT'\nwhen store_code = 'Store' then 'BirchboxFR_Store01'\nelse 'Unknown store' end as merchantAccountCode,\n ifnull(SUM(gross_revenue + vat_on_gross_revenue - (discount + vat_on_discount) + shipping + vat_on_shipping),0) AS cash_box\nFROM {{ ref('box_turnover') }}\nWHERE payment_period = '02- current_month'\nGROUP BY ALL\n\n\n\n)\n\nselect  merchantaccountcode,date,adyen_authorisation,adyen_refund,Adyen_total, cash_gift,cash_shop,cash_box ,\n cash_box+cash_shop+Cash_GIft-ifnull(net,0) as Query_total,\n (cash_box+cash_shop+Cash_GIft-ifnull(net,0)) -Adyen_total as ecart\n\n from (\n\nselect  merchantaccountcode,date,ifnull(adyen_authorisation,0)adyen_authorisation,ifnull(adyen_refund,0)adyen_refund,Adyen_total,ifnull(cash_gift,0) cash_gift,ifnull(cash_shop,0)cash_shop,ifnull(cash_box,0)cash_box,net from adyen \nleft join GIft using(merchantaccountcode,date)\nleft join shop using(merchantaccountcode,date)\nleft join box using(merchantaccountcode,date)\nleft join tktk using(merchantaccountcode,date)\n)", "language": "sql", "refs": [{"name": "shop_sales", "package": null, "version": null}, {"name": "adyen_notifications", "package": null, "version": null}, {"name": "shop_detailed", "package": null, "version": null}, {"name": "box_turnover", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.shop_sales", "model.warehouse.adyen_notifications", "model.warehouse.shop_detailed", "model.warehouse.box_turnover"]}, "compiled_path": "target/compiled/warehouse/models/dwh/accounting/reconciliation_live.sql", "compiled": true, "compiled_code": "\n\nwith GIft as (\nSELECT date,\ncase when store_code = 'FR' then 'BirchboxFR'\nwhen store_code = 'DE' then 'BlissimDE'\nwhen store_code = 'ES' then 'BlissimES'\nwhen store_code = 'IT' then 'BlissimIT'\nwhen store_code = 'Store' then 'BirchboxFR_Store01'\nelse 'Unknown store' end as merchantAccountCode\n,\n\n ifnull(SUM(gross_revenue_ttc) - SUM(total_discount_ttc),0) AS cash_gift\nFROM (SELECT 'GIFT' AS product_codification,date_trunc(order_date,month) as date,\n       ss.store_code,\n       CAST(NULL AS STRING) AS shipping_country,\n       CAST(NULL AS STRING) AS shipping_country_classification,\n       SUM(gross_revenue + vat_on_gross_revenue) AS gross_revenue_ttc,\n       SUM(total_discount + vat_on_total_discount) AS total_discount_ttc\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE product_codification_id = 34\n\nGROUP BY ss.store_code,date)\nGROUP BY merchantAccountCode,date\n\n\n\n),\ntktk as (\n\nselect 'BirchboxFR' as merchantAccountCode, date_trunc(order_date,month) as date, sum(net_revenue)*1.2 as net\nfrom sales.shop_sales \nwhere dw_country_code='FR'\nand store_id = 3\ngroup by all\n\n)\n,Adyen as (\nselect merchantAccountCode,date(date_trunc(eventDate, month)) as date,\nifnull(sum(case when eventcode IN('AUTHORISATION','REFUND_FAILED') then value/100 end ),0) as adyen_authorisation,\nifnull(sum(case when eventcode in ('REFUND','CANCEL_OR_REFUND') then value/100 end ),0) as adyen_refund,\nifnull(sum(case when eventcode='AUTHORISATION' then value/100 end ),0)-ifnull(sum(case when eventcode in ('REFUND','CANCEL_OR_REFUND') then value/100 end ),0) as Adyen_total\n from `teamdata-291012`.`inter`.`adyen_notifications`\n \nwhere success=1  \ngroup by all\n\n),\n\nshop as (\nSELECT case when store_code = 'FR' then 'BirchboxFR'\nwhen store_code = 'DE' then 'BlissimDE'\nwhen store_code = 'ES' then 'BlissimES'\nwhen store_code = 'IT' then 'BlissimIT'\nwhen store_code = 'Store' then 'BirchboxFR_Store01'\nelse 'Unknown store' end as merchantAccountCode,\ndate_trunc(date,month) as date,\n SUM(credit) - SUM(debit) AS cash_shop\nFROM `teamdata-291012`.`accounting`.`shop_detailed`\n\nGROUP BY ALL\norder by date desc\n),\n\nbox as (\nSELECT \ncast(concat(report_year,'-',case when report_month <10 then concat('0',cast(report_month as string))  else cast(report_month as string) end,'-01') as date) as date,\ncase when store_code = 'FR' then 'BirchboxFR'\nwhen store_code = 'DE' then 'BlissimDE'\nwhen store_code = 'ES' then 'BlissimES'\nwhen store_code = 'IT' then 'BlissimIT'\nwhen store_code = 'Store' then 'BirchboxFR_Store01'\nelse 'Unknown store' end as merchantAccountCode,\n ifnull(SUM(gross_revenue + vat_on_gross_revenue - (discount + vat_on_discount) + shipping + vat_on_shipping),0) AS cash_box\nFROM `teamdata-291012`.`accounting`.`box_turnover`\nWHERE payment_period = '02- current_month'\nGROUP BY ALL\n\n\n\n)\n\nselect  merchantaccountcode,date,adyen_authorisation,adyen_refund,Adyen_total, cash_gift,cash_shop,cash_box ,\n cash_box+cash_shop+Cash_GIft-ifnull(net,0) as Query_total,\n (cash_box+cash_shop+Cash_GIft-ifnull(net,0)) -Adyen_total as ecart\n\n from (\n\nselect  merchantaccountcode,date,ifnull(adyen_authorisation,0)adyen_authorisation,ifnull(adyen_refund,0)adyen_refund,Adyen_total,ifnull(cash_gift,0) cash_gift,ifnull(cash_shop,0)cash_shop,ifnull(cash_box,0)cash_box,net from adyen \nleft join GIft using(merchantaccountcode,date)\nleft join shop using(merchantaccountcode,date)\nleft join box using(merchantaccountcode,date)\nleft join tktk using(merchantaccountcode,date)\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shop_detailed": {"database": "teamdata-291012", "schema": "accounting", "name": "shop_detailed", "resource_type": "model", "package_name": "warehouse", "path": "dwh/accounting/shop_detailed.sql", "original_file_path": "models/dwh/accounting/shop_detailed.sql", "unique_id": "model.warehouse.shop_detailed", "fqn": ["warehouse", "dwh", "accounting", "shop_detailed"], "alias": "shop_detailed", "checksum": {"name": "sha256", "checksum": "73c058fa2273de43f2a54a42934e8e287053e7bdd846d664d2d067503cb2b553"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "view", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "ignore"}, "created_at": 1759995463.70322, "relation_name": "`teamdata-291012`.`accounting`.`shop_detailed`", "raw_code": "{{ config(\n    materialized='view',\n    on_schema_change='ignore'\n) }}\n\n\nWITH sales AS (\n  SELECT 'SALES' AS type, product_codification, store_code, shipping_country, year, month, vat_rate, SUM(gross_revenue) AS value, MAX(LAST_DAY(order_date)) AS last_day\n  FROM {{ ref('shop_sales') }}\n  WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n  GROUP BY type, product_codification, store_code, shipping_country, year, month, vat_rate\n),\ndiscount_wout_loyalty AS (\n  SELECT 'DISCOUNT_WOUT_PTS' AS type, product_codification, store_code, shipping_country, year, month, vat_rate, SUM(total_discount - points_discount) AS total_discount, MAX(LAST_DAY(order_date)) AS last_day\n  FROM {{ ref('shop_sales') }}\n  WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n  GROUP BY type, product_codification, store_code, shipping_country, year, month, vat_rate\n),\ndiscount_loyalty AS (\n  SELECT 'POINTS_DISCOUNT' AS type, product_codification, store_code, shipping_country, year, month, vat_rate, SUM(points_discount) AS total_discount, MAX(LAST_DAY(order_date)) AS last_day\n  FROM {{ ref('shop_sales') }}\n  WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n  GROUP BY type, product_codification, store_code, shipping_country, year, month, vat_rate\n),\nshipping_shop AS (\n  SELECT 'SHIPPING' as type, 'ESHOP' AS product_codification, store_code, shipping_country, year, month, vat_rate, SUM(order_total_shipping) AS total_shipping, last_day\n  FROM (\n    SELECT store_code, order_id, ss.shipping_country, ss.year, ss.month, order_total_shipping AS order_total_shipping, COALESCE(tva.taux, 0) AS vat_rate, MAX(last_day(order_date)) AS last_day\n    FROM {{ ref('shop_sales') }} ss\n    LEFT JOIN {{ ref('tva_product') }} tva ON ss.dw_country_code = tva.dw_country_code AND tva.country_code = ss.shipping_country AND tva.category = 'normal'\n    GROUP BY store_code, order_id, shipping_country, year, month, tva.taux,order_total_shipping\n  ) t\n  GROUP BY store_code, vat_rate, last_day, shipping_country, year, month\n),\ntotal_vat AS (\n  SELECT t.type, product_cod AS product_codification, t.store_code, t.shipping_country, year, month, t.vat_rate_, SUM(t.vat) AS value, last_day\n  FROM\n  (\n      SELECT ss.order_id, 'VAT' AS type, 'ALL' AS product_cod, store_code, year, month,\n      ss.shipping_country,\n      vat_rate AS vat_rate_,\n      SUM(ss.vat_on_gross_revenue - ss.vat_on_total_discount) AS vat,\n      MAX(LAST_DAY(order_date)) AS last_day\n      FROM {{ ref('shop_sales') }} ss\n      WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n      GROUP BY ss.order_id, product_cod, store_code, shipping_country, year, month, vat_rate_\n\n      UNION ALL\n\n      SELECT ss.order_id, 'VAT' as type, 'ALL' AS product_cod, store_code, year, month,\n      ss.shipping_country,\n      COALESCE(tva.taux, 0.0) AS vat_rate_,\n      vat_on_total_shipping AS vat,\n      MAX(LAST_DAY(order_date)) AS last_day\n      FROM {{ ref('shop_sales') }} ss\n      LEFT JOIN {{ ref('tva_product') }} tva ON ss.dw_country_code = tva.dw_country_code AND tva.country_code = ss.shipping_country AND tva.category = 'normal'\n      GROUP BY ss.order_id, product_cod, store_code, shipping_country, year, month, tva.taux,vat_on_total_shipping\n  ) t\n  GROUP BY t.type, product_codification, t.store_code, t.shipping_country, year, month, t.vat_rate_, last_day\n),\ndecomposed_data AS (\n  SELECT *\n  FROM sales\n  UNION ALL\n  SELECT *\n  FROM discount_wout_loyalty\n  UNION ALL\n  SELECT *\n  FROM discount_loyalty\n  UNION ALL\n  SELECT *\n  FROM shipping_shop\n  UNION ALL\n  SELECT *\n  FROM total_vat\n),\nmaybe_inverted_debit_credit AS (\n  SELECT t1.journal,\n         t1.date,\n         t1.type,\n         t1.p_codification,\n         t1.store_code,\n         t1.shipping_country,\n         t1.shipping_country_classification,\n         t1.year,\n         t1.month,\n         t1.vat_rate,\n         SUM(t1.value) AS v,\n         CAST(daa.account AS STRING) AS account,\n         CONCAT(daa.type_nice_name, ' ', \n         CASE WHEN t1.p_codification = 'ESHOP' THEN 'FS' \n              WHEN t1.p_codification = 'SPLENDIST' THEN 'SPL'\n              WHEN t1.p_codification = 'CALENDAR' THEN 'CLD'\n              ELSE t1.p_codification END \n         , ' ',\n         t1.shipping_country,\n         CASE WHEN t1.p_codification = 'ESHOP' AND t1.shipping_country_classification <> 'HUE' AND t1.type IN ('SALES',  'DISCOUNT_WOUT_PTS', 'POINTS_DISCOUNT', 'VAT')\n         THEN CONCAT(' ', t1.vat_rate, '% ') ELSE ' ' END, \n         LPAD(CAST(t1.month AS STRING), 2, '0'), RIGHT(CAST(t1.year AS STRING), 2)) AS ecriture,\n         CASE WHEN t1.type IN ('DISCOUNT_WOUT_PTS', 'POINTS_DISCOUNT') THEN SUM(t1.value) ELSE 0 END AS debit,\n         CASE WHEN t1.type IN ('SALES', 'SHIPPING', 'VAT') THEN SUM(t1.value) ELSE 0 END AS credit,\n         daa.analytic\n  FROM (\n      SELECT \n      'VT1' AS journal,\n      dd.last_day AS date,\n      dd.type, \n      dd.product_codification AS p_codification,\n      dd.store_code,\n      dd.shipping_country,\n      CASE \n           WHEN dd.store_code = 'Store' THEN 'FR'\n           WHEN dd.shipping_country = dd.store_code THEN dd.store_code\n           WHEN eu.country_code IS NOT NULL THEN 'EU'\n           ELSE 'HUE'\n      END AS shipping_country_classification,\n      dd.year,\n      dd.month,\n      dd.vat_rate,\n      dd.value\n      FROM decomposed_data dd\n      LEFT JOIN bdd_prod_fr.da_eu_countries eu ON dd.shipping_country = eu.country_code\n  ) t1\n  LEFT JOIN accounting.model daa \n    ON  daa.type = t1.type\n    AND daa.product_codification = t1.p_codification\n    AND daa.store_code = t1.store_code\n    AND (t1.shipping_country_classification <> 'HUE' AND daa.shipping_country = t1.shipping_country\n         OR t1.shipping_country_classification = 'HUE' AND daa.shipping_country = t1.shipping_country_classification)\n    AND (daa.vat_rate = CAST(t1.vat_rate AS STRING) OR (daa.vat_rate IS NULL AND t1.vat_rate IS NULL))\n  GROUP BY journal,\n           date,\n           t1.type,\n           t1.p_codification,\n           t1.store_code,\n           t1.shipping_country,\n           t1.shipping_country_classification,\n           t1.year,\n           t1.month,\n           t1.vat_rate,\n           ecriture,\n           analytic,\n           daa.account\n  HAVING v <> 0\n)\nSELECT * EXCEPT(debit, credit),\n       GREATEST(debit, -credit) AS debit,\n       GREATEST(credit, -debit) AS credit\nFROM maybe_inverted_debit_credit", "language": "sql", "refs": [{"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.shop_sales", "model.warehouse.tva_product"]}, "compiled_path": "target/compiled/warehouse/models/dwh/accounting/shop_detailed.sql", "compiled": true, "compiled_code": "\n\n\nWITH sales AS (\n  SELECT 'SALES' AS type, product_codification, store_code, shipping_country, year, month, vat_rate, SUM(gross_revenue) AS value, MAX(LAST_DAY(order_date)) AS last_day\n  FROM `teamdata-291012`.`sales`.`shop_sales`\n  WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n  GROUP BY type, product_codification, store_code, shipping_country, year, month, vat_rate\n),\ndiscount_wout_loyalty AS (\n  SELECT 'DISCOUNT_WOUT_PTS' AS type, product_codification, store_code, shipping_country, year, month, vat_rate, SUM(total_discount - points_discount) AS total_discount, MAX(LAST_DAY(order_date)) AS last_day\n  FROM `teamdata-291012`.`sales`.`shop_sales`\n  WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n  GROUP BY type, product_codification, store_code, shipping_country, year, month, vat_rate\n),\ndiscount_loyalty AS (\n  SELECT 'POINTS_DISCOUNT' AS type, product_codification, store_code, shipping_country, year, month, vat_rate, SUM(points_discount) AS total_discount, MAX(LAST_DAY(order_date)) AS last_day\n  FROM `teamdata-291012`.`sales`.`shop_sales`\n  WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n  GROUP BY type, product_codification, store_code, shipping_country, year, month, vat_rate\n),\nshipping_shop AS (\n  SELECT 'SHIPPING' as type, 'ESHOP' AS product_codification, store_code, shipping_country, year, month, vat_rate, SUM(order_total_shipping) AS total_shipping, last_day\n  FROM (\n    SELECT store_code, order_id, ss.shipping_country, ss.year, ss.month, order_total_shipping AS order_total_shipping, COALESCE(tva.taux, 0) AS vat_rate, MAX(last_day(order_date)) AS last_day\n    FROM `teamdata-291012`.`sales`.`shop_sales` ss\n    LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON ss.dw_country_code = tva.dw_country_code AND tva.country_code = ss.shipping_country AND tva.category = 'normal'\n    GROUP BY store_code, order_id, shipping_country, year, month, tva.taux,order_total_shipping\n  ) t\n  GROUP BY store_code, vat_rate, last_day, shipping_country, year, month\n),\ntotal_vat AS (\n  SELECT t.type, product_cod AS product_codification, t.store_code, t.shipping_country, year, month, t.vat_rate_, SUM(t.vat) AS value, last_day\n  FROM\n  (\n      SELECT ss.order_id, 'VAT' AS type, 'ALL' AS product_cod, store_code, year, month,\n      ss.shipping_country,\n      vat_rate AS vat_rate_,\n      SUM(ss.vat_on_gross_revenue - ss.vat_on_total_discount) AS vat,\n      MAX(LAST_DAY(order_date)) AS last_day\n      FROM `teamdata-291012`.`sales`.`shop_sales` ss\n      WHERE product_codification NOT IN ('LOYALTY', 'LOYALTY COUPON', 'GIFT')\n      GROUP BY ss.order_id, product_cod, store_code, shipping_country, year, month, vat_rate_\n\n      UNION ALL\n\n      SELECT ss.order_id, 'VAT' as type, 'ALL' AS product_cod, store_code, year, month,\n      ss.shipping_country,\n      COALESCE(tva.taux, 0.0) AS vat_rate_,\n      vat_on_total_shipping AS vat,\n      MAX(LAST_DAY(order_date)) AS last_day\n      FROM `teamdata-291012`.`sales`.`shop_sales` ss\n      LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON ss.dw_country_code = tva.dw_country_code AND tva.country_code = ss.shipping_country AND tva.category = 'normal'\n      GROUP BY ss.order_id, product_cod, store_code, shipping_country, year, month, tva.taux,vat_on_total_shipping\n  ) t\n  GROUP BY t.type, product_codification, t.store_code, t.shipping_country, year, month, t.vat_rate_, last_day\n),\ndecomposed_data AS (\n  SELECT *\n  FROM sales\n  UNION ALL\n  SELECT *\n  FROM discount_wout_loyalty\n  UNION ALL\n  SELECT *\n  FROM discount_loyalty\n  UNION ALL\n  SELECT *\n  FROM shipping_shop\n  UNION ALL\n  SELECT *\n  FROM total_vat\n),\nmaybe_inverted_debit_credit AS (\n  SELECT t1.journal,\n         t1.date,\n         t1.type,\n         t1.p_codification,\n         t1.store_code,\n         t1.shipping_country,\n         t1.shipping_country_classification,\n         t1.year,\n         t1.month,\n         t1.vat_rate,\n         SUM(t1.value) AS v,\n         CAST(daa.account AS STRING) AS account,\n         CONCAT(daa.type_nice_name, ' ', \n         CASE WHEN t1.p_codification = 'ESHOP' THEN 'FS' \n              WHEN t1.p_codification = 'SPLENDIST' THEN 'SPL'\n              WHEN t1.p_codification = 'CALENDAR' THEN 'CLD'\n              ELSE t1.p_codification END \n         , ' ',\n         t1.shipping_country,\n         CASE WHEN t1.p_codification = 'ESHOP' AND t1.shipping_country_classification <> 'HUE' AND t1.type IN ('SALES',  'DISCOUNT_WOUT_PTS', 'POINTS_DISCOUNT', 'VAT')\n         THEN CONCAT(' ', t1.vat_rate, '% ') ELSE ' ' END, \n         LPAD(CAST(t1.month AS STRING), 2, '0'), RIGHT(CAST(t1.year AS STRING), 2)) AS ecriture,\n         CASE WHEN t1.type IN ('DISCOUNT_WOUT_PTS', 'POINTS_DISCOUNT') THEN SUM(t1.value) ELSE 0 END AS debit,\n         CASE WHEN t1.type IN ('SALES', 'SHIPPING', 'VAT') THEN SUM(t1.value) ELSE 0 END AS credit,\n         daa.analytic\n  FROM (\n      SELECT \n      'VT1' AS journal,\n      dd.last_day AS date,\n      dd.type, \n      dd.product_codification AS p_codification,\n      dd.store_code,\n      dd.shipping_country,\n      CASE \n           WHEN dd.store_code = 'Store' THEN 'FR'\n           WHEN dd.shipping_country = dd.store_code THEN dd.store_code\n           WHEN eu.country_code IS NOT NULL THEN 'EU'\n           ELSE 'HUE'\n      END AS shipping_country_classification,\n      dd.year,\n      dd.month,\n      dd.vat_rate,\n      dd.value\n      FROM decomposed_data dd\n      LEFT JOIN bdd_prod_fr.da_eu_countries eu ON dd.shipping_country = eu.country_code\n  ) t1\n  LEFT JOIN accounting.model daa \n    ON  daa.type = t1.type\n    AND daa.product_codification = t1.p_codification\n    AND daa.store_code = t1.store_code\n    AND (t1.shipping_country_classification <> 'HUE' AND daa.shipping_country = t1.shipping_country\n         OR t1.shipping_country_classification = 'HUE' AND daa.shipping_country = t1.shipping_country_classification)\n    AND (daa.vat_rate = CAST(t1.vat_rate AS STRING) OR (daa.vat_rate IS NULL AND t1.vat_rate IS NULL))\n  GROUP BY journal,\n           date,\n           t1.type,\n           t1.p_codification,\n           t1.store_code,\n           t1.shipping_country,\n           t1.shipping_country_classification,\n           t1.year,\n           t1.month,\n           t1.vat_rate,\n           ecriture,\n           analytic,\n           daa.account\n  HAVING v <> 0\n)\nSELECT * EXCEPT(debit, credit),\n       GREATEST(debit, -credit) AS debit,\n       GREATEST(credit, -debit) AS credit\nFROM maybe_inverted_debit_credit", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_turnover": {"database": "teamdata-291012", "schema": "accounting", "name": "box_turnover", "resource_type": "model", "package_name": "warehouse", "path": "dwh/accounting/box_turnover.sql", "original_file_path": "models/dwh/accounting/box_turnover.sql", "unique_id": "model.warehouse.box_turnover", "fqn": ["warehouse", "dwh", "accounting", "box_turnover"], "alias": "box_turnover", "checksum": {"name": "sha256", "checksum": "de416a9869425e4f11a95830f1d2282a90c76880579b1133d64014aa0991db9a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "view", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "ignore"}, "created_at": 1759995463.704823, "relation_name": "`teamdata-291012`.`accounting`.`box_turnover`", "raw_code": "{{ config(\n    materialized='view',\n    on_schema_change='ignore'\n) }}\n\nWITH all_box_sales AS (\n  SELECT EXTRACT(YEAR FROM payment_date) AS year_payment_date, EXTRACT(MONTH FROM payment_date) AS month_payment_date, DATE(payment_date) AS payment_date, box_id, store_code, shipping_country, gift, vat_rate, payment_status, self, year, month, date, gross_revenue, vat_on_gross_revenue, discount, vat_on_discount, shipping, vat_on_shipping\n  FROM {{ ref('box_sales') }}\n  WHERE self = 1\n  AND payment_status = 'paid'\n  UNION ALL\n  SELECT EXTRACT(YEAR FROM ana.eventDate) AS year_payment_date, EXTRACT(MONTH FROM ana.eventDate) AS month_payment_date, DATE(ana.eventDate) AS payment_date, br.box_id, br.store_code, br.shipping_country, br.gift, br.vat_rate, br.payment_status, br.self, br.year, br.month, br.date, -br.gross_revenue, -br.vat_on_gross_revenue, -br.discount, -br.vat_on_discount, -br.shipping, -br.vat_on_shipping\n  FROM {{ ref('box_refunds') }} br\n  INNER JOIN {{ ref('order_detail_sub') }} s ON br.sub_id = s.id AND br.dw_country_code = s.dw_country_code\n  LEFT JOIN {{ ref('box_sales') }} bs ON bs.sub_id = s.id AND br.dw_country_code = bs.dw_country_code\n  LEFT JOIN {{ ref('adyen_notifications_authorization') }} ana ON ana.sub_id = br.sub_id AND ana.dw_country_code = br.dw_country_code\n  WHERE bs.sub_id IS NULL\n  AND br.self = 1\n  AND br.payment_status = 'paid'\n  UNION ALL\n  SELECT EXTRACT(YEAR FROM br.payment_date) AS year_payment_date, EXTRACT(MONTH FROM br.payment_date) AS month_payment_date, DATE(br.payment_date) AS payment_date, br.box_id, br.store_code, br.shipping_country, br.gift, br.vat_rate, br.payment_status, br.self, br.year, br.month, br.date, br.gross_revenue, br.vat_on_gross_revenue, br.discount, br.vat_on_discount, br.shipping, br.vat_on_shipping\n  FROM {{ ref('box_refunds') }} br\n  left join (\n  select * \n  from {{ ref('box_sales') }} bs \n  where  bs.sub_payment_status_id in (1,2,9)\n  ) bs using(year,month,dw_country_code,sub_id,total_product)\n  WHERE br.self = 1\n  AND br.payment_status = 'paid' and bs.total_product is null\n),\naccounting_box_sales AS (\n  SELECT *, year AS report_year, month AS report_month, date AS report_date\n  FROM all_box_sales\n  UNION ALL\n  SELECT *, year_payment_date AS report_year, month_payment_date AS report_month, payment_date AS report_date\n  FROM all_box_sales\n  WHERE year_payment_date != year\n  OR month_payment_date != month\n)\nSELECT t.*, \nCASE WHEN payment_period = '02- current_month' AND box = '02- current_box' THEN 'SELF BOX current month/current box'\n     WHEN payment_period = '01- past' AND box = '02- current_box' THEN 'SELF BOX past month/current box'\n     WHEN payment_period = '02- current_month' AND box = '03- future_box = PCA' THEN 'SELF BOX current month/future box'\n     WHEN payment_period = '02- current_month' AND box = '01- previous_box' THEN 'SELF BOX current month/previous box'\n     ELSE payment_period || ' - ' || box END AS product_codification\nFROM\n(\n    SELECT bs.report_year,\n           bs.report_month,\n           CASE WHEN bs.payment_date < bs.report_date THEN '01- past'\n                WHEN bs.payment_date > LAST_DAY(bs.report_date) THEN '03- future_payments'\n                ELSE '02- current_month'\n           END AS payment_period,\n           CASE WHEN bs.date < DATE_TRUNC(bs.report_date, MONTH) THEN '01- previous_box'\n                WHEN bs.date > DATE_TRUNC(bs.report_date, MONTH) THEN '03- future_box = PCA'\n                WHEN bs.date = DATE_TRUNC(bs.report_date, MONTH) THEN '02- current_box'\n                ELSE 'other'\n           END AS box,\n           bs.store_code,\n           bs.shipping_country,\n           CASE WHEN bs.shipping_country = bs.store_code THEN bs.store_code\n               WHEN MAX(eu.country_code) IS NOT NULL THEN 'EU'\n               ELSE 'HUE'\n           END AS shipping_country_classification,\n           CASE WHEN bs.gift = 1 THEN 'GIFT' ELSE 'SELF' END AS sub_category,\n           bs.vat_rate,\n           SUM(gross_revenue) AS gross_revenue,\n           SUM(vat_on_gross_revenue) AS vat_on_gross_revenue,\n           SUM(discount) AS discount,\n           SUM(vat_on_discount) AS vat_on_discount,\n           SUM(shipping) AS shipping,\n           SUM(vat_on_shipping) AS vat_on_shipping\n    FROM accounting_box_sales bs\n    LEFT JOIN {{ ref('da_eu_countries') }} eu ON bs.shipping_country = eu.country_code and eu.dw_country_code='FR'\n    GROUP BY report_year, report_month, payment_period, box, vat_rate, bs.gift, bs.self, bs.store_code, bs.shipping_country\n) t\nWHERE payment_period  <> '03- future_payments'", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}, {"name": "box_refunds", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "adyen_notifications_authorization", "package": null, "version": null}, {"name": "box_refunds", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "da_eu_countries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_sales", "model.warehouse.box_refunds", "model.warehouse.order_detail_sub", "model.warehouse.adyen_notifications_authorization", "model.warehouse.da_eu_countries"]}, "compiled_path": "target/compiled/warehouse/models/dwh/accounting/box_turnover.sql", "compiled": true, "compiled_code": "\n\nWITH all_box_sales AS (\n  SELECT EXTRACT(YEAR FROM payment_date) AS year_payment_date, EXTRACT(MONTH FROM payment_date) AS month_payment_date, DATE(payment_date) AS payment_date, box_id, store_code, shipping_country, gift, vat_rate, payment_status, self, year, month, date, gross_revenue, vat_on_gross_revenue, discount, vat_on_discount, shipping, vat_on_shipping\n  FROM `teamdata-291012`.`sales`.`box_sales`\n  WHERE self = 1\n  AND payment_status = 'paid'\n  UNION ALL\n  SELECT EXTRACT(YEAR FROM ana.eventDate) AS year_payment_date, EXTRACT(MONTH FROM ana.eventDate) AS month_payment_date, DATE(ana.eventDate) AS payment_date, br.box_id, br.store_code, br.shipping_country, br.gift, br.vat_rate, br.payment_status, br.self, br.year, br.month, br.date, -br.gross_revenue, -br.vat_on_gross_revenue, -br.discount, -br.vat_on_discount, -br.shipping, -br.vat_on_shipping\n  FROM `teamdata-291012`.`sales`.`box_refunds` br\n  INNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON br.sub_id = s.id AND br.dw_country_code = s.dw_country_code\n  LEFT JOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.sub_id = s.id AND br.dw_country_code = bs.dw_country_code\n  LEFT JOIN `teamdata-291012`.`payment`.`adyen_notifications_authorization` ana ON ana.sub_id = br.sub_id AND ana.dw_country_code = br.dw_country_code\n  WHERE bs.sub_id IS NULL\n  AND br.self = 1\n  AND br.payment_status = 'paid'\n  UNION ALL\n  SELECT EXTRACT(YEAR FROM br.payment_date) AS year_payment_date, EXTRACT(MONTH FROM br.payment_date) AS month_payment_date, DATE(br.payment_date) AS payment_date, br.box_id, br.store_code, br.shipping_country, br.gift, br.vat_rate, br.payment_status, br.self, br.year, br.month, br.date, br.gross_revenue, br.vat_on_gross_revenue, br.discount, br.vat_on_discount, br.shipping, br.vat_on_shipping\n  FROM `teamdata-291012`.`sales`.`box_refunds` br\n  left join (\n  select * \n  from `teamdata-291012`.`sales`.`box_sales` bs \n  where  bs.sub_payment_status_id in (1,2,9)\n  ) bs using(year,month,dw_country_code,sub_id,total_product)\n  WHERE br.self = 1\n  AND br.payment_status = 'paid' and bs.total_product is null\n),\naccounting_box_sales AS (\n  SELECT *, year AS report_year, month AS report_month, date AS report_date\n  FROM all_box_sales\n  UNION ALL\n  SELECT *, year_payment_date AS report_year, month_payment_date AS report_month, payment_date AS report_date\n  FROM all_box_sales\n  WHERE year_payment_date != year\n  OR month_payment_date != month\n)\nSELECT t.*, \nCASE WHEN payment_period = '02- current_month' AND box = '02- current_box' THEN 'SELF BOX current month/current box'\n     WHEN payment_period = '01- past' AND box = '02- current_box' THEN 'SELF BOX past month/current box'\n     WHEN payment_period = '02- current_month' AND box = '03- future_box = PCA' THEN 'SELF BOX current month/future box'\n     WHEN payment_period = '02- current_month' AND box = '01- previous_box' THEN 'SELF BOX current month/previous box'\n     ELSE payment_period || ' - ' || box END AS product_codification\nFROM\n(\n    SELECT bs.report_year,\n           bs.report_month,\n           CASE WHEN bs.payment_date < bs.report_date THEN '01- past'\n                WHEN bs.payment_date > LAST_DAY(bs.report_date) THEN '03- future_payments'\n                ELSE '02- current_month'\n           END AS payment_period,\n           CASE WHEN bs.date < DATE_TRUNC(bs.report_date, MONTH) THEN '01- previous_box'\n                WHEN bs.date > DATE_TRUNC(bs.report_date, MONTH) THEN '03- future_box = PCA'\n                WHEN bs.date = DATE_TRUNC(bs.report_date, MONTH) THEN '02- current_box'\n                ELSE 'other'\n           END AS box,\n           bs.store_code,\n           bs.shipping_country,\n           CASE WHEN bs.shipping_country = bs.store_code THEN bs.store_code\n               WHEN MAX(eu.country_code) IS NOT NULL THEN 'EU'\n               ELSE 'HUE'\n           END AS shipping_country_classification,\n           CASE WHEN bs.gift = 1 THEN 'GIFT' ELSE 'SELF' END AS sub_category,\n           bs.vat_rate,\n           SUM(gross_revenue) AS gross_revenue,\n           SUM(vat_on_gross_revenue) AS vat_on_gross_revenue,\n           SUM(discount) AS discount,\n           SUM(vat_on_discount) AS vat_on_discount,\n           SUM(shipping) AS shipping,\n           SUM(vat_on_shipping) AS vat_on_shipping\n    FROM accounting_box_sales bs\n    LEFT JOIN `teamdata-291012`.`inter`.`da_eu_countries` eu ON bs.shipping_country = eu.country_code and eu.dw_country_code='FR'\n    GROUP BY report_year, report_month, payment_period, box, vat_rate, bs.gift, bs.self, bs.store_code, bs.shipping_country\n) t\nWHERE payment_period  <> '03- future_payments'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.current_box": {"database": "teamdata-291012", "schema": "snippets", "name": "current_box", "resource_type": "model", "package_name": "warehouse", "path": "dwh/snippets/current_box.sql", "original_file_path": "models/dwh/snippets/current_box.sql", "unique_id": "model.warehouse.current_box", "fqn": ["warehouse", "dwh", "snippets", "current_box"], "alias": "current_box", "checksum": {"name": "sha256", "checksum": "679d0717b6ff875644929a39683a3626dce151077a75533805c23ee95c000f02"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.7063339, "relation_name": "`teamdata-291012`.`snippets`.`current_box`", "raw_code": "SELECT dw_country_code,\n       id AS current_box_id\nFROM {{ ref('boxes') }}\nWHERE shipping_status_id = 2", "language": "sql", "refs": [{"name": "boxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.boxes"]}, "compiled_path": "target/compiled/warehouse/models/dwh/snippets/current_box.sql", "compiled": true, "compiled_code": "SELECT dw_country_code,\n       id AS current_box_id\nFROM `teamdata-291012`.`inter`.`boxes`\nWHERE shipping_status_id = 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_acquisition_detail": {"database": "teamdata-291012", "schema": "sales", "name": "box_acquisition_detail", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_acquisition_detail.sql", "original_file_path": "models/dwh/sales/box_acquisition_detail.sql", "unique_id": "model.warehouse.box_acquisition_detail", "fqn": ["warehouse", "dwh", "sales", "box_acquisition_detail"], "alias": "box_acquisition_detail", "checksum": {"name": "sha256", "checksum": "63d6d5e602201b9b0528678041f4ab9a689e060404f7ba9e131cb806a9013ad8"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.707774, "relation_name": "`teamdata-291012`.`sales`.`box_acquisition_detail`", "raw_code": "WITH all_boxes_by_user AS (\n  SELECT bs.dw_country_code, bs.user_id, bs.box_id\n  FROM {{ ref('box_sales') }} AS bs\n)\nSELECT t.dw_country_code,\n       t.box_id,\n       MAX(b.shipping_date) AS cycle_start_date,\n       FORMAT_DATE('%Y-%m', MAX(b.date)) AS m,\n       DATE_DIFF(MAX(last_payment_date), MAX(b.shipping_date), DAY) + 1 AS day_in_cycle,\n       CASE WHEN last_payment_date >= b.shipping_date THEN t.last_payment_date END AS d,\n       CASE WHEN last_payment_date < b.shipping_date THEN 'before opening cycle' ELSE 'after opening cycle' END AS cycle,\n       CASE WHEN self = 0 THEN 'gift'\n            WHEN fb.first_box_id = t.box_id THEN 'new'\n            ELSE 'reactivation'\n       END AS type,\n       COUNT(*) AS nb\nFROM\n(\n    SELECT o.dw_country_code,\n           s.box_id,\n           s.last_payment_date,\n           o.user_id,\n           CASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self\n           FROM {{ ref('orders') }} o\n           INNER JOIN {{ ref('order_details') }} d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n           INNER JOIN {{ ref('order_detail_sub') }} s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\n           LEFT JOIN all_boxes_by_user bu ON o.dw_country_code = bu.dw_country_code AND bu.box_id + 1 = s.box_id AND o.user_id = bu.user_id\n           WHERE o.status_id IN (1, 3)\n           AND s.shipping_Status_id IN (2, 3, 4, 5, 22)\n           AND bu.box_id IS NULL\n) t\nINNER JOIN {{ ref('boxes') }} b ON b.id = t.box_id AND t.dw_country_code = b.dw_country_code\nINNER JOIN (SELECT dw_country_code, user_id, MIN(box_id) AS first_box_id\n            FROM all_boxes_by_user\n            GROUP BY dw_country_code,\n                     user_id) fb ON t.dw_country_code = fb.dw_country_code AND t.user_id = fb.user_id\nGROUP BY t.dw_country_code, t.box_id, d, cycle, type", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_sales", "model.warehouse.orders", "model.warehouse.order_details", "model.warehouse.order_detail_sub", "model.warehouse.boxes"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_acquisition_detail.sql", "compiled": true, "compiled_code": "WITH all_boxes_by_user AS (\n  SELECT bs.dw_country_code, bs.user_id, bs.box_id\n  FROM `teamdata-291012`.`sales`.`box_sales` AS bs\n)\nSELECT t.dw_country_code,\n       t.box_id,\n       MAX(b.shipping_date) AS cycle_start_date,\n       FORMAT_DATE('%Y-%m', MAX(b.date)) AS m,\n       DATE_DIFF(MAX(last_payment_date), MAX(b.shipping_date), DAY) + 1 AS day_in_cycle,\n       CASE WHEN last_payment_date >= b.shipping_date THEN t.last_payment_date END AS d,\n       CASE WHEN last_payment_date < b.shipping_date THEN 'before opening cycle' ELSE 'after opening cycle' END AS cycle,\n       CASE WHEN self = 0 THEN 'gift'\n            WHEN fb.first_box_id = t.box_id THEN 'new'\n            ELSE 'reactivation'\n       END AS type,\n       COUNT(*) AS nb\nFROM\n(\n    SELECT o.dw_country_code,\n           s.box_id,\n           s.last_payment_date,\n           o.user_id,\n           CASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self\n           FROM `teamdata-291012`.`inter`.`orders` o\n           INNER JOIN `teamdata-291012`.`inter`.`order_details` d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n           INNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\n           LEFT JOIN all_boxes_by_user bu ON o.dw_country_code = bu.dw_country_code AND bu.box_id + 1 = s.box_id AND o.user_id = bu.user_id\n           WHERE o.status_id IN (1, 3)\n           AND s.shipping_Status_id IN (2, 3, 4, 5, 22)\n           AND bu.box_id IS NULL\n) t\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = t.box_id AND t.dw_country_code = b.dw_country_code\nINNER JOIN (SELECT dw_country_code, user_id, MIN(box_id) AS first_box_id\n            FROM all_boxes_by_user\n            GROUP BY dw_country_code,\n                     user_id) fb ON t.dw_country_code = fb.dw_country_code AND t.user_id = fb.user_id\nGROUP BY t.dw_country_code, t.box_id, d, cycle, type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_refunds": {"database": "teamdata-291012", "schema": "sales", "name": "box_refunds", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_refunds.sql", "original_file_path": "models/dwh/sales/box_refunds.sql", "unique_id": "model.warehouse.box_refunds", "fqn": ["warehouse", "dwh", "sales", "box_refunds"], "alias": "box_refunds", "checksum": {"name": "sha256", "checksum": "ebd704dd10f2de5e29e6855d3231b296844ebde11ac4e210506cfe8b5c3fcc9a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.709364, "relation_name": "`teamdata-291012`.`sales`.`box_refunds`", "raw_code": "SELECT t.*,\n- t.total_product / (1+vat_rate/100) AS gross_revenue,\n- (t.total_product - t.total_product/(1+vat_rate/100)) AS vat_on_gross_revenue,\n- t.total_discount / (1+vat_rate/100) AS discount,\n- (t.total_discount - t.total_discount / (1+vat_rate/100)) AS vat_on_discount,\n- t.total_shipping/(1+vat_rate/100) AS shipping,\n- (t.total_shipping - t.total_shipping/(1+vat_rate/100)) AS vat_on_shipping\nFROM\n(\n--   ------------------ BOX TOTAL Refunds --------------------------\nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id,\ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nEXTRACT(month FROM b.date) AS month,\nEXTRACT(year FROM b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity = -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\nCASE WHEN s.total_product = 0 AND gc.id IS NULL THEN 0\n     WHEN s.total_product = 0 AND gc.id IS NOT NULL THEN gc.amount/gc.duration\n     ELSE s.total_product \nEND AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\nCASE WHEN c.dw_country_code = 'FR' AND c.parent_id = 15237671 AND s.box_id = d.sub_start_box THEN 0.0 -- Veepee offer - May 2021\n     WHEN so.dw_country_code = 'FR' AND so.parent_offer_id = 53382 THEN 0.0 -- Veepee offer - May 2021\n     ELSE s.total_discount END AS total_discount,\ns.shipping_country AS shipping_country,\ns.total_shipping AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM {{ ref('adyen_notifications') }} an\nINNER JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN {{ ref('order_detail_sub') }} s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\nINNER JOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nINNER JOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN {{ ref('gift_cards') }} gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN {{ ref('coupons') }} c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN {{ ref('sub_offers') }} so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN bdd_prod_fr.wp_jb_sub_payments_status sps ON sps.id = s.sub_payment_status_id\nLEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND an.sub_id > 0\nAND ABS(1.0*an.value/100 - s.total) < 0.03\n\nUNION ALL\n\n-- ---------------- shipping refunds  ------------------------------\nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id, \ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nEXTRACT(month FROM b.date) AS month,\nEXTRACT(year FROM b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity = -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\n0 AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\n0 AS total_discount,\ns.shipping_country AS shipping_country,\n1.0*an.value/100 AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM {{ ref('adyen_notifications') }} an\nINNER JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN {{ ref('order_detail_sub') }} s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\nINNER JOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nINNER JOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN {{ ref('gift_cards') }} gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN {{ ref('coupons') }} c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN {{ ref('sub_offers') }} so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN bdd_prod_fr.wp_jb_sub_payments_status sps ON sps.id = s.sub_payment_status_id\nLEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND an.sub_id > 0\nAND abs(1.0*an.value/100 - s.total) >= 0.03\nAND 1.0*an.value/100 <= s.total_shipping\n  \nUNION ALL\n  \n-- ---------------- partial box refunds  ------------------------------\n  \nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id, \ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nEXTRACT(month FROM b.date) AS month,\nEXTRACT(year FROM b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity = -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\n1.0*an.value/100 AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\n0 AS total_discount,\ns.shipping_country AS shipping_country,\n0 AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM {{ ref('adyen_notifications') }} an\nINNER JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN {{ ref('order_detail_sub') }} s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\nINNER JOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nINNER JOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN {{ ref('gift_cards') }} gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN {{ ref('coupons') }} c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN {{ ref('sub_offers') }} so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN bdd_prod_fr.wp_jb_sub_payments_status sps ON sps.id = s.sub_payment_status_id\nLEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND an.sub_id > 0\nAND abs(1.0*an.value/100 - s.total) >= 0.03\nAND 1.0*an.value/100 > s.total_shipping\n  \nUNION ALL\n  \n-- ------------------------ box ORDER refunds--------------------------\nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id, \ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nextract(month from b.date) AS month,\nextract(year from b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity= -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\nCASE  WHEN s.total_product = 0 AND gc.id IS NULL THEN 0\n      WHEN s.total_product = 0 AND gc.id IS NOT NULL THEN gc.amount/gc.duration\n      ELSE s.total_product \nEND AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\nCASE WHEN c.dw_country_code = 'FR' AND c.parent_id = 15237671 AND s.box_id = d.sub_start_box THEN 0.0 -- Veepee offer - May 2021\n     WHEN so.dw_country_code = 'FR' AND so.parent_offer_id = 53382 THEN 0.0 -- Veepee offer - May 2021\n     ELSE s.total_discount\nEND AS total_discount,\ns.shipping_country AS shipping_country,\ns.total_shipping AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM {{ ref('adyen_notifications') }} an\nINNER JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN {{ ref('order_details') }} d ON d.order_id = o.id AND d.product_id = 1 AND d.dw_country_code = o.dw_country_code\nINNER JOIN {{ ref('order_detail_sub') }} s ON s.order_detail_id = d.id AND s.box_id = d.sub_start_box AND s.dw_country_code = d.dw_country_code\nINNER JOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN {{ ref('gift_cards') }} gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN {{ ref('coupons') }} c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN {{ ref('sub_offers') }} so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN {{ ref('sub_payments_status') }}sps ON sps.id = s.sub_payment_status_id and sps.dw_country_code='FR'\nLEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND (an.sub_id IS NULL OR an.sub_id = 0)\nAND ABS(1.0*an.value/100 - s.total) < 0.03) t", "language": "sql", "refs": [{"name": "adyen_notifications", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "sub_offers", "package": null, "version": null}, {"name": "adyen_notifications", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "sub_offers", "package": null, "version": null}, {"name": "adyen_notifications", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "sub_offers", "package": null, "version": null}, {"name": "adyen_notifications", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "sub_offers", "package": null, "version": null}, {"name": "sub_payments_status", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.adyen_notifications", "model.warehouse.orders", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.boxes", "model.warehouse.gift_cards", "model.warehouse.coupons", "model.warehouse.sub_offers", "model.warehouse.sub_payments_status", "model.warehouse.tva_product"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_refunds.sql", "compiled": true, "compiled_code": "SELECT t.*,\n- t.total_product / (1+vat_rate/100) AS gross_revenue,\n- (t.total_product - t.total_product/(1+vat_rate/100)) AS vat_on_gross_revenue,\n- t.total_discount / (1+vat_rate/100) AS discount,\n- (t.total_discount - t.total_discount / (1+vat_rate/100)) AS vat_on_discount,\n- t.total_shipping/(1+vat_rate/100) AS shipping,\n- (t.total_shipping - t.total_shipping/(1+vat_rate/100)) AS vat_on_shipping\nFROM\n(\n--   ------------------ BOX TOTAL Refunds --------------------------\nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id,\ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nEXTRACT(month FROM b.date) AS month,\nEXTRACT(year FROM b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity = -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\nCASE WHEN s.total_product = 0 AND gc.id IS NULL THEN 0\n     WHEN s.total_product = 0 AND gc.id IS NOT NULL THEN gc.amount/gc.duration\n     ELSE s.total_product \nEND AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\nCASE WHEN c.dw_country_code = 'FR' AND c.parent_id = 15237671 AND s.box_id = d.sub_start_box THEN 0.0 -- Veepee offer - May 2021\n     WHEN so.dw_country_code = 'FR' AND so.parent_offer_id = 53382 THEN 0.0 -- Veepee offer - May 2021\n     ELSE s.total_discount END AS total_discount,\ns.shipping_country AS shipping_country,\ns.total_shipping AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM `teamdata-291012`.`inter`.`adyen_notifications` an\nINNER JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`coupons` c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`sub_offers` so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN bdd_prod_fr.wp_jb_sub_payments_status sps ON sps.id = s.sub_payment_status_id\nLEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND an.sub_id > 0\nAND ABS(1.0*an.value/100 - s.total) < 0.03\n\nUNION ALL\n\n-- ---------------- shipping refunds  ------------------------------\nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id, \ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nEXTRACT(month FROM b.date) AS month,\nEXTRACT(year FROM b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity = -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\n0 AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\n0 AS total_discount,\ns.shipping_country AS shipping_country,\n1.0*an.value/100 AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM `teamdata-291012`.`inter`.`adyen_notifications` an\nINNER JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`coupons` c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`sub_offers` so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN bdd_prod_fr.wp_jb_sub_payments_status sps ON sps.id = s.sub_payment_status_id\nLEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND an.sub_id > 0\nAND abs(1.0*an.value/100 - s.total) >= 0.03\nAND 1.0*an.value/100 <= s.total_shipping\n  \nUNION ALL\n  \n-- ---------------- partial box refunds  ------------------------------\n  \nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id, \ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nEXTRACT(month FROM b.date) AS month,\nEXTRACT(year FROM b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity = -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\n1.0*an.value/100 AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\n0 AS total_discount,\ns.shipping_country AS shipping_country,\n0 AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM `teamdata-291012`.`inter`.`adyen_notifications` an\nINNER JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`coupons` c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`sub_offers` so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN bdd_prod_fr.wp_jb_sub_payments_status sps ON sps.id = s.sub_payment_status_id\nLEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND an.sub_id > 0\nAND abs(1.0*an.value/100 - s.total) >= 0.03\nAND 1.0*an.value/100 > s.total_shipping\n  \nUNION ALL\n  \n-- ------------------------ box ORDER refunds--------------------------\nSELECT an.dw_country_code,\ns.id AS sub_id,\nd.id AS order_detail_id,\no.id AS order_id,\no.user_id, \ns.box_id,\nb.date,\nan.eventdate AS payment_date,\nextract(month from b.date) AS month,\nextract(year from b.date) AS year,\ns.shipping_mode,\nCASE WHEN d.gift_card_id = 0 OR (d.gift_card_id > 0 AND (s.box_id - d.sub_start_box >= d.quantity)) THEN 1 ELSE 0 END AS self,\nCASE WHEN d.gift_card_id > 0 AND (s.box_id - d.sub_start_box < d.quantity) THEN 1 ELSE 0 END AS gift,\nCASE WHEN yc.yearly_coupon_id IS NOT NULL THEN 1 ELSE 0 END AS yearly,\nCASE WHEN d.quantity= -12 THEN 1 ELSE 0 END AS old_yearly,\nd.quantity AS dquantity,\ns.cannot_suspend AS cannot_suspend,\nCASE  WHEN s.total_product = 0 AND gc.id IS NULL THEN 0\n      WHEN s.total_product = 0 AND gc.id IS NOT NULL THEN gc.amount/gc.duration\n      ELSE s.total_product \nEND AS total_product,\nan.dw_country_code AS store_code,\nCOALESCE(tva.taux, 0) AS vat_rate,\nCASE WHEN c.dw_country_code = 'FR' AND c.parent_id = 15237671 AND s.box_id = d.sub_start_box THEN 0.0 -- Veepee offer - May 2021\n     WHEN so.dw_country_code = 'FR' AND so.parent_offer_id = 53382 THEN 0.0 -- Veepee offer - May 2021\n     ELSE s.total_discount\nEND AS total_discount,\ns.shipping_country AS shipping_country,\ns.total_shipping AS total_shipping,\nCASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\nsps.name AS sub_payment_status,\nd.sub_start_box\nFROM `teamdata-291012`.`inter`.`adyen_notifications` an\nINNER JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_details` d ON d.order_id = o.id AND d.product_id = 1 AND d.dw_country_code = o.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.order_detail_id = d.id AND s.box_id = d.sub_start_box AND s.dw_country_code = d.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`coupons` c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`sub_offers` so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`sub_payments_status`sps ON sps.id = s.sub_payment_status_id and sps.dw_country_code='FR'\nLEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\nLEFT JOIN snippets.yearly_coupons yc ON an.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\nWHERE an.eventdate >= '2018-01-01'\nAND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\nAND an.success = 1\nAND (an.sub_id IS NULL OR an.sub_id = 0)\nAND ABS(1.0*an.value/100 - s.total) < 0.03) t", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_gift": {"database": "teamdata-291012", "schema": "sales", "name": "box_gift", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_gift.sql", "original_file_path": "models/dwh/sales/box_gift.sql", "unique_id": "model.warehouse.box_gift", "fqn": ["warehouse", "dwh", "sales", "box_gift"], "alias": "box_gift", "checksum": {"name": "sha256", "checksum": "311f33e92eae6aa1efc9f40f2020e877650c27c6baba4cddaa517b8aa8cbe439"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.711241, "relation_name": "`teamdata-291012`.`sales`.`box_gift`", "raw_code": "SELECT o.dw_country_code, o.id AS order_id, s.id AS sub_id, d.quantity, s.box_id, SUM(b1.box_quantity) AS box_received,\nCASE \n  WHEN SUM(b1.box_quantity) <= d.quantity THEN 1 \n  WHEN SUM(b1.box_quantity) > d.quantity AND SUM(b1.box_quantity) - b.box_quantity < d.quantity THEN 1\nELSE 0 END AS gift\nFROM {{ ref('orders') }} o\nINNER JOIN {{ ref('order_details') }} d ON o.dw_country_code = d.dw_country_code AND o.id = d.order_id\nINNER JOIN {{ ref('order_detail_sub') }} s ON s.dw_country_code = d.dw_country_code AND s.order_detail_id = d.id\nINNER JOIN {{ ref('order_detail_sub') }} s1 ON s1.dw_country_code = s.dw_country_code AND s1.order_detail_id = s.order_detail_id AND s1.box_id <= s.box_id\nINNER JOIN {{ ref('boxes') }} b ON b.dw_country_code = s.dw_country_code AND b.id = s.box_id\nINNER JOIN {{ ref('boxes') }} b1 ON b1.dw_country_code = s1.dw_country_code AND b1.id = s1.box_id\nINNER JOIN {{ ref('current_box') }} cb ON o.dw_country_code = cb.dw_country_code\nWHERE o.status_id IN (1, 3)\nAND (s.shipping_status_id IN (2, 3, 4, 5, 19, 22) OR (s.sub_payment_status_id = 3 AND s.box_id >= cb.current_box_id))\nAND d.gift_card_id > 0\nGROUP BY o.dw_country_code, o.id, s.id, d.quantity, s.box_id, b.box_quantity\nHAVING gift = 1", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "current_box", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.orders", "model.warehouse.order_details", "model.warehouse.order_detail_sub", "model.warehouse.boxes", "model.warehouse.current_box"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_gift.sql", "compiled": true, "compiled_code": "SELECT o.dw_country_code, o.id AS order_id, s.id AS sub_id, d.quantity, s.box_id, SUM(b1.box_quantity) AS box_received,\nCASE \n  WHEN SUM(b1.box_quantity) <= d.quantity THEN 1 \n  WHEN SUM(b1.box_quantity) > d.quantity AND SUM(b1.box_quantity) - b.box_quantity < d.quantity THEN 1\nELSE 0 END AS gift\nFROM `teamdata-291012`.`inter`.`orders` o\nINNER JOIN `teamdata-291012`.`inter`.`order_details` d ON o.dw_country_code = d.dw_country_code AND o.id = d.order_id\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.dw_country_code = d.dw_country_code AND s.order_detail_id = d.id\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s1 ON s1.dw_country_code = s.dw_country_code AND s1.order_detail_id = s.order_detail_id AND s1.box_id <= s.box_id\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.dw_country_code = s.dw_country_code AND b.id = s.box_id\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b1 ON b1.dw_country_code = s1.dw_country_code AND b1.id = s1.box_id\nINNER JOIN `teamdata-291012`.`snippets`.`current_box` cb ON o.dw_country_code = cb.dw_country_code\nWHERE o.status_id IN (1, 3)\nAND (s.shipping_status_id IN (2, 3, 4, 5, 19, 22) OR (s.sub_payment_status_id = 3 AND s.box_id >= cb.current_box_id))\nAND d.gift_card_id > 0\nGROUP BY o.dw_country_code, o.id, s.id, d.quantity, s.box_id, b.box_quantity\nHAVING gift = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shop_sales_with_gross_profit": {"database": "teamdata-291012", "schema": "sales", "name": "shop_sales_with_gross_profit", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/shop_sales_with_gross_profit.sql", "original_file_path": "models/dwh/sales/shop_sales_with_gross_profit.sql", "unique_id": "model.warehouse.shop_sales_with_gross_profit", "fqn": ["warehouse", "dwh", "sales", "shop_sales_with_gross_profit"], "alias": "shop_sales_with_gross_profit", "checksum": {"name": "sha256", "checksum": "d5c1b9f23ec96a57a43e485ad3b453582605b716a53610c92507432f481034e8"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.712746, "relation_name": "`teamdata-291012`.`sales`.`shop_sales_with_gross_profit`", "raw_code": "WITH orders_with_repartition AS\n(\n  SELECT \n  ss.dw_country_code,\n  ss.year,\n  ss.month,\n  ss.order_id,\n  ss.sku,\n  ss.quantity,\n  ss.net_revenue,\n  ss.product_codification,\n  ss.order_total_shipping,\n  COALESCE(ss.euro_purchase_price,0)*ss.quantity AS products_cost,\n  CASE WHEN SUM(ss.net_revenue) OVER (PARTITION BY ss.order_id, ss.dw_country_code, ss.order_status) > 0 THEN \n  SAFE_DIVIDE(ss.net_revenue , SUM(ss.net_revenue) OVER (PARTITION BY ss.order_id, ss.dw_country_code, ss.order_status))\n  ELSE SAFE_DIVIDE(ss.quantity , SUM(ss.quantity) OVER (PARTITION BY ss.order_id, ss.dw_country_code, ss.order_status))\n  END\n  AS net_revenue_share\n  FROM sales.shop_sales as ss \n  WHERE 1 = 1\n  AND ss.order_status NOT IN  ('refund', 'Annul\u00e9e')\n)\n\nSELECT \no.*,\nCOALESCE(order_total_shipping,0)*COALESCE(o.net_revenue_share,0) AS shipping_revenue,\no.net_revenue + COALESCE(order_total_shipping,0)*COALESCE(o.net_revenue_share,0) AS net_revenue_with_shipping,\nCOALESCE(som.order_picking,0)*COALESCE(o.net_revenue_share,0) AS picking_cost,\nCOALESCE(som.packaging_cost,0)*COALESCE(o.net_revenue_share,0) AS packaging_cost,\nCOALESCE(som.msg_perso,0)*COALESCE(o.net_revenue_share,0) AS msg_perso_cost,\nCOALESCE(som.shipping_cost,0)*COALESCE(o.net_revenue_share,0) AS shipping_cost,\n\no.products_cost + COALESCE(som.order_picking,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.packaging_cost,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.msg_perso,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.shipping_cost,0)*COALESCE(o.net_revenue_share,0) AS total_cost,\n\no.net_revenue + COALESCE(order_total_shipping,0)*COALESCE(o.net_revenue_share,0) \n- (o.products_cost + COALESCE(som.order_picking,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.packaging_cost,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.msg_perso,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.shipping_cost,0)*COALESCE(o.net_revenue_share,0)) AS gross_profit\nFROM orders_with_repartition o\nJOIN {{ ref('shop_orders_margin') }}  som USING (dw_country_code, order_id)", "language": "sql", "refs": [{"name": "shop_orders_margin", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.shop_orders_margin"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/shop_sales_with_gross_profit.sql", "compiled": true, "compiled_code": "WITH orders_with_repartition AS\n(\n  SELECT \n  ss.dw_country_code,\n  ss.year,\n  ss.month,\n  ss.order_id,\n  ss.sku,\n  ss.quantity,\n  ss.net_revenue,\n  ss.product_codification,\n  ss.order_total_shipping,\n  COALESCE(ss.euro_purchase_price,0)*ss.quantity AS products_cost,\n  CASE WHEN SUM(ss.net_revenue) OVER (PARTITION BY ss.order_id, ss.dw_country_code, ss.order_status) > 0 THEN \n  SAFE_DIVIDE(ss.net_revenue , SUM(ss.net_revenue) OVER (PARTITION BY ss.order_id, ss.dw_country_code, ss.order_status))\n  ELSE SAFE_DIVIDE(ss.quantity , SUM(ss.quantity) OVER (PARTITION BY ss.order_id, ss.dw_country_code, ss.order_status))\n  END\n  AS net_revenue_share\n  FROM sales.shop_sales as ss \n  WHERE 1 = 1\n  AND ss.order_status NOT IN  ('refund', 'Annul\u00e9e')\n)\n\nSELECT \no.*,\nCOALESCE(order_total_shipping,0)*COALESCE(o.net_revenue_share,0) AS shipping_revenue,\no.net_revenue + COALESCE(order_total_shipping,0)*COALESCE(o.net_revenue_share,0) AS net_revenue_with_shipping,\nCOALESCE(som.order_picking,0)*COALESCE(o.net_revenue_share,0) AS picking_cost,\nCOALESCE(som.packaging_cost,0)*COALESCE(o.net_revenue_share,0) AS packaging_cost,\nCOALESCE(som.msg_perso,0)*COALESCE(o.net_revenue_share,0) AS msg_perso_cost,\nCOALESCE(som.shipping_cost,0)*COALESCE(o.net_revenue_share,0) AS shipping_cost,\n\no.products_cost + COALESCE(som.order_picking,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.packaging_cost,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.msg_perso,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.shipping_cost,0)*COALESCE(o.net_revenue_share,0) AS total_cost,\n\no.net_revenue + COALESCE(order_total_shipping,0)*COALESCE(o.net_revenue_share,0) \n- (o.products_cost + COALESCE(som.order_picking,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.packaging_cost,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.msg_perso,0)*COALESCE(o.net_revenue_share,0) + COALESCE(som.shipping_cost,0)*COALESCE(o.net_revenue_share,0)) AS gross_profit\nFROM orders_with_repartition o\nJOIN `teamdata-291012`.`sales`.`shop_orders_margin`  som USING (dw_country_code, order_id)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shop_refunds": {"database": "teamdata-291012", "schema": "sales", "name": "shop_refunds", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/shop_refunds.sql", "original_file_path": "models/dwh/sales/shop_refunds.sql", "unique_id": "model.warehouse.shop_refunds", "fqn": ["warehouse", "dwh", "sales", "shop_refunds"], "alias": "shop_refunds", "checksum": {"name": "sha256", "checksum": "cc17767ed045c2cea80fc1ddee83344d63c73ccb673592118fad10ca3230706e"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.714135, "relation_name": "`teamdata-291012`.`sales`.`shop_refunds`", "raw_code": "WITH last_adyen_notifications AS (\n  SELECT dw_country_code,\n         created_at,\n         order_id,\n         eventCode,\n         eventDate,\n         sub_id,\n         value\n  FROM (\n    SELECT dw_country_code,\n           created_at,\n           order_id,\n           eventCode,\n           eventDate,\n           sub_id,\n           value,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, pspReference ORDER BY eventDate DESC) rn\n    FROM {{ ref('adyen_notifications') }}\n    WHERE success = 1\n  )\n  WHERE rn = 1\n)\n\n-- -------- total refunds ------------\nSELECT  t.*, \n        EXTRACT(year FROM order_date) AS year,\n        EXTRACT(month FROM order_date) AS month,\n        unit_price*quantity/(1+vat_rate/100) AS gross_revenue,\n        (vat_rate/100)*unit_price*quantity/(1+vat_rate/100) AS vat_on_gross_revenue,\n        quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS total_discount,\n        (vat_rate/100)*quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS vat_on_total_discount,\n        unit_product_discount*quantity/(1+vat_rate/100) AS product_discount,\n        unit_points_discount*quantity/(1+vat_rate/100) AS points_discount,\n        unit_coupon_discount*quantity/(1+vat_rate/100) AS coupons_discount,\n        unit_store_discount*quantity/(1+vat_rate/100) AS store_discount,\n        unit_sub_discount*quantity/(1+vat_rate/100) AS sub_discount,\n        - order_total_shipping_ttc/(1 + COALESCE(tva.taux, 0)/100) AS order_total_shipping,\n        - (COALESCE(tva.taux, 0)/100)*order_total_shipping_ttc/(1 + COALESCE(tva.taux, 0)/100) AS vat_on_total_shipping,\n        unit_price*quantity/(1+vat_rate/100) - quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS net_revenue,\n        quantity * (unit_price - unit_product_discount - unit_coupon_discount - unit_store_discount - unit_sub_discount) AS sell_out\nFROM (\n    SELECT \n        an.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        'refund' AS order_status,\n        COALESCE(o.is_active_sub, 0) AS is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(an.created_at) AS order_date, \n        d.product_id,\n        CASE WHEN d.product_id IN(-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id = 0 OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id >= 1 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id >= 1 AND d.vat = 0 THEN tva.taux\n            WHEN o.store_id >= 1 AND d.vat > 0 THEN d.vat\n            WHEN d.vat = 0 AND tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN d.vat > 0 THEN d.vat\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE tva.taux\n        END AS vat_rate,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification_id\n             ELSE pc.id\n        END AS product_codification_id,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification\n             WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON' \n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        apc.category_lvl_2 AS planning_category_2,\n         apc.category_lvl_3 AS planning_category_3,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             WHEN d.dw_country_code = 'FR' AND d.product_id = 41152 THEN 38.0 -- LTE Hygi\u00e8ne intime with wrong price  \n             WHEN d.dw_country_code = 'FR' AND d.product_id = 33055 THEN 16.9 -- LTE Hygi\u00e8ne intime with wrong price  \n             ELSE ROUND(d.price, 2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        - d.quantity AS quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             WHEN d.dw_country_code = 'FR' AND d.product_id = 41152 AND d.sub_discount > 0 THEN 5.7 -- LTE Hygi\u00e8ne intime with wrong price \n             WHEN d.dw_country_code = 'FR' AND d.product_id = 33055 AND d.sub_discount > 0 THEN 1.9 -- La Fabrique with wrong price \n             ELSE ROUND(d.sub_discount, 2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN(-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.price * (CASE WHEN d.store_discount IS NULL THEN 0 ELSE d.store_discount END)/100 END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration, \n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_validated' AS detail_valid,\n        catalog.euro_purchase_price,\n        d.bundle_product_id,\n        d.bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM last_adyen_notifications an\n        INNER JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n        INNER JOIN {{ ref('order_details') }} d ON d.order_id = o.ID AND d.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('products') }} p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('catalog') }} catalog ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('nice_names') }} pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('product_codification') }} pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('categories') }} apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('brands') }} b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('order_status') }} os ON os.id = o.status_id AND os.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('posts') }} p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('shipping_modes') }} sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN {{ ref('gift_cards') }} gc ON gc.order_detail_id = d.id AND gc.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('coupons') }} coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('coupons') }} coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN {{ ref('da_eu_countries') }} eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        LEFT JOIN {{ ref('codification_bundle_product') }} cbp ON d.dw_country_code = cbp.dw_country_code AND d.product_id = cbp.component_product_id AND d.bundle_product_id = cbp.bundle_product_id\n        WHERE an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n        AND (an.sub_id =0 OR an.sub_id IS NULL)\n        AND abs(1.0*an.value/100 - o.total) <= 0.03\n        AND an.created_at >= '2021-05-01'\n        AND p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 38, 40, 41, 42, 47) \n\n    UNION ALL\n-- partial cancellations\n\n        SELECT\n        an.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        'refund' AS order_status,\n        o.is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n       DATE(an.created_at) AS order_date,    \n        d.product_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id = 0 OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id = 1 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id = 1 THEN tva.taux\n            WHEN tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE tva.taux\n        END AS vat_rate,\n        pc.id AS product_codification_id,\n        CASE WHEN d.product_id IN(-1, -2, -3) THEN 'LOYALTY COUPON'\n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        apc.category_lvl_2 AS planning_category_2,\n         apc.category_lvl_3 AS planning_category_3,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             ELSE ROUND(d.price,2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        - d.quantity AS quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             ELSE ROUND(d.sub_discount, 2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN(-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.store_discount IS NULL THEN 0 ELSE d.store_discount END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration, \n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_cancelled' AS detail_valid,\n        catalog.euro_purchase_price,\n        NULL AS bundle_product_id,\n        NULL AS bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM last_adyen_notifications an\n        INNER JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n        INNER JOIN {{ ref('partial_cancelations') }} d ON d.order_id = o.ID AND d.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('products') }} p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('catalog') }} catalog ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('nice_names') }} pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('product_codification') }} pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('categories') }} apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('brands') }} b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('order_status') }} os ON os.id = o.status_id AND os.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('posts') }} p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('shipping_modes') }} sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN {{ ref('gift_cards') }} gc ON gc.order_detail_id = d.order_detail_id AND gc.dw_country_code = d.dw_country_code -- order_detail_id instead of id for wp_jb_order_details\n        LEFT JOIN {{ ref('coupons') }} coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('coupons') }} coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = an.dw_country_code\n        LEFT JOIN {{ ref('da_eu_countries') }} eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        WHERE an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n        AND (an.sub_id =0 OR an.sub_id IS NULL)\n        AND abs(1.0*an.value/100 - o.total) <= 0.03\n        AND an.created_at >= '2021-05-01'\n        AND p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 38, 40, 41, 42, 47) \n\n  UNION ALL\n\n  -- ------------------------- PARTIAL REFUNDS -------------------------------\n  \n  SELECT\n        o.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        'refund' AS order_status,\n        o.is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(d.date) AS order_date,        \n        d.product_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id = 0 OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id >= 1 THEN 'Store'\n        END AS store_code,\n        o.store_id, \n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id = 1 THEN tva.taux\n            WHEN tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE 20\n        END AS vat_rate,\n        pc.id AS product_codification_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON'\n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        apc.category_lvl_2 AS planning_category_2,\n         apc.category_lvl_3 AS planning_category_3,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             ELSE ROUND(d.price,2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        - d.quantity AS quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             ELSE ROUND(d.sub_discount, 2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN(-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.store_discount IS NULL THEN 0 ELSE d.store_discount END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type, \n        gc.duration AS gift_card_duration, \n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_cancelled' AS detail_valid,\n        catalog.euro_purchase_price,\n        NULL AS bundle_product_id,\n        NULL AS bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM {{ ref('orders') }} o\n        INNER JOIN {{ ref('partial_cancelations') }} d ON d.order_id = o.ID AND o.dw_country_code = d.dw_country_code\n        INNER JOIN\n              (\n                  SELECT an.dw_country_code,\n                         an.order_id,\n                         FORMAT_DATE('%Y-%m-%d', an.created_at) AS d,\n                         SUM(1.0*an.value/100) AS adyen_refunds\n                  FROM last_adyen_notifications an\n                  LEFT JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n                  LEFT JOIN {{ ref('order_details') }} dbox ON dbox.order_id = o.id AND dbox.product_id = 1 AND dbox.dw_country_code = o.dw_country_code\n                  LEFT JOIN {{ ref('order_detail_sub') }} sbox ON sbox.order_detail_id = dbox.id AND sbox.box_id = dbox.sub_start_box AND sbox.dw_country_code = dbox.dw_country_code\n                  WHERE an.eventDate>= '2021-05-01'\n                  AND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n                  AND (an.sub_id =0 OR an.sub_id IS NULL)\n                  AND ABS(1.0*an.value/100 - o.total) > 0.03\n                  AND ABS(1.0*an.value/100 - CASE WHEN sbox.total IS NULL THEN 0.0 ELSE sbox.total END) > 0.02\n                  GROUP BY an.dw_country_code,\n                           an.order_id,\n                           d\n              ) partial_refunds ON partial_refunds.order_id = d.order_id AND partial_refunds.d = FORMAT_DATE('%Y-%m-%d', d.date) AND partial_refunds.dw_country_code = d.dw_country_code AND partial_refunds.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('products') }} p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('catalog') }} ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('nice_names') }} pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('product_codification') }} pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('categories') }} apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('brands') }} b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('order_status') }} os ON os.id = o.status_id AND os.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('posts') }} p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('shipping_modes') }} sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN {{ ref('gift_cards') }} gc ON gc.order_detail_id = d.order_detail_id AND gc.dw_country_code = d.dw_country_code -- order_detail_id instead of id for wp_jb_order_details\n        LEFT JOIN {{ ref('coupons') }} coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('coupons') }} coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN {{ ref('da_eu_countries') }} eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        WHERE o.status_id IN (1, 3, 4)\n        AND p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 38, 40, 41, 42, 47)\n \n    ) t\nLEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = t.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = t.dw_country_code", "language": "sql", "refs": [{"name": "adyen_notifications", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "nice_names", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "categories", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "order_status", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "shipping_modes", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "da_eu_countries", "package": null, "version": null}, {"name": "codification_bundle_product", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "partial_cancelations", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "nice_names", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "categories", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "order_status", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "shipping_modes", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "da_eu_countries", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "partial_cancelations", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "nice_names", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "categories", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "order_status", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "shipping_modes", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "da_eu_countries", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.adyen_notifications", "model.warehouse.orders", "model.warehouse.order_details", "model.warehouse.products", "model.warehouse.catalog", "model.warehouse.nice_names", "model.warehouse.product_codification", "model.warehouse.categories", "model.warehouse.brands", "model.warehouse.order_status", "model.warehouse.posts", "model.warehouse.shipping_modes", "model.warehouse.tva_product", "model.warehouse.gift_cards", "model.warehouse.coupons", "model.warehouse.da_eu_countries", "model.warehouse.codification_bundle_product", "model.warehouse.partial_cancelations", "model.warehouse.order_detail_sub"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/shop_refunds.sql", "compiled": true, "compiled_code": "WITH last_adyen_notifications AS (\n  SELECT dw_country_code,\n         created_at,\n         order_id,\n         eventCode,\n         eventDate,\n         sub_id,\n         value\n  FROM (\n    SELECT dw_country_code,\n           created_at,\n           order_id,\n           eventCode,\n           eventDate,\n           sub_id,\n           value,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, pspReference ORDER BY eventDate DESC) rn\n    FROM `teamdata-291012`.`inter`.`adyen_notifications`\n    WHERE success = 1\n  )\n  WHERE rn = 1\n)\n\n-- -------- total refunds ------------\nSELECT  t.*, \n        EXTRACT(year FROM order_date) AS year,\n        EXTRACT(month FROM order_date) AS month,\n        unit_price*quantity/(1+vat_rate/100) AS gross_revenue,\n        (vat_rate/100)*unit_price*quantity/(1+vat_rate/100) AS vat_on_gross_revenue,\n        quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS total_discount,\n        (vat_rate/100)*quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS vat_on_total_discount,\n        unit_product_discount*quantity/(1+vat_rate/100) AS product_discount,\n        unit_points_discount*quantity/(1+vat_rate/100) AS points_discount,\n        unit_coupon_discount*quantity/(1+vat_rate/100) AS coupons_discount,\n        unit_store_discount*quantity/(1+vat_rate/100) AS store_discount,\n        unit_sub_discount*quantity/(1+vat_rate/100) AS sub_discount,\n        - order_total_shipping_ttc/(1 + COALESCE(tva.taux, 0)/100) AS order_total_shipping,\n        - (COALESCE(tva.taux, 0)/100)*order_total_shipping_ttc/(1 + COALESCE(tva.taux, 0)/100) AS vat_on_total_shipping,\n        unit_price*quantity/(1+vat_rate/100) - quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS net_revenue,\n        quantity * (unit_price - unit_product_discount - unit_coupon_discount - unit_store_discount - unit_sub_discount) AS sell_out\nFROM (\n    SELECT \n        an.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        'refund' AS order_status,\n        COALESCE(o.is_active_sub, 0) AS is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(an.created_at) AS order_date, \n        d.product_id,\n        CASE WHEN d.product_id IN(-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id = 0 OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id >= 1 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id >= 1 AND d.vat = 0 THEN tva.taux\n            WHEN o.store_id >= 1 AND d.vat > 0 THEN d.vat\n            WHEN d.vat = 0 AND tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN d.vat > 0 THEN d.vat\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE tva.taux\n        END AS vat_rate,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification_id\n             ELSE pc.id\n        END AS product_codification_id,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification\n             WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON' \n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        apc.category_lvl_2 AS planning_category_2,\n         apc.category_lvl_3 AS planning_category_3,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             WHEN d.dw_country_code = 'FR' AND d.product_id = 41152 THEN 38.0 -- LTE Hygi\u00e8ne intime with wrong price  \n             WHEN d.dw_country_code = 'FR' AND d.product_id = 33055 THEN 16.9 -- LTE Hygi\u00e8ne intime with wrong price  \n             ELSE ROUND(d.price, 2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        - d.quantity AS quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             WHEN d.dw_country_code = 'FR' AND d.product_id = 41152 AND d.sub_discount > 0 THEN 5.7 -- LTE Hygi\u00e8ne intime with wrong price \n             WHEN d.dw_country_code = 'FR' AND d.product_id = 33055 AND d.sub_discount > 0 THEN 1.9 -- La Fabrique with wrong price \n             ELSE ROUND(d.sub_discount, 2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN(-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.price * (CASE WHEN d.store_discount IS NULL THEN 0 ELSE d.store_discount END)/100 END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration, \n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_validated' AS detail_valid,\n        catalog.euro_purchase_price,\n        d.bundle_product_id,\n        d.bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM last_adyen_notifications an\n        INNER JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n        INNER JOIN `teamdata-291012`.`inter`.`order_details` d ON d.order_id = o.ID AND d.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`products` p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`catalog` catalog ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`nice_names` pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`categories` apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`brands` b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`order_status` os ON os.id = o.status_id AND os.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`posts` p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`shipping_modes` sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.order_detail_id = d.id AND gc.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`da_eu_countries` eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`codification_bundle_product` cbp ON d.dw_country_code = cbp.dw_country_code AND d.product_id = cbp.component_product_id AND d.bundle_product_id = cbp.bundle_product_id\n        WHERE an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n        AND (an.sub_id =0 OR an.sub_id IS NULL)\n        AND abs(1.0*an.value/100 - o.total) <= 0.03\n        AND an.created_at >= '2021-05-01'\n        AND p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 38, 40, 41, 42, 47) \n\n    UNION ALL\n-- partial cancellations\n\n        SELECT\n        an.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        'refund' AS order_status,\n        o.is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n       DATE(an.created_at) AS order_date,    \n        d.product_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id = 0 OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id = 1 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id = 1 THEN tva.taux\n            WHEN tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE tva.taux\n        END AS vat_rate,\n        pc.id AS product_codification_id,\n        CASE WHEN d.product_id IN(-1, -2, -3) THEN 'LOYALTY COUPON'\n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        apc.category_lvl_2 AS planning_category_2,\n         apc.category_lvl_3 AS planning_category_3,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             ELSE ROUND(d.price,2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        - d.quantity AS quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             ELSE ROUND(d.sub_discount, 2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN(-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.store_discount IS NULL THEN 0 ELSE d.store_discount END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration, \n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_cancelled' AS detail_valid,\n        catalog.euro_purchase_price,\n        NULL AS bundle_product_id,\n        NULL AS bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM last_adyen_notifications an\n        INNER JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n        INNER JOIN `teamdata-291012`.`inter`.`partial_cancelations` d ON d.order_id = o.ID AND d.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`products` p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`catalog` catalog ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`nice_names` pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`categories` apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`brands` b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`order_status` os ON os.id = o.status_id AND os.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`posts` p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`shipping_modes` sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.order_detail_id = d.order_detail_id AND gc.dw_country_code = d.dw_country_code -- order_detail_id instead of id for wp_jb_order_details\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = an.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`da_eu_countries` eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        WHERE an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n        AND (an.sub_id =0 OR an.sub_id IS NULL)\n        AND abs(1.0*an.value/100 - o.total) <= 0.03\n        AND an.created_at >= '2021-05-01'\n        AND p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 38, 40, 41, 42, 47) \n\n  UNION ALL\n\n  -- ------------------------- PARTIAL REFUNDS -------------------------------\n  \n  SELECT\n        o.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        'refund' AS order_status,\n        o.is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(d.date) AS order_date,        \n        d.product_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id = 0 OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id >= 1 THEN 'Store'\n        END AS store_code,\n        o.store_id, \n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id = 1 THEN tva.taux\n            WHEN tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE 20\n        END AS vat_rate,\n        pc.id AS product_codification_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON'\n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        apc.category_lvl_2 AS planning_category_2,\n         apc.category_lvl_3 AS planning_category_3,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             ELSE ROUND(d.price,2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        - d.quantity AS quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             ELSE ROUND(d.sub_discount, 2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN(-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.store_discount IS NULL THEN 0 ELSE d.store_discount END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type, \n        gc.duration AS gift_card_duration, \n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_cancelled' AS detail_valid,\n        catalog.euro_purchase_price,\n        NULL AS bundle_product_id,\n        NULL AS bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM `teamdata-291012`.`inter`.`orders` o\n        INNER JOIN `teamdata-291012`.`inter`.`partial_cancelations` d ON d.order_id = o.ID AND o.dw_country_code = d.dw_country_code\n        INNER JOIN\n              (\n                  SELECT an.dw_country_code,\n                         an.order_id,\n                         FORMAT_DATE('%Y-%m-%d', an.created_at) AS d,\n                         SUM(1.0*an.value/100) AS adyen_refunds\n                  FROM last_adyen_notifications an\n                  LEFT JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n                  LEFT JOIN `teamdata-291012`.`inter`.`order_details` dbox ON dbox.order_id = o.id AND dbox.product_id = 1 AND dbox.dw_country_code = o.dw_country_code\n                  LEFT JOIN `teamdata-291012`.`inter`.`order_detail_sub` sbox ON sbox.order_detail_id = dbox.id AND sbox.box_id = dbox.sub_start_box AND sbox.dw_country_code = dbox.dw_country_code\n                  WHERE an.eventDate>= '2021-05-01'\n                  AND an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n                  AND (an.sub_id =0 OR an.sub_id IS NULL)\n                  AND ABS(1.0*an.value/100 - o.total) > 0.03\n                  AND ABS(1.0*an.value/100 - CASE WHEN sbox.total IS NULL THEN 0.0 ELSE sbox.total END) > 0.02\n                  GROUP BY an.dw_country_code,\n                           an.order_id,\n                           d\n              ) partial_refunds ON partial_refunds.order_id = d.order_id AND partial_refunds.d = FORMAT_DATE('%Y-%m-%d', d.date) AND partial_refunds.dw_country_code = d.dw_country_code AND partial_refunds.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`products` p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`catalog` ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`nice_names` pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`categories` apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`brands` b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`order_status` os ON os.id = o.status_id AND os.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`posts` p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`shipping_modes` sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.order_detail_id = d.order_detail_id AND gc.dw_country_code = d.dw_country_code -- order_detail_id instead of id for wp_jb_order_details\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`da_eu_countries` eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        WHERE o.status_id IN (1, 3, 4)\n        AND p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 38, 40, 41, 42, 47)\n \n    ) t\nLEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = t.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = t.dw_country_code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_sales": {"database": "teamdata-291012", "schema": "sales", "name": "box_sales", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_sales.sql", "original_file_path": "models/dwh/sales/box_sales.sql", "unique_id": "model.warehouse.box_sales", "fqn": ["warehouse", "dwh", "sales", "box_sales"], "alias": "box_sales", "checksum": {"name": "sha256", "checksum": "ee187d407a8e8bcdaf294cf672f915c9ff92b341d1746d72bbcbcb2fdf4e72f1"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "date", "order_id"], "partition_by": {"field": "box_id", "data_type": "int64", "range": {"start": 0, "end": 3000, "interval": 1}}, "description": "Table des ventes de box - TEST DIRECT"}, "tags": [], "description": "Table des ventes de box", "columns": {"sub_id": {"name": "sub_id", "description": "Identifiant unique de l'abonnement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dw_country_code": {"name": "dw_country_code", "description": "Code pays (FR, DE, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "date": {"name": "date", "description": "date de la box", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "warehouse://models/dwh/sales/schema.yml", "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}, "description": "Table des ventes de box - TEST DIRECT", "on_schema_change": "ignore", "partition_by": {"field": "box_id", "data_type": "int64", "range": {"start": 0, "end": 3000, "interval": 1}}, "cluster_by": ["dw_country_code", "date", "order_id"]}, "created_at": 1759995464.8184059, "relation_name": "`teamdata-291012`.`sales`.`box_sales`", "raw_code": "{{ config(\n    materialized='table',\n    description='Table des ventes de box - TEST DIRECT',\n    persist_docs={\"relation\": true, \"columns\": true},\n    on_schema_change='ignore' ,\n    partition_by={\n      \"field\": \"box_id\",\n      \"data_type\": \"int64\",\n      \"range\": {\n        \"start\": 0,\n        \"end\": 3000,\n        \"interval\": 1\n      }\n    },\n    cluster_by=['dw_country_code', 'date','order_id']\n) }}\n\n\n\nWITH \nsub_suspend_survey_reason AS\n(\nSELECT * EXCEPT (row_num)\nFROM\n(\nSELECT sr.dw_country_code, sr.customer_id AS user_id, b.id AS box_id, sqa.title AS survey_reason, ROW_NUMBER() OVER (PARTITION BY sr.dw_country_code, sr.customer_id, b.id ORDER BY sr.answered_at DESC) AS row_num\nFROM {{ ref('sub_suspend_survey_result') }} sr\nJOIN {{ ref('boxes') }} b ON b.dw_country_code = sr.dw_country_code AND b.id = sr.last_received_box_id + 1\nJOIN {{ ref('sub_suspend_survey_result_answer') }} sra ON sra.result_id = sr.result_id AND sr.dw_country_code = sra.dw_country_code\nJOIN {{ ref('sub_suspend_survey_question_answer') }} sqa ON sqa.question_answer_id = sra.question_answer_id and sqa.dw_country_code=sra.dw_country_code\nWHERE sra.question_id = 1\n) t\nWHERE row_num = 1\n),\nproducts as (\nselect \nbox_id,coffret_id,dw_country_code,max(inventory_item_id) inventory_item_id,\nproduct_codification_id,max(id) as id \nfrom {{ ref('products') }} \n\ngroup by all\n),\nmini_reexp as (\nselect distinct sub_id,box_id,dw_country_code from `teamdata-291012.inter.mini_reexp`\n),\nshipping_mode_dedup as(\nselect \nshipping_mode_id,max(price)price,min_weight,max_weight,max(price_daily) price_daily,date_Start,date_end,max(shipping_taxes_rate)shipping_taxes_rate\nfrom {{ ref('shipping_costs') }}\ngroup by all\n),\nranked_sub_history AS\n(\n  SELECT o.dw_country_code, o.user_id, sh.box_id, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',sh.timestamp) AS d,\n  CASE \n    WHEN ssr.value IN ('Too many fails','Card expired', 'Breakage') THEN 'technical'\n    WHEN ssr.value IN ('Self suspended', 'Paused', 'Paused for gift') THEN 'self-willed'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl1, \n  CASE \n    WHEN ssr.value ='Card expired' THEN 'expired card'\n    WHEN ssr.value IN ('Self suspended') THEN 'suspended'\n    WHEN ssr.value IN ('Paused', 'Paused for gift') THEN 'paused'\n    WHEN ssr.value IN ('Too many fails','Breakage') THEN 'breakage'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl2, \n  'reason from survey' AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, sh.box_id, sh.dw_country_code ORDER BY timestamp DESC) AS row_num\n  FROM {{ ref('sub_history') }} sh\n  JOIN {{ ref('order_detail_sub') }} s ON s.order_detail_id = sh.order_detail_id AND s.box_id = sh.box_id AND sh.dw_country_code = s.dw_country_code\n  JOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN {{ ref('orders') }} o ON o.id = d.order_id AND d.dw_country_code = o.dw_country_code\n  JOIN {{ ref('sub_suspended_reasons') }} ssr ON ssr.dw_country_code = sh.dw_country_code AND ssr.id = sh.sub_suspended_reasons_id\n\n  \n  AND sh.action = -1\n  \n),\nsub_history_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM ranked_sub_history\n  WHERE row_num = 1\n),\nadyen_ranked AS\n(\n  SELECT an.dw_country_code, o.user_id, s.box_id, \n  FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',an.eventDate) as d,\n  'technical' AS sub_suspended_reason_lvl1,\n  CASE WHEN an.reason LIKE '%xpired%' THEN 'expired card' ELSE 'breakage' END AS sub_suspended_reason_lvl2,\n  an.reason AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, s.box_id, s.dw_country_code ORDER BY an.eventDate DESC) AS row_num\n  FROM `inter.adyen_notifications` an\n  JOIN {{ ref('order_detail_sub') }} s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\n  JOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN {{ ref('orders') }} o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n  WHERE an.success = 0\n  \n),\nadyen_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM adyen_ranked\n  WHERE row_num = 1\n),\nall_reasons AS\n(\n   SELECT sr.*\n  FROM sub_history_reasons sr\n  LEFT JOIN adyen_reasons an ON an.dw_country_code = sr.dw_country_code AND an.user_id = sr.user_id AND an.box_id = sr.box_id\n  WHERE an.user_id IS NULL\n  UNION ALL\n  SELECT *\n  FROM adyen_reasons an \n),\nall_reasons_ranked AS\n(\n  SELECT all_reasons.dw_country_code, all_reasons.user_id, all_reasons.box_id, all_reasons.sub_suspended_reason_lvl1, all_reasons.sub_suspended_reason_lvl2, \n  CASE WHEN sub_suspended_reason_lvl3 = 'reason from survey' THEN ssr.survey_reason ELSE sub_suspended_reason_lvl3 END AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY all_reasons.user_id, all_reasons.box_id, all_reasons.dw_country_code ORDER BY d DESC) AS row_num\n  FROM all_reasons\n  LEFT JOIN sub_suspend_survey_reason ssr ON ssr.dw_country_code = all_reasons.dw_country_code AND ssr.user_id = all_reasons.user_id AND ssr.box_id = all_reasons.box_id\n),\n\nself_churn_reason AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM all_reasons_ranked\n  WHERE row_num = 1\n),\n gws_costs_table AS (\n  SELECT sol.dw_country_code,\n         sol.sub_id,\n         COALESCE(SUM(c.purchase_price * d.quantity), 0) AS gws_costs\n  FROM {{ ref('sub_order_link') }} sol\n  INNER JOIN {{ ref('orders') }} o ON sol.dw_country_code = o.dw_country_code AND sol.order_id = o.id\n  INNER JOIN {{ ref('order_details') }} d ON o.dw_country_code = d.dw_country_code AND o.id = d.order_id\n  INNER JOIN {{ ref('catalog') }} c ON d.dw_country_code = c.dw_country_code AND d.product_id = c.product_id\n  WHERE d.special_type = 'GWS' and status\n  GROUP BY sol.dw_country_code,\n           sol.sub_id\n),\nbox_global_grades AS (\nSELECT p.dw_country_code, p.box_id, p.coffret_id,  max(global_grade) AS global_grade\nFROM `teamdata-291012.Spreadsheet_synchro.raw_doc_compo` c\nJOIN {{ ref('products') }} p ON p.sku = c.sku_compo\nGROUP BY p.dw_country_code, p.box_id, p.coffret_id\n)\nSELECT FT.*,\nROW_NUMBER() OVER(PARTITION BY user_id, sequence_group ORDER BY box_id) AS consecutive_boxes from (\nselect full_table.*,\n    SUM(is_new_sequence) OVER(PARTITION BY user_id ORDER BY box_id ROWS UNBOUNDED PRECEDING) AS sequence_group,\n    Case when last_committed_box = 1 and acquis_status_lvl1='LIVE' then 'End of committment'\n    when last_committed_box = 0 and cannot_suspend=1 and acquis_status_lvl1='LIVE' then 'Middle of committment'\nend as committment_status,\n\n from (\nSELECT concat(t.dw_country_code,'_',t.user_id)as user_key,t.*,\ncase when cm.mono_box_id is null then false else true end as is_mono,\ncm.mono_brand as mono_brand,\nt.box_id+1 as next_month_id,\nlag(t.date) over (partition by t.user_id,t.dw_country_code order by t.box_id) last_box_received_date,\ncase when  lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) -- next box by user is the next box\nOR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1  -- next box in the subscription (by order_detail)\nthen 'LIVE' else'CHURN'end as next_month_status,\ncase when (lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) -- next box by user is the next box\nOR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1) \nAND cannot_suspend =1 \n  -- next box in the subscription (by order_detail)\nthen 1 else 0 end as next_month_committment,\ncASE\n      WHEN LAG(t.box_id) OVER(PARTITION BY t.user_id ORDER BY t.box_id) IS NULL THEN 1  -- Premi\u00e8re box\n      WHEN t.box_id - LAG(t.box_id) OVER(PARTITION BY t.user_id ORDER BY t.box_id) > 1 THEN 1  -- Trou d\u00e9tect\u00e9\n      ELSE 0  -- Box cons\u00e9cutive\n    END AS is_new_sequence,\n    -- Compte cumulatif des box pour l'utilisateur\n    ROW_NUMBER() OVER(PARTITION BY t.user_id ORDER BY t.box_id) AS total_boxes_so_far,\n\nCASE \n  WHEN lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) OR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1 THEN NULL\n  WHEN t.gift = 1  THEN 'gift end'\n  ELSE COALESCE(scr.sub_suspended_reason_lvl1, 'self-willed')\n   END\nAS sub_suspended_reason_lvl1,\nCASE \n  WHEN lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) OR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1 THEN NULL\n  WHEN t.gift = 1  THEN 'gift end'\n  ELSE COALESCE(scr.sub_suspended_reason_lvl2, 'suspended')\n  END\nAS sub_suspended_reason_lvl2,\nCASE \n  WHEN lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) OR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1 THEN NULL\n  WHEN t.gift = 1  THEN 'gift end'\n  ELSE COALESCE(scr.sub_suspended_reason_lvl3, 'suspended')\n  END\nAS sub_suspended_reason_lvl3,\nbgg.global_grade AS box_global_grade,\n\n\nmcd.type as coupon_type,   -- new coupon_typet.box_id\ncase when t.box_id - lag(t.box_id) over (partition by t.user_id, t.dw_country_code order by t.box_id, t.order_detail_id )  IN (0,1) \nOR\nt.box_id - lag(t.box_id) over (partition by t.order_detail_id, t.dw_country_code order by t.box_id, t.order_detail_id )  = 1\nthen 'LIVE'\nelse'ACQUISITION'end as acquis_status_lvl1,\ncase when  t.box_id - lag(t.box_id) over (partition by t.user_id, t.dw_country_code order by t.box_id, t.order_detail_id) IN (0,1)\nOR\nt.box_id - lag(t.box_id) over (partition by t.order_detail_id, t.dw_country_code order by t.box_id, t.order_detail_id )  = 1\nthen 'LIVE'  \nwhen t.gift=1 then 'GIFT'\nwhen lag(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) is not null then 'REACTIVATION'\nwhen lag(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) is null then 'NEW NEW'\nelse'Unknown'end as acquis_status_lvl2,   \nCASE WHEN cannot_suspend = 1 THEN 'committed' ELSE 'not committed' END AS committed,\n\ng.gws_costs,\nt.total_product / (1+vat_rate/100) AS gross_revenue,\nt.total_product - t.total_product/(1+vat_rate/100) AS vat_on_gross_revenue,\nt.total_discount / (1+vat_rate/100) AS discount,\nt.total_discount - t.total_discount / (1+vat_rate/100) AS vat_on_discount,\nt.total_product / (1+vat_rate/100) - (t.total_discount / (1+vat_rate/100)) AS net_revenue,\nt.total_shipping/(1+vat_rate/100) AS shipping,\nt.total_shipping - t.total_shipping/(1+vat_rate/100) AS vat_on_shipping,\nt.total_product / (1+vat_rate/100) - (t.total_discount / (1+vat_rate/100)) - (t.coop + t.assembly_cost + t.pack_cost + t.print_cost + t.consumable_cost + t.shipping_cost + COALESCE(g.gws_costs, 0)) AS gross_profit\nFROM\n(\n  SELECT \n  o.dw_country_code,\n  s.id AS sub_id,\n  d.id AS order_detail_id,\n  o.id AS order_id,\n  o.user_id, \n  s.box_id,\n  case when s.box_id=current_box_id then true else false end as is_current,\n  b.id - cbt.current_box_id as diff_current_box,\n  s.coffret_id,\n  b.date,\n  ta.value is not null as reexp, \n  mree.sub_id is not null as mini_reexp,\n   DATE_DIFF(CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END, date(b.shipping_date), DAY) + 1  AS day_in_cycle,\n  CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END AS payment_date,\n DATE_DIFF(CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END, date(b.shipping_date), DAY) + 1 AS nb_days_since_opening,\n date_diff(CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END, date(b1.shipping_date), DAY) as nb_days_next_cycle,\n  extract(month FROM b.date) AS month,\n  extract(year FROM b.date) AS year,\n  o.coupon_code_id,\n  COALESCE(coupons_parents.code, c.code) AS coupon_code,\n  s.sub_offer_id,\n  COALESCE(so_parents.code, so.code) AS sub_offer_code,\n  CASE WHEN s.box_id = d.sub_start_box THEN  COALESCE(coupons_parents.code, c.code) ELSE COALESCE(so_parents.code, so.code) END AS coupon,\n  s.reactivated_date,\n  s.shipping_mode,\n  CASE WHEN d.gift_card_id = 0 THEN 1\n       WHEN bg.gift IS NULL THEN 1\n       WHEN bg.gift = 1 THEN 0\n       WHEN bg.gift = 0 THEN 1\n       ELSE 1\n  END AS self,\n  CASE WHEN bg.gift IS NULL THEN 0 \n       WHEN bg.gift = 1 THEN 1\n       WHEN bg.gift = 0 THEN 0\n       ELSE bg.gift\n  END AS gift,\n  CASE WHEN yc.yearly_coupon_id IS NOT NULL AND s.cannot_suspend = 1 THEN 1 ELSE 0 END AS yearly,\n  CASE WHEN d.quantity= -12 THEN 1 ELSE 0 END AS old_yearly,\n  d.quantity AS dquantity,\n  s.cannot_suspend AS cannot_suspend,\n  CASE  WHEN s.sub_payment_status_id = 8 OR o.status_id = 3 THEN 0\n        WHEN s.total_product = 0 AND gc.id IS NULL THEN 0\n        WHEN s.total_product = 0 AND gc.id IS NOT NULL AND pbp.sub_id IS NULL THEN b.box_quantity*(gc.amount/gc.duration)\n        WHEN s.total_product = 0 AND gc.id IS NOT NULL AND pbp.sub_id IS NOT NULL THEN (gc.amount/gc.duration) -- if partial box paid, count only one box\n        ELSE s.total_product \n  END AS total_product,\n  o.dw_country_code AS store_code,\n  COALESCE(tva.taux, 0) AS vat_rate,\n  CASE WHEN s.sub_payment_status_id = 8 OR o.status_id = 3 THEN 0.0\n       WHEN c.parent_id = 15237671 AND s.box_id = d.sub_start_box THEN 0.0 -- Veepee offer - May 2021\n       WHEN so.parent_offer_id = 53382 THEN 0.0 -- Veepee offer - May 2021\n       ELSE s.total_discount\n  END AS total_discount,\n  s.shipping_country AS shipping_country,\n  CASE WHEN s.sub_payment_status_id = 8 OR o.status_id = 3 THEN 0.0 ELSE s.total_shipping END AS total_shipping,\n  CASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\n  sps.name AS sub_payment_status,\n  sub_payment_status_id,\n  \nd.sub_start_box,\nCASE WHEN o.raf_parent_id > 0 and rol.order_id is not null THEN 1 ELSE 0 END AS raffed,\nraf_parent_id,\n  s.shipping_firstname,\n  s.shipping_lastname,\n  d.gift_card_id,\n  CASE  WHEN (c.discount_type = 'PRODUCT' AND d.sub_start_box = s.box_id) OR so.offer_type = 'PRODUCT' THEN 'GWS'\n        WHEN (c.discount_type IN ('CURRENCY', 'PERCENT', 'CURRENCY_TOTAL') AND d.sub_start_box = s.box_id) OR so.offer_type IN ('CURRENCY','PERCENT','CURRENCY_TOTAL') THEN 'discount'\n        ELSE 'Other'\n  END AS discount_type,\n  CASE WHEN (c.sub_engagement_period > 0 AND d.sub_start_box = s.box_id) OR so.sub_engagement_period > 0 THEN 'engaged' ELSE 'not engaged' END AS coupon_engagement,\n  kc.coop,\n  kc.assembly_cost,\n  kc.pack_cost,\n  kc.print_cost,\n  kc.consumable_cost,\n  sc.price AS shipping_cost,\n  b1.date as next_month_date,\n  s.next_payment_date,\n  s.last_payment_date,\n  CASE \n  WHEN s.cannot_suspend = 0 THEN 0\n  WHEN  s.cannot_suspend = 1 \n        AND (\n            lead(s.cannot_suspend) over (partition by s.order_detail_id,s.dw_country_code order by s.box_id) = 1 \n            OR bn.user_id IS NOT NULL\n            )\n\n    THEN 0 \n    ELSE 1 END AS last_committed_box\n  -- sub_suspended_reason_lvl1,sub_suspended_reason_lvl2,sub_suspended_reason_lvl3\n  FROM {{ ref('orders') }} o\n  INNER JOIN {{ ref('order_details') }} d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n  INNER JOIN {{ ref('order_detail_sub') }} s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\n  INNER JOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\n  INNER JOIN {{ ref('boxes') }} b1 ON b1.id = s.box_id +1 AND b1.dw_country_code = s.dw_country_code\n  INNER JOIN {{ ref('sub_payments_status') }} sps ON sps.id = s.sub_payment_status_id and sps.dw_country_code='FR'\n  INNER JOIN {{ ref('current_box') }} cbt ON o.dw_country_code = cbt.dw_country_code\n  LEFT JOIN products p ON o.dw_country_code = p.dw_country_code AND b.id = p.box_id AND s.coffret_id = p.coffret_id AND p.product_codification_id = 29\n  LEFT JOIN {{ ref('kit_costs') }} kc ON o.dw_country_code = kc.country_code AND p.inventory_item_id = kc.inventory_item_id and kc.kit_id=p.id\n  LEFT JOIN shipping_mode_dedup  sc ON b.date >= sc.date_start AND (b.date <= sc.date_end OR sc.date_end IS NULL) AND s.shipping_mode = sc.shipping_mode_id AND CASE WHEN b.box_quantity = 1 THEN 0.4 WHEN b.box_quantity = 2 THEN 0.8 END >= min_weight AND (CASE WHEN b.box_quantity = 1 THEN 0.4 WHEN b.box_quantity = 2 THEN 0.8 END < max_weight OR max_weight IS NULL)\n  LEFT JOIN {{ ref('gift_cards') }} gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\n  LEFT JOIN {{ ref('adyen_notifications_authorization') }} an ON an.sub_id = s.id AND an.dw_country_code = s.dw_country_code\n  LEFT JOIN {{ ref('coupons') }} c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\n  LEFT JOIN {{ ref('coupons') }} coupons_parents ON coupons_parents.id = c.parent_id AND coupons_parents.dw_country_code = c.dw_country_code\n  LEFT JOIN {{ ref('sub_offers') }} so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\n  LEFT JOIN {{ ref('sub_offers') }} so_parents ON so_parents.id = so.parent_offer_id AND so_parents.dw_country_code = so.dw_country_code\n  LEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\n  LEFT JOIN {{ ref('box_gift') }} bg ON bg.dw_country_code = s.dw_country_code AND bg.sub_id = s.id\n  LEFT JOIN snippets.yearly_coupons yc ON o.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\n  LEFT JOIN {{ ref('raf_order_link') }} rol on o.id=rol.order_id and rol.dw_country_code=d.dw_country_code\n  LEFT JOIN {{ ref('box_committed_not_paid') }} bn ON o.dw_country_code = bn.dw_country_code AND o.user_id = bn.user_id AND bn.box_id = s.box_id + 1\n  /*LEFT JOIN (select user_id,month,year,dw_country_code,box_id,max(sub_suspended_reason_lvl1)sub_suspended_reason_lvl1,max(sub_suspended_reason_lvl2)sub_suspended_reason_lvl2,max(sub_suspended_reason_lvl3)sub_suspended_reason_lvl3 from`teamdata-291012.sales.box_sales_by_user_by_type`  group by 1,2,3,4,5)bsbu ON o.dw_country_code = bsbu.dw_country_code AND bsbu.user_id=o.user_id and bsbu.box_id = s.box_id + 1*/\n  LEFT JOIN {{ ref('partial_box_paid') }} pbp ON pbp.dw_country_code = s.dw_country_code AND pbp.sub_id = s.id\n  LEFT JOIN {{ ref('tags') }} ta ON ta.link_id=s.id AND ta.dw_country_code = o.dw_country_code and ta.type='SUB' and ta.value='reexp'\n  LEFT JOIN mini_reexp mree ON mree.dw_country_code = o.dw_country_code and mree.sub_id=s.id and mree.box_id=s.box_id\n  \n  WHERE -- o.status_id IN (1, 3) AND \n  (s.shipping_status_id IN (2, 3, 4, 5, 19, 22) OR (s.sub_payment_status_id = 3 AND s.box_id >= cbt.current_box_id)\n  -------------------\n  OR (o.dw_country_code = 'DE' and s.sub_payment_status_id = 3 and s.box_id=160)\n  -- cas particuler allemagne avril 2025\n  )\n  AND s.box_id <= cbt.current_box_id + 36\n  \n\n) t\nLEFT JOIN gws_costs_table g USING(dw_country_code, sub_id)\nLEFT JOIN ( select distinct country,code,max(type) as type, max(date) as date,max(type2) as type2,max(coupon_id) as coupon_id,max(sub_offer_id) as sub_offer_id \nfrom`teamdata-291012.marketing.Marketing_cac_discount` \ngroup by 1,2) \nmcd on mcd.coupon_id=coupon_code_id and mcd.country=t.dw_country_code\nLEFT JOIN \n(  select distinct country,code,max(type) as type, max(date) as date,max(type2) as type2,max(coupon_id) as coupon_id,max(sub_offer_id) as sub_offer_id \nfrom`teamdata-291012.marketing.Marketing_cac_discount` \ngroup by 1,2) mcdso on mcdso.sub_offer_id=t.sub_offer_id and mcd.country=t.dw_country_code\nLEFT JOIN box_global_grades bgg ON bgg.dw_country_code = t.dw_country_code AND bgg.box_id = t.box_id AND bgg.coffret_id = t.coffret_id\nLEFT JOIN self_churn_reason scr ON scr.dw_country_code = t.dw_country_code AND scr.user_id = t.user_id AND scr.box_id = t.box_id+1\nLEFT JOIN {{ ref('box_mono') }}  cm on t.dw_country_code=cm.dw_country_code and t.box_id=cm.mono_box_id and t.coffret_id=cm.mono_coffret_id) full_table\n\ngroup by all) FT\n\ngroup by all", "language": "sql", "refs": [{"name": "sub_suspend_survey_result", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "sub_suspend_survey_result_answer", "package": null, "version": null}, {"name": "sub_suspend_survey_question_answer", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "shipping_costs", "package": null, "version": null}, {"name": "sub_history", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "sub_suspended_reasons", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "sub_order_link", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "sub_payments_status", "package": null, "version": null}, {"name": "current_box", "package": null, "version": null}, {"name": "kit_costs", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "adyen_notifications_authorization", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "sub_offers", "package": null, "version": null}, {"name": "sub_offers", "package": null, "version": null}, {"name": "box_gift", "package": null, "version": null}, {"name": "raf_order_link", "package": null, "version": null}, {"name": "box_committed_not_paid", "package": null, "version": null}, {"name": "partial_box_paid", "package": null, "version": null}, {"name": "tags", "package": null, "version": null}, {"name": "box_mono", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.sub_suspend_survey_result", "model.warehouse.boxes", "model.warehouse.sub_suspend_survey_result_answer", "model.warehouse.sub_suspend_survey_question_answer", "model.warehouse.products", "model.warehouse.shipping_costs", "model.warehouse.sub_history", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.sub_suspended_reasons", "model.warehouse.sub_order_link", "model.warehouse.catalog", "model.warehouse.sub_payments_status", "model.warehouse.current_box", "model.warehouse.kit_costs", "model.warehouse.gift_cards", "model.warehouse.adyen_notifications_authorization", "model.warehouse.coupons", "model.warehouse.sub_offers", "model.warehouse.box_gift", "model.warehouse.raf_order_link", "model.warehouse.box_committed_not_paid", "model.warehouse.partial_box_paid", "model.warehouse.tags", "model.warehouse.box_mono"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_sales.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH \nsub_suspend_survey_reason AS\n(\nSELECT * EXCEPT (row_num)\nFROM\n(\nSELECT sr.dw_country_code, sr.customer_id AS user_id, b.id AS box_id, sqa.title AS survey_reason, ROW_NUMBER() OVER (PARTITION BY sr.dw_country_code, sr.customer_id, b.id ORDER BY sr.answered_at DESC) AS row_num\nFROM `teamdata-291012`.`inter`.`sub_suspend_survey_result` sr\nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.dw_country_code = sr.dw_country_code AND b.id = sr.last_received_box_id + 1\nJOIN `teamdata-291012`.`inter`.`sub_suspend_survey_result_answer` sra ON sra.result_id = sr.result_id AND sr.dw_country_code = sra.dw_country_code\nJOIN `teamdata-291012`.`inter`.`sub_suspend_survey_question_answer` sqa ON sqa.question_answer_id = sra.question_answer_id and sqa.dw_country_code=sra.dw_country_code\nWHERE sra.question_id = 1\n) t\nWHERE row_num = 1\n),\nproducts as (\nselect \nbox_id,coffret_id,dw_country_code,max(inventory_item_id) inventory_item_id,\nproduct_codification_id,max(id) as id \nfrom `teamdata-291012`.`inter`.`products` \n\ngroup by all\n),\nmini_reexp as (\nselect distinct sub_id,box_id,dw_country_code from `teamdata-291012.inter.mini_reexp`\n),\nshipping_mode_dedup as(\nselect \nshipping_mode_id,max(price)price,min_weight,max_weight,max(price_daily) price_daily,date_Start,date_end,max(shipping_taxes_rate)shipping_taxes_rate\nfrom `teamdata-291012`.`ops`.`shipping_costs`\ngroup by all\n),\nranked_sub_history AS\n(\n  SELECT o.dw_country_code, o.user_id, sh.box_id, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',sh.timestamp) AS d,\n  CASE \n    WHEN ssr.value IN ('Too many fails','Card expired', 'Breakage') THEN 'technical'\n    WHEN ssr.value IN ('Self suspended', 'Paused', 'Paused for gift') THEN 'self-willed'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl1, \n  CASE \n    WHEN ssr.value ='Card expired' THEN 'expired card'\n    WHEN ssr.value IN ('Self suspended') THEN 'suspended'\n    WHEN ssr.value IN ('Paused', 'Paused for gift') THEN 'paused'\n    WHEN ssr.value IN ('Too many fails','Breakage') THEN 'breakage'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl2, \n  'reason from survey' AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, sh.box_id, sh.dw_country_code ORDER BY timestamp DESC) AS row_num\n  FROM `teamdata-291012`.`inter`.`sub_history` sh\n  JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.order_detail_id = sh.order_detail_id AND s.box_id = sh.box_id AND sh.dw_country_code = s.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = d.order_id AND d.dw_country_code = o.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`sub_suspended_reasons` ssr ON ssr.dw_country_code = sh.dw_country_code AND ssr.id = sh.sub_suspended_reasons_id\n\n  \n  AND sh.action = -1\n  \n),\nsub_history_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM ranked_sub_history\n  WHERE row_num = 1\n),\nadyen_ranked AS\n(\n  SELECT an.dw_country_code, o.user_id, s.box_id, \n  FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',an.eventDate) as d,\n  'technical' AS sub_suspended_reason_lvl1,\n  CASE WHEN an.reason LIKE '%xpired%' THEN 'expired card' ELSE 'breakage' END AS sub_suspended_reason_lvl2,\n  an.reason AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, s.box_id, s.dw_country_code ORDER BY an.eventDate DESC) AS row_num\n  FROM `inter.adyen_notifications` an\n  JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n  WHERE an.success = 0\n  \n),\nadyen_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM adyen_ranked\n  WHERE row_num = 1\n),\nall_reasons AS\n(\n   SELECT sr.*\n  FROM sub_history_reasons sr\n  LEFT JOIN adyen_reasons an ON an.dw_country_code = sr.dw_country_code AND an.user_id = sr.user_id AND an.box_id = sr.box_id\n  WHERE an.user_id IS NULL\n  UNION ALL\n  SELECT *\n  FROM adyen_reasons an \n),\nall_reasons_ranked AS\n(\n  SELECT all_reasons.dw_country_code, all_reasons.user_id, all_reasons.box_id, all_reasons.sub_suspended_reason_lvl1, all_reasons.sub_suspended_reason_lvl2, \n  CASE WHEN sub_suspended_reason_lvl3 = 'reason from survey' THEN ssr.survey_reason ELSE sub_suspended_reason_lvl3 END AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY all_reasons.user_id, all_reasons.box_id, all_reasons.dw_country_code ORDER BY d DESC) AS row_num\n  FROM all_reasons\n  LEFT JOIN sub_suspend_survey_reason ssr ON ssr.dw_country_code = all_reasons.dw_country_code AND ssr.user_id = all_reasons.user_id AND ssr.box_id = all_reasons.box_id\n),\n\nself_churn_reason AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM all_reasons_ranked\n  WHERE row_num = 1\n),\n gws_costs_table AS (\n  SELECT sol.dw_country_code,\n         sol.sub_id,\n         COALESCE(SUM(c.purchase_price * d.quantity), 0) AS gws_costs\n  FROM `teamdata-291012`.`inter`.`sub_order_link` sol\n  INNER JOIN `teamdata-291012`.`inter`.`orders` o ON sol.dw_country_code = o.dw_country_code AND sol.order_id = o.id\n  INNER JOIN `teamdata-291012`.`inter`.`order_details` d ON o.dw_country_code = d.dw_country_code AND o.id = d.order_id\n  INNER JOIN `teamdata-291012`.`product`.`catalog` c ON d.dw_country_code = c.dw_country_code AND d.product_id = c.product_id\n  WHERE d.special_type = 'GWS' and status\n  GROUP BY sol.dw_country_code,\n           sol.sub_id\n),\nbox_global_grades AS (\nSELECT p.dw_country_code, p.box_id, p.coffret_id,  max(global_grade) AS global_grade\nFROM `teamdata-291012.Spreadsheet_synchro.raw_doc_compo` c\nJOIN `teamdata-291012`.`inter`.`products` p ON p.sku = c.sku_compo\nGROUP BY p.dw_country_code, p.box_id, p.coffret_id\n)\nSELECT FT.*,\nROW_NUMBER() OVER(PARTITION BY user_id, sequence_group ORDER BY box_id) AS consecutive_boxes from (\nselect full_table.*,\n    SUM(is_new_sequence) OVER(PARTITION BY user_id ORDER BY box_id ROWS UNBOUNDED PRECEDING) AS sequence_group,\n    Case when last_committed_box = 1 and acquis_status_lvl1='LIVE' then 'End of committment'\n    when last_committed_box = 0 and cannot_suspend=1 and acquis_status_lvl1='LIVE' then 'Middle of committment'\nend as committment_status,\n\n from (\nSELECT concat(t.dw_country_code,'_',t.user_id)as user_key,t.*,\ncase when cm.mono_box_id is null then false else true end as is_mono,\ncm.mono_brand as mono_brand,\nt.box_id+1 as next_month_id,\nlag(t.date) over (partition by t.user_id,t.dw_country_code order by t.box_id) last_box_received_date,\ncase when  lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) -- next box by user is the next box\nOR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1  -- next box in the subscription (by order_detail)\nthen 'LIVE' else'CHURN'end as next_month_status,\ncase when (lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) -- next box by user is the next box\nOR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1) \nAND cannot_suspend =1 \n  -- next box in the subscription (by order_detail)\nthen 1 else 0 end as next_month_committment,\ncASE\n      WHEN LAG(t.box_id) OVER(PARTITION BY t.user_id ORDER BY t.box_id) IS NULL THEN 1  -- Premi\u00e8re box\n      WHEN t.box_id - LAG(t.box_id) OVER(PARTITION BY t.user_id ORDER BY t.box_id) > 1 THEN 1  -- Trou d\u00e9tect\u00e9\n      ELSE 0  -- Box cons\u00e9cutive\n    END AS is_new_sequence,\n    -- Compte cumulatif des box pour l'utilisateur\n    ROW_NUMBER() OVER(PARTITION BY t.user_id ORDER BY t.box_id) AS total_boxes_so_far,\n\nCASE \n  WHEN lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) OR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1 THEN NULL\n  WHEN t.gift = 1  THEN 'gift end'\n  ELSE COALESCE(scr.sub_suspended_reason_lvl1, 'self-willed')\n   END\nAS sub_suspended_reason_lvl1,\nCASE \n  WHEN lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) OR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1 THEN NULL\n  WHEN t.gift = 1  THEN 'gift end'\n  ELSE COALESCE(scr.sub_suspended_reason_lvl2, 'suspended')\n  END\nAS sub_suspended_reason_lvl2,\nCASE \n  WHEN lead(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) - t.box_id IN (0,1) OR lead(t.box_id) over (partition by t.order_detail_id,t.dw_country_code order by t.box_id) - t.box_id = 1 THEN NULL\n  WHEN t.gift = 1  THEN 'gift end'\n  ELSE COALESCE(scr.sub_suspended_reason_lvl3, 'suspended')\n  END\nAS sub_suspended_reason_lvl3,\nbgg.global_grade AS box_global_grade,\n\n\nmcd.type as coupon_type,   -- new coupon_typet.box_id\ncase when t.box_id - lag(t.box_id) over (partition by t.user_id, t.dw_country_code order by t.box_id, t.order_detail_id )  IN (0,1) \nOR\nt.box_id - lag(t.box_id) over (partition by t.order_detail_id, t.dw_country_code order by t.box_id, t.order_detail_id )  = 1\nthen 'LIVE'\nelse'ACQUISITION'end as acquis_status_lvl1,\ncase when  t.box_id - lag(t.box_id) over (partition by t.user_id, t.dw_country_code order by t.box_id, t.order_detail_id) IN (0,1)\nOR\nt.box_id - lag(t.box_id) over (partition by t.order_detail_id, t.dw_country_code order by t.box_id, t.order_detail_id )  = 1\nthen 'LIVE'  \nwhen t.gift=1 then 'GIFT'\nwhen lag(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) is not null then 'REACTIVATION'\nwhen lag(t.box_id) over (partition by t.user_id,t.dw_country_code order by t.box_id) is null then 'NEW NEW'\nelse'Unknown'end as acquis_status_lvl2,   \nCASE WHEN cannot_suspend = 1 THEN 'committed' ELSE 'not committed' END AS committed,\n\ng.gws_costs,\nt.total_product / (1+vat_rate/100) AS gross_revenue,\nt.total_product - t.total_product/(1+vat_rate/100) AS vat_on_gross_revenue,\nt.total_discount / (1+vat_rate/100) AS discount,\nt.total_discount - t.total_discount / (1+vat_rate/100) AS vat_on_discount,\nt.total_product / (1+vat_rate/100) - (t.total_discount / (1+vat_rate/100)) AS net_revenue,\nt.total_shipping/(1+vat_rate/100) AS shipping,\nt.total_shipping - t.total_shipping/(1+vat_rate/100) AS vat_on_shipping,\nt.total_product / (1+vat_rate/100) - (t.total_discount / (1+vat_rate/100)) - (t.coop + t.assembly_cost + t.pack_cost + t.print_cost + t.consumable_cost + t.shipping_cost + COALESCE(g.gws_costs, 0)) AS gross_profit\nFROM\n(\n  SELECT \n  o.dw_country_code,\n  s.id AS sub_id,\n  d.id AS order_detail_id,\n  o.id AS order_id,\n  o.user_id, \n  s.box_id,\n  case when s.box_id=current_box_id then true else false end as is_current,\n  b.id - cbt.current_box_id as diff_current_box,\n  s.coffret_id,\n  b.date,\n  ta.value is not null as reexp, \n  mree.sub_id is not null as mini_reexp,\n   DATE_DIFF(CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END, date(b.shipping_date), DAY) + 1  AS day_in_cycle,\n  CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END AS payment_date,\n DATE_DIFF(CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END, date(b.shipping_date), DAY) + 1 AS nb_days_since_opening,\n date_diff(CASE WHEN an.eventDate IS NULL THEN date(s.last_payment_date) ELSE date(an.eventDate) END, date(b1.shipping_date), DAY) as nb_days_next_cycle,\n  extract(month FROM b.date) AS month,\n  extract(year FROM b.date) AS year,\n  o.coupon_code_id,\n  COALESCE(coupons_parents.code, c.code) AS coupon_code,\n  s.sub_offer_id,\n  COALESCE(so_parents.code, so.code) AS sub_offer_code,\n  CASE WHEN s.box_id = d.sub_start_box THEN  COALESCE(coupons_parents.code, c.code) ELSE COALESCE(so_parents.code, so.code) END AS coupon,\n  s.reactivated_date,\n  s.shipping_mode,\n  CASE WHEN d.gift_card_id = 0 THEN 1\n       WHEN bg.gift IS NULL THEN 1\n       WHEN bg.gift = 1 THEN 0\n       WHEN bg.gift = 0 THEN 1\n       ELSE 1\n  END AS self,\n  CASE WHEN bg.gift IS NULL THEN 0 \n       WHEN bg.gift = 1 THEN 1\n       WHEN bg.gift = 0 THEN 0\n       ELSE bg.gift\n  END AS gift,\n  CASE WHEN yc.yearly_coupon_id IS NOT NULL AND s.cannot_suspend = 1 THEN 1 ELSE 0 END AS yearly,\n  CASE WHEN d.quantity= -12 THEN 1 ELSE 0 END AS old_yearly,\n  d.quantity AS dquantity,\n  s.cannot_suspend AS cannot_suspend,\n  CASE  WHEN s.sub_payment_status_id = 8 OR o.status_id = 3 THEN 0\n        WHEN s.total_product = 0 AND gc.id IS NULL THEN 0\n        WHEN s.total_product = 0 AND gc.id IS NOT NULL AND pbp.sub_id IS NULL THEN b.box_quantity*(gc.amount/gc.duration)\n        WHEN s.total_product = 0 AND gc.id IS NOT NULL AND pbp.sub_id IS NOT NULL THEN (gc.amount/gc.duration) -- if partial box paid, count only one box\n        ELSE s.total_product \n  END AS total_product,\n  o.dw_country_code AS store_code,\n  COALESCE(tva.taux, 0) AS vat_rate,\n  CASE WHEN s.sub_payment_status_id = 8 OR o.status_id = 3 THEN 0.0\n       WHEN c.parent_id = 15237671 AND s.box_id = d.sub_start_box THEN 0.0 -- Veepee offer - May 2021\n       WHEN so.parent_offer_id = 53382 THEN 0.0 -- Veepee offer - May 2021\n       ELSE s.total_discount\n  END AS total_discount,\n  s.shipping_country AS shipping_country,\n  CASE WHEN s.sub_payment_status_id = 8 OR o.status_id = 3 THEN 0.0 ELSE s.total_shipping END AS total_shipping,\n  CASE WHEN s.sub_payment_status_id = 3 THEN 'forthcoming' ELSE 'paid' END AS payment_status,\n  sps.name AS sub_payment_status,\n  sub_payment_status_id,\n  \nd.sub_start_box,\nCASE WHEN o.raf_parent_id > 0 and rol.order_id is not null THEN 1 ELSE 0 END AS raffed,\nraf_parent_id,\n  s.shipping_firstname,\n  s.shipping_lastname,\n  d.gift_card_id,\n  CASE  WHEN (c.discount_type = 'PRODUCT' AND d.sub_start_box = s.box_id) OR so.offer_type = 'PRODUCT' THEN 'GWS'\n        WHEN (c.discount_type IN ('CURRENCY', 'PERCENT', 'CURRENCY_TOTAL') AND d.sub_start_box = s.box_id) OR so.offer_type IN ('CURRENCY','PERCENT','CURRENCY_TOTAL') THEN 'discount'\n        ELSE 'Other'\n  END AS discount_type,\n  CASE WHEN (c.sub_engagement_period > 0 AND d.sub_start_box = s.box_id) OR so.sub_engagement_period > 0 THEN 'engaged' ELSE 'not engaged' END AS coupon_engagement,\n  kc.coop,\n  kc.assembly_cost,\n  kc.pack_cost,\n  kc.print_cost,\n  kc.consumable_cost,\n  sc.price AS shipping_cost,\n  b1.date as next_month_date,\n  s.next_payment_date,\n  s.last_payment_date,\n  CASE \n  WHEN s.cannot_suspend = 0 THEN 0\n  WHEN  s.cannot_suspend = 1 \n        AND (\n            lead(s.cannot_suspend) over (partition by s.order_detail_id,s.dw_country_code order by s.box_id) = 1 \n            OR bn.user_id IS NOT NULL\n            )\n\n    THEN 0 \n    ELSE 1 END AS last_committed_box\n  -- sub_suspended_reason_lvl1,sub_suspended_reason_lvl2,sub_suspended_reason_lvl3\n  FROM `teamdata-291012`.`inter`.`orders` o\n  INNER JOIN `teamdata-291012`.`inter`.`order_details` d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`boxes` b1 ON b1.id = s.box_id +1 AND b1.dw_country_code = s.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`sub_payments_status` sps ON sps.id = s.sub_payment_status_id and sps.dw_country_code='FR'\n  INNER JOIN `teamdata-291012`.`snippets`.`current_box` cbt ON o.dw_country_code = cbt.dw_country_code\n  LEFT JOIN products p ON o.dw_country_code = p.dw_country_code AND b.id = p.box_id AND s.coffret_id = p.coffret_id AND p.product_codification_id = 29\n  LEFT JOIN `teamdata-291012`.`product`.`kit_costs` kc ON o.dw_country_code = kc.country_code AND p.inventory_item_id = kc.inventory_item_id and kc.kit_id=p.id\n  LEFT JOIN shipping_mode_dedup  sc ON b.date >= sc.date_start AND (b.date <= sc.date_end OR sc.date_end IS NULL) AND s.shipping_mode = sc.shipping_mode_id AND CASE WHEN b.box_quantity = 1 THEN 0.4 WHEN b.box_quantity = 2 THEN 0.8 END >= min_weight AND (CASE WHEN b.box_quantity = 1 THEN 0.4 WHEN b.box_quantity = 2 THEN 0.8 END < max_weight OR max_weight IS NULL)\n  LEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.ID = d.gift_card_id AND gc.dw_country_code = d.dw_country_code\n  LEFT JOIN `teamdata-291012`.`payment`.`adyen_notifications_authorization` an ON an.sub_id = s.id AND an.dw_country_code = s.dw_country_code\n  LEFT JOIN `teamdata-291012`.`inter`.`coupons` c ON c.id = o.coupon_code_id AND c.dw_country_code = o.dw_country_code\n  LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons_parents ON coupons_parents.id = c.parent_id AND coupons_parents.dw_country_code = c.dw_country_code\n  LEFT JOIN `teamdata-291012`.`inter`.`sub_offers` so ON so.id = s.sub_offer_id AND so.dw_country_code = s.dw_country_code\n  LEFT JOIN `teamdata-291012`.`inter`.`sub_offers` so_parents ON so_parents.id = so.parent_offer_id AND so_parents.dw_country_code = so.dw_country_code\n  LEFT JOIN inter.tva_product tva ON tva.country_code = s.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = s.dw_country_code\n  LEFT JOIN `teamdata-291012`.`sales`.`box_gift` bg ON bg.dw_country_code = s.dw_country_code AND bg.sub_id = s.id\n  LEFT JOIN snippets.yearly_coupons yc ON o.dw_country_code = yc.country_code AND o.coupon_code_id = yc.yearly_coupon_id\n  LEFT JOIN `teamdata-291012`.`inter`.`raf_order_link` rol on o.id=rol.order_id and rol.dw_country_code=d.dw_country_code\n  LEFT JOIN `teamdata-291012`.`sales`.`box_committed_not_paid` bn ON o.dw_country_code = bn.dw_country_code AND o.user_id = bn.user_id AND bn.box_id = s.box_id + 1\n  /*LEFT JOIN (select user_id,month,year,dw_country_code,box_id,max(sub_suspended_reason_lvl1)sub_suspended_reason_lvl1,max(sub_suspended_reason_lvl2)sub_suspended_reason_lvl2,max(sub_suspended_reason_lvl3)sub_suspended_reason_lvl3 from`teamdata-291012.sales.box_sales_by_user_by_type`  group by 1,2,3,4,5)bsbu ON o.dw_country_code = bsbu.dw_country_code AND bsbu.user_id=o.user_id and bsbu.box_id = s.box_id + 1*/\n  LEFT JOIN `teamdata-291012`.`inter`.`partial_box_paid` pbp ON pbp.dw_country_code = s.dw_country_code AND pbp.sub_id = s.id\n  LEFT JOIN `teamdata-291012`.`inter`.`tags` ta ON ta.link_id=s.id AND ta.dw_country_code = o.dw_country_code and ta.type='SUB' and ta.value='reexp'\n  LEFT JOIN mini_reexp mree ON mree.dw_country_code = o.dw_country_code and mree.sub_id=s.id and mree.box_id=s.box_id\n  \n  WHERE -- o.status_id IN (1, 3) AND \n  (s.shipping_status_id IN (2, 3, 4, 5, 19, 22) OR (s.sub_payment_status_id = 3 AND s.box_id >= cbt.current_box_id)\n  -------------------\n  OR (o.dw_country_code = 'DE' and s.sub_payment_status_id = 3 and s.box_id=160)\n  -- cas particuler allemagne avril 2025\n  )\n  AND s.box_id <= cbt.current_box_id + 36\n  \n\n) t\nLEFT JOIN gws_costs_table g USING(dw_country_code, sub_id)\nLEFT JOIN ( select distinct country,code,max(type) as type, max(date) as date,max(type2) as type2,max(coupon_id) as coupon_id,max(sub_offer_id) as sub_offer_id \nfrom`teamdata-291012.marketing.Marketing_cac_discount` \ngroup by 1,2) \nmcd on mcd.coupon_id=coupon_code_id and mcd.country=t.dw_country_code\nLEFT JOIN \n(  select distinct country,code,max(type) as type, max(date) as date,max(type2) as type2,max(coupon_id) as coupon_id,max(sub_offer_id) as sub_offer_id \nfrom`teamdata-291012.marketing.Marketing_cac_discount` \ngroup by 1,2) mcdso on mcdso.sub_offer_id=t.sub_offer_id and mcd.country=t.dw_country_code\nLEFT JOIN box_global_grades bgg ON bgg.dw_country_code = t.dw_country_code AND bgg.box_id = t.box_id AND bgg.coffret_id = t.coffret_id\nLEFT JOIN self_churn_reason scr ON scr.dw_country_code = t.dw_country_code AND scr.user_id = t.user_id AND scr.box_id = t.box_id+1\nLEFT JOIN `teamdata-291012`.`sales`.`box_mono`  cm on t.dw_country_code=cm.dw_country_code and t.box_id=cm.mono_box_id and t.coffret_id=cm.mono_coffret_id) full_table\n\ngroup by all) FT\n\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["dw_country_code", "sub_id"], "time_spine": null}, "model.warehouse.shop_sales": {"database": "teamdata-291012", "schema": "sales", "name": "shop_sales", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/shop_sales.sql", "original_file_path": "models/dwh/sales/shop_sales.sql", "unique_id": "model.warehouse.shop_sales", "fqn": ["warehouse", "dwh", "sales", "shop_sales"], "alias": "shop_sales", "checksum": {"name": "sha256", "checksum": "12ca85877d579a1df75cb095d6d1bec9e4dac8e03da142b5e6ee786c03c65de6"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"], "partition_by": {"granularity": "month", "data_type": "date", "field": "order_date"}}, "tags": [], "description": "Table des ventes shop", "columns": {"dw_country_code": {"name": "dw_country_code", "description": "Code pays pour les ventes shop", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "warehouse://models/dwh/sales/schema.yml", "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}, "partition_by": {"granularity": "month", "data_type": "date", "field": "order_date"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.81852, "relation_name": "`teamdata-291012`.`sales`.`shop_sales`", "raw_code": "{{ config(\n   materialized='table',\n   partition_by={\n     \"field\": \"order_date\",\n     \"data_type\": \"date\",\n     \"granularity\": \"month\"\n   },\n   cluster_by=['dw_country_code']\n) }}\n\nWITH dates AS\n(\n  SELECT dates\n  FROM\n  (\n  SELECT \n  GENERATE_DATE_ARRAY('2011-01-01', '2100-01-01') AS d\n  ) t,\n  UNNEST(d) dates\n),\nhistory_product_catalog as (\n\nselect archive_date,product_id,dw_country_code,max(euro_purchase_price)euro_purchase_price \nfrom `teamdata-291012.history_table.product__catalog`\ngroup by all\n),\n\nc_date AS\n(\n  SELECT distinct archive_date\n  FROM `history_table.product__catalog` \n),\nall_dates AS\n(\n  SELECT dates.dates as d, c_date.archive_date, RANK() OVER (PARTITION BY dates.dates ORDER BY DATE(c_date.archive_date)) AS r\n  FROM dates\n  LEFT JOIN c_date ON DATE(c_date.archive_date) >= DATE(dates.dates)\n  \n),\ncatalog_date AS\n(\n  SELECT d, archive_date\n  FROM all_dates\n  WHERE r = 1 \n  AND archive_date IS NOT NULL\n),\norders_with_box as (\nselect order_id,dw_country_code \nfrom {{ ref('order_details') }}\nwhere product_id=1\ngroup by all\n\n)\n\n\n\nSELECT  concat(t.dw_country_code,'_',t.user_id)as user_key,t.*, \n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        unit_price * quantity / (1 + vat_rate / 100) AS gross_revenue,\n        (vat_rate / 100) * unit_price * quantity / (1 + vat_rate / 100) AS vat_on_gross_revenue,\n        quantity * (unit_product_discount + unit_points_discount + unit_coupon_discount + unit_store_discount + unit_sub_discount) / (1 + vat_rate / 100) AS total_discount,\n        (vat_rate / 100) * quantity * (unit_product_discount + unit_points_discount + unit_coupon_discount + unit_store_discount + unit_sub_discount) / (1 + vat_rate / 100) AS vat_on_total_discount,\n        unit_product_discount*quantity/(1+vat_rate/100) AS product_discount,\n        unit_points_discount*quantity/(1+vat_rate/100) AS points_discount,\n        unit_coupon_discount*quantity/(1+vat_rate/100) AS coupons_discount,\n        unit_store_discount*quantity/(1+vat_rate/100) AS store_discount,\n        unit_sub_discount*quantity/(1+vat_rate/100) AS sub_discount,\n        order_total_shipping_ttc/(1+COALESCE(tva.taux,0)/100) AS order_total_shipping,\n        COALESCE(tva.taux/100,0)*order_total_shipping_ttc/(1+COALESCE(tva.taux,0)/100) AS vat_on_total_shipping,\n        unit_price*quantity/(1+vat_rate/100) - quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS net_revenue, \n        quantity * (unit_price - unit_product_discount - unit_coupon_discount - unit_store_discount - unit_sub_discount) AS sell_out\nFROM (\n    SELECT\n        o.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        os.value AS order_status,\n        COALESCE(o.is_active_sub,0) AS is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(o.date) AS order_date,  \n        d.product_id,\n        catalog.sku,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id IN (0,3) OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id > 0 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id >= 1 AND d.vat = 0 THEN tva.taux\n            WHEN o.store_id >= 1 AND d.vat > 0 THEN d.vat\n            WHEN d.vat = 0 AND tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN d.vat > 0 THEN d.vat\n            WHEN tva.taux IS NULL AND o.date >= '2021-10-01' THEN 0\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE tva.taux\n        END AS vat_rate,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification_id\n             ELSE pc.id\n        END AS product_codification_id,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification\n             WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON' \n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             WHEN d.product_id = 41152 THEN 38.0 -- LTE Hygi\u00e8ne intime with wrong price  \n             ELSE ROUND(d.price, 2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        d.quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             WHEN d.product_id = 41152 AND d.sub_discount > 0 THEN 5.7 -- LTE Hygi\u00e8ne intime with wrong price \n             WHEN d.product_id = 33055 AND d.sub_discount > 0 THEN 1.9 -- La Fabrique with wrong price \n             ELSE ROUND(d.sub_discount,2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN (-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 WHEN COALESCE(d.store_discount, 0) > d.price THEN d.price*COALESCE(d.store_discount, 0) / 100 ELSE COALESCE(d.store_discount, 0) END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration,\n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN (o.status_id = 3 or owb.order_id is not null) THEN 0\n         ELSE o.total_shipping END AS order_total_shipping_ttc,\n        sm.name as order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_validated' as detail_valid,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price) AS euro_purchase_price,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price)*quantity AS products_cost,\n        d.bundle_product_id,\n        d.bundle_index,\n        sm.country as shipping_country,\n        p.selections,\n        FROM {{ ref('orders') }} o\n        INNER JOIN {{ ref('order_details') }} d ON d.order_id = o.ID AND o.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('products') }} p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('catalog') }} ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN catalog_date cd ON DATE(cd.d) = DATE(o.date)\n        LEFT JOIN history_product_catalog hc ON DATE(hc.archive_date) = DATE(cd.archive_date) AND hc.product_id = p.id AND hc.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('nice_names') }} pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('product_codification') }} pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('categories') }} apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('brands') }} b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('order_status') }} os ON os.id = o.status_id and os.dw_country_code='FR'\n        LEFT JOIN {{ ref('posts') }} p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('shipping_modes') }} sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN {{ ref('gift_cards') }} gc ON gc.order_detail_id = d.id AND gc.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('coupons') }} coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('coupons') }} coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN orders_with_box owb on owb.order_id=o.id and owb.dw_country_code=o.dw_country_code\n        LEFT JOIN {{ ref('da_eu_countries') }} eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        LEFT JOIN product.codification_bundle_product cbp ON d.dw_country_code = cbp.dw_country_code AND d.product_id = cbp.component_product_id AND d.bundle_product_id = cbp.bundle_product_id\n        WHERE o.status_id IN (1, 3, 4)\n        AND (p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 40, 41, 42, 38, 47) OR p.product_codification_id = 28 AND p.special_type = 'GWP')\n\n    UNION ALL\n-- partial cancellations\n\n        SELECT\n        o.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        os.value AS order_status,\n        o.is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(o.date) AS order_date,    \n        d.product_id,\n        catalog.sku,\n        CASE WHEN d.product_id IN(-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id IN (0,3) OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id > 0 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN o.store_id >= 1 THEN tva.taux\n            WHEN tva.taux IS NOT NULL THEN tva.taux\n            WHEN eu.country_code IS NULL THEN 0\n        ELSE tva.taux\n        END AS vat_rate,\n        pc.id AS product_codification_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON'\n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0\n             ELSE ROUND(d.price, 2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        d.quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             ELSE ROUND(d.sub_discount,2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN d.product_id IN (-1, -2, -3) THEN o.total_points_discount\n             ELSE d.points_discount\n        END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN d.store_discount IS NULL THEN 0\n             ELSE d.store_discount\n        END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration,\n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_cancelled' AS detail_valid,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price) AS euro_purchase_price,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price)*quantity as products_cost,\n        NULL AS bundle_product_id,\n        NULL AS bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM {{ ref('orders') }} o\n        INNER JOIN {{ ref('partial_cancelations') }} d ON d.order_id = o.ID AND d.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('products') }} p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN {{ ref('catalog') }} ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN catalog_date cd ON DATE(cd.d) = DATE(o.date)\n        LEFT JOIN history_product_catalog hc ON DATE(hc.archive_date) = DATE(cd.archive_date) AND hc.product_id = p.id AND hc.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('nice_names') }} pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('product_codification') }} pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('categories') }} apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN {{ ref('brands') }} b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('order_status') }} os ON os.id = o.status_id and os.dw_country_code='FR'\n        LEFT JOIN {{ ref('posts') }} p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN {{ ref('shipping_modes') }} sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('gift_cards') }} gc ON gc.order_detail_id = d.order_detail_id AND gc.dw_country_code = d.dw_country_code -- order_detail_id instead of id for wp_jb_order_details\n        LEFT JOIN {{ ref('coupons') }} coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN {{ ref('coupons') }} coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN {{ ref('da_eu_countries') }} eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        WHERE o.status_id IN (1, 3, 4)\n        AND (p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 40, 41, 42, 38, 47) OR p.product_codification_id = 28 AND p.special_type = 'GWP')\n    ) t\nLEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = t.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = t.dw_country_code\n\n\n-- SHOP REFUNDS ---------\n\nUNION ALL\n\nSELECT concat(sr.dw_country_code,'_',user_id)as user_key,\n    sr.dw_country_code,\n       order_id,\n       user_id,\n       order_status,\n       is_active_sub,\n       is_first_order,\n       is_first_shop_order,\n       order_date,\n       sr.product_id,\n       sku,\n       product_name,\n       store_code,\n       store_id,\n       vat_rate,\n       product_codification_id,\n       product_codification,\n       planning_category_1,\n       unit_price,\n       quantity,\n       unit_product_discount,\n       unit_coupon_discount,\n       unit_sub_discount,\n       unit_points_discount,\n       unit_store_discount,\n       brand_name,\n       brand_group,\n       is_in_house,\n       gift_card_type,\n       gift_card_duration,\n       order_coupon_code,\n       order_total_shipping_ttc,\n       order_shipping_mode_name,\n       shipping_mode_id,\n       detail_valid,\n       euro_purchase_price,\n       euro_purchase_price*quantity as products_cost,\n       bundle_product_id,\n       bundle_index,\n       shipping_country,\n       sr.selections,\n       year,\n       month,\n       gross_revenue,\n       vat_on_gross_revenue,\n       total_discount,\n       vat_on_total_discount,\n       product_discount,\n       points_discount,\n       coupons_discount,\n       store_discount,\n       sub_discount,\n       order_total_shipping,\n       vat_on_total_shipping,\n       net_revenue,\n       sell_out\nFROM {{ ref('shop_refunds') }}sr\nleft join ( select dw_country_code, sku,product_id from {{ ref('catalog') }})c on c.product_id=sr.product_id and c.dw_country_code=sr.dw_country_code\n-- -----------------OTHER SHOP REFUNDS ------------------------------------------------\n\nUNION ALL\n\nSELECT \nconcat(t.dw_country_code,'_',t.user_id)as user_key,\nt.dw_country_code,\nt.order_id,\nt.user_id,\nt.order_status,\nt.is_active_sub,\nt.is_first_order,\nt.is_first_shop_order,\nt.order_date,\nt.product_id,\nt.sku,\nt.product_name,\nt.store_code,\nt.store_id,\nt.vat_rate,\n0 AS product_codification_id,\nt.product_codification,\nt.planning_category_1,\nt.unit_price,\n- t.quantity,\nt.unit_product_discount,\nt.unit_coupon_discount,\nt.unit_sub_discount,\nt.unit_points_discount,\nt.unit_store_discount,\nt.brand_name,\nt.brand_group,\nt.is_in_house,\nt.a,\n  0,\nt.order_coupon_code,\n- t.order_total_shipping_ttc,\nt.c,\nt.shipping_mode,\nt.dv,\nt.euro_purchase_price,\nt.products_cost,\nt.bundle_product_id,\nt.bundle_index,\nt.shipping_country,\n'' as selections,\nEXTRACT(YEAR FROM t.order_date) AS year,\nEXTRACT(MONTH FROM t.order_date) AS month,\n- t.total_refunded/(1+vat_rate/100) AS gross_revenue,\n- (vat_rate/100)*t.total_refunded/(1+vat_rate/100) AS vat_on_gross_revenue,\n0 AS total_discount,\n0 AS vat_on_total_discount,\n0,\n0,\n0,\n0,\n0,\n0,\n0,\n- t.total_refunded/(1+vat_rate/100) AS net_revenue,\n- t.total_refunded AS sell_out\nFROM\n(\n    SELECT \n    an.dw_country_code,\n    an.order_id,\n    o.user_id,\n    'refund' AS order_status,\n    o.is_active_sub,\n    o.is_first_order,\n    o.is_first_shop_order,\n    date(an.created_at) AS order_date,    \n    0 AS product_id,\n    '0' as sku,\n    CAST(NULL AS STRING) AS product_name,\n    CASE\n        WHEN o.store_id IN (0,3) OR o.shipping_mode = 32 THEN an.dw_country_code\n        WHEN o.store_id > 0 THEN 'Store'\n    END AS store_code,\n    o.store_id,\n    CASE \n        WHEN o.store_id >= 1 THEN tva.taux\n        WHEN tva.taux IS NOT NULL THEN tva.taux\n        WHEN eu.country_code IS NULL THEN 0\n        ELSE tva.taux\n    END AS vat_rate,\n    0 AS product_codification_id,\n    'ESHOP' AS product_codification,\n    CAST(NULL AS STRING) AS planning_category_1,\n    0 AS unit_price,\n    0 AS quantity,\n    0 AS unit_product_discount,\n    0 AS unit_coupon_discount,\n    0 AS unit_sub_discount,\n    0 AS unit_points_discount,\n    0 AS unit_store_discount,\n    CAST(NULL AS STRING) AS brand_name,\n    CAST(NULL AS STRING) AS brand_group,\n    False As is_in_house,\n    CAST(NULL AS STRING) AS a,\n    CAST(NULL AS STRING) AS order_coupon_code,\n    False AS b,\n    0 AS order_total_shipping_ttc,\n    CAST(NULL AS STRING) AS c,\n    o.shipping_mode,\n    'other refunds' AS dv,\n    0 AS euro_purchase_price,\n    0 products_cost,\n    0 AS bundle_product_id,\n    0 AS bundle_index,\n    o.shipping_country,\n    EXTRACT(YEAR FROM an.created_at) AS year,\n    1.0*an.value/100 AS total_refunded\n    FROM (SELECT distinct dw_country_code,\n                 created_at,\n                 order_id,\n                 eventCode,\n                 sub_id,\n                 value\n          FROM (\n            SELECT dw_country_code,\n                   created_at,\n                   order_id,\n                   eventCode,\n                   sub_id,\n                   value,\n                   ROW_NUMBER() OVER (PARTITION BY dw_country_code, pspReference ORDER BY eventDate DESC) rn\n            FROM {{ ref('adyen_notifications') }}\n            WHERE success = 1\n          )\n          WHERE rn = 1) an\n    INNER JOIN {{ ref('orders') }} o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n    LEFT JOIN {{ ref('shop_refunds') }} AS sr ON sr.order_id = an.order_id AND sr.dw_country_code = an.dw_country_code\n    LEFT JOIN {{ ref('box_refunds') }} AS br ON br.sub_id = an.sub_id AND br.dw_country_code = an.dw_country_code\n    LEFT JOIN {{ ref('box_refunds') }} AS br2 ON br2.order_id = an.order_id AND br2.dw_country_code = an.dw_country_code\n    LEFT JOIN {{ ref('shipping_modes') }} sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n    LEFT JOIN {{ ref('tva_product') }} tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n    LEFT JOIN {{ ref('da_eu_countries') }} eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n    WHERE an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n    AND an.created_at >= '2021-01-01'\n    AND sr.order_id IS NULL\n    AND br.sub_id IS NULL\n    AND br2.order_id IS NULL\n) t", "language": "sql", "refs": [{"name": "order_details", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "nice_names", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "categories", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "order_status", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "shipping_modes", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "da_eu_countries", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "partial_cancelations", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "nice_names", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "categories", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "order_status", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "shipping_modes", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "da_eu_countries", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "shop_refunds", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "adyen_notifications", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "shop_refunds", "package": null, "version": null}, {"name": "box_refunds", "package": null, "version": null}, {"name": "box_refunds", "package": null, "version": null}, {"name": "shipping_modes", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}, {"name": "da_eu_countries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.products", "model.warehouse.catalog", "model.warehouse.nice_names", "model.warehouse.product_codification", "model.warehouse.categories", "model.warehouse.brands", "model.warehouse.order_status", "model.warehouse.posts", "model.warehouse.shipping_modes", "model.warehouse.tva_product", "model.warehouse.gift_cards", "model.warehouse.coupons", "model.warehouse.da_eu_countries", "model.warehouse.partial_cancelations", "model.warehouse.shop_refunds", "model.warehouse.adyen_notifications", "model.warehouse.box_refunds"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/shop_sales.sql", "compiled": true, "compiled_code": "\n\nWITH dates AS\n(\n  SELECT dates\n  FROM\n  (\n  SELECT \n  GENERATE_DATE_ARRAY('2011-01-01', '2100-01-01') AS d\n  ) t,\n  UNNEST(d) dates\n),\nhistory_product_catalog as (\n\nselect archive_date,product_id,dw_country_code,max(euro_purchase_price)euro_purchase_price \nfrom `teamdata-291012.history_table.product__catalog`\ngroup by all\n),\n\nc_date AS\n(\n  SELECT distinct archive_date\n  FROM `history_table.product__catalog` \n),\nall_dates AS\n(\n  SELECT dates.dates as d, c_date.archive_date, RANK() OVER (PARTITION BY dates.dates ORDER BY DATE(c_date.archive_date)) AS r\n  FROM dates\n  LEFT JOIN c_date ON DATE(c_date.archive_date) >= DATE(dates.dates)\n  \n),\ncatalog_date AS\n(\n  SELECT d, archive_date\n  FROM all_dates\n  WHERE r = 1 \n  AND archive_date IS NOT NULL\n),\norders_with_box as (\nselect order_id,dw_country_code \nfrom `teamdata-291012`.`inter`.`order_details`\nwhere product_id=1\ngroup by all\n\n)\n\n\n\nSELECT  concat(t.dw_country_code,'_',t.user_id)as user_key,t.*, \n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        unit_price * quantity / (1 + vat_rate / 100) AS gross_revenue,\n        (vat_rate / 100) * unit_price * quantity / (1 + vat_rate / 100) AS vat_on_gross_revenue,\n        quantity * (unit_product_discount + unit_points_discount + unit_coupon_discount + unit_store_discount + unit_sub_discount) / (1 + vat_rate / 100) AS total_discount,\n        (vat_rate / 100) * quantity * (unit_product_discount + unit_points_discount + unit_coupon_discount + unit_store_discount + unit_sub_discount) / (1 + vat_rate / 100) AS vat_on_total_discount,\n        unit_product_discount*quantity/(1+vat_rate/100) AS product_discount,\n        unit_points_discount*quantity/(1+vat_rate/100) AS points_discount,\n        unit_coupon_discount*quantity/(1+vat_rate/100) AS coupons_discount,\n        unit_store_discount*quantity/(1+vat_rate/100) AS store_discount,\n        unit_sub_discount*quantity/(1+vat_rate/100) AS sub_discount,\n        order_total_shipping_ttc/(1+COALESCE(tva.taux,0)/100) AS order_total_shipping,\n        COALESCE(tva.taux/100,0)*order_total_shipping_ttc/(1+COALESCE(tva.taux,0)/100) AS vat_on_total_shipping,\n        unit_price*quantity/(1+vat_rate/100) - quantity*(unit_product_discount+unit_points_discount+unit_coupon_discount+unit_store_discount+unit_sub_discount)/(1+vat_rate/100) AS net_revenue, \n        quantity * (unit_price - unit_product_discount - unit_coupon_discount - unit_store_discount - unit_sub_discount) AS sell_out\nFROM (\n    SELECT\n        o.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        os.value AS order_status,\n        COALESCE(o.is_active_sub,0) AS is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(o.date) AS order_date,  \n        d.product_id,\n        catalog.sku,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id IN (0,3) OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id > 0 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN d.special_type = 'DON' THEN 0\n            WHEN o.store_id >= 1 AND d.vat = 0 THEN tva.taux\n            WHEN o.store_id >= 1 AND d.vat > 0 THEN d.vat\n            WHEN d.vat = 0 AND tva.taux IS NOT NULL AND o.date >= '2021-10-01' THEN tva.taux\n            WHEN d.vat > 0 THEN d.vat\n            WHEN tva.taux IS NULL AND o.date >= '2021-10-01' THEN 0\n            WHEN eu.country_code IS NULL THEN 0\n            ELSE tva.taux\n        END AS vat_rate,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification_id\n             ELSE pc.id\n        END AS product_codification_id,\n        CASE WHEN cbp.product_codification_id IS NOT NULL THEN cbp.product_codification\n             WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON' \n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN(pc.category_lvl_1 = 'LOYALTY') THEN 0\n             WHEN d.product_id = 41152 THEN 38.0 -- LTE Hygi\u00e8ne intime with wrong price  \n             ELSE ROUND(d.price, 2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        d.quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             WHEN d.product_id = 41152 AND d.sub_discount > 0 THEN 5.7 -- LTE Hygi\u00e8ne intime with wrong price \n             WHEN d.product_id = 33055 AND d.sub_discount > 0 THEN 1.9 -- La Fabrique with wrong price \n             ELSE ROUND(d.sub_discount,2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0 WHEN d.product_id IN (-1, -2, -3) THEN o.total_points_discount ELSE d.points_discount END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0 WHEN COALESCE(d.store_discount, 0) > d.price THEN d.price*COALESCE(d.store_discount, 0) / 100 ELSE COALESCE(d.store_discount, 0) END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration,\n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN (o.status_id = 3 or owb.order_id is not null) THEN 0\n         ELSE o.total_shipping END AS order_total_shipping_ttc,\n        sm.name as order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_validated' as detail_valid,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price) AS euro_purchase_price,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price)*quantity AS products_cost,\n        d.bundle_product_id,\n        d.bundle_index,\n        sm.country as shipping_country,\n        p.selections,\n        FROM `teamdata-291012`.`inter`.`orders` o\n        INNER JOIN `teamdata-291012`.`inter`.`order_details` d ON d.order_id = o.ID AND o.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`products` p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`catalog` ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN catalog_date cd ON DATE(cd.d) = DATE(o.date)\n        LEFT JOIN history_product_catalog hc ON DATE(hc.archive_date) = DATE(cd.archive_date) AND hc.product_id = p.id AND hc.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`nice_names` pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`categories` apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`brands` b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`order_status` os ON os.id = o.status_id and os.dw_country_code='FR'\n        LEFT JOIN `teamdata-291012`.`inter`.`posts` p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`shipping_modes` sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.order_detail_id = d.id AND gc.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN orders_with_box owb on owb.order_id=o.id and owb.dw_country_code=o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`da_eu_countries` eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        LEFT JOIN product.codification_bundle_product cbp ON d.dw_country_code = cbp.dw_country_code AND d.product_id = cbp.component_product_id AND d.bundle_product_id = cbp.bundle_product_id\n        WHERE o.status_id IN (1, 3, 4)\n        AND (p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 40, 41, 42, 38, 47) OR p.product_codification_id = 28 AND p.special_type = 'GWP')\n\n    UNION ALL\n-- partial cancellations\n\n        SELECT\n        o.dw_country_code,\n        o.id AS order_id,\n        o.user_id,\n        os.value AS order_status,\n        o.is_active_sub,\n        o.is_first_order,\n        o.is_first_shop_order,\n        DATE(o.date) AS order_date,    \n        d.product_id,\n        catalog.sku,\n        CASE WHEN d.product_id IN(-1, -2, -3) THEN 'Reward Coupon LOYALTY' ELSE pnn.product_nice_name END AS product_name,\n        CASE\n            WHEN o.store_id IN (0,3) OR o.shipping_mode = 32 THEN o.dw_country_code\n            WHEN o.store_id > 0 THEN 'Store'\n        END AS store_code,\n        o.store_id,\n        CASE \n            WHEN o.store_id >= 1 THEN tva.taux\n            WHEN tva.taux IS NOT NULL THEN tva.taux\n            WHEN eu.country_code IS NULL THEN 0\n        ELSE tva.taux\n        END AS vat_rate,\n        pc.id AS product_codification_id,\n        CASE WHEN d.product_id IN (-1, -2, -3) THEN 'LOYALTY COUPON'\n             ELSE pc.category_lvl_1\n        END AS product_codification,\n        apc.category_lvl_1 AS planning_category_1,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0\n             ELSE ROUND(d.price, 2)\n        END AS unit_price, -- to fix in code. Loyalty price should be 0 stored\n        d.quantity,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.product_discount END AS unit_product_discount,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE d.coupon_discount END AS unit_coupon_discount,\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN pc.category_lvl_1 = 'LOYALTY' THEN 0.0\n             ELSE ROUND(d.sub_discount,2)\n        END AS unit_sub_discount, -- to fix in code. Loyalty price should be 0 stored\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN d.product_id IN (-1, -2, -3) THEN o.total_points_discount\n             ELSE d.points_discount\n        END AS unit_points_discount, -- to fix in code. Points discount should be ok on order_details\n        CASE WHEN o.status_id = 3 THEN 0\n             WHEN d.store_discount IS NULL THEN 0\n             ELSE d.store_discount\n        END AS unit_store_discount,\n        b.name AS brand_name,\n        p_brand.post_title AS brand_group, \n        COALESCE(b.attr_group_post_id, 0) = 9687 AS is_in_house,\n        gc.shipping_mode AS gift_card_type,\n        gc.duration AS gift_card_duration,\n        COALESCE(coupons_parents.code, coupons.code) AS order_coupon_code,\n        CASE WHEN o.status_id = 3 THEN 0 ELSE o.total_shipping END AS order_total_shipping_ttc,\n        sm.name AS order_shipping_mode_name,\n        sm.id AS shipping_mode_id,\n        'detail_cancelled' AS detail_valid,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price) AS euro_purchase_price,\n        COALESCE(hc.euro_purchase_price, catalog.euro_purchase_price)*quantity as products_cost,\n        NULL AS bundle_product_id,\n        NULL AS bundle_index,\n        sm.country AS shipping_country,\n        p.selections\n        FROM `teamdata-291012`.`inter`.`orders` o\n        INNER JOIN `teamdata-291012`.`inter`.`partial_cancelations` d ON d.order_id = o.ID AND d.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`products` p ON p.id = d.product_id AND p.dw_country_code = d.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`catalog` ON catalog.product_id = p.id AND catalog.dw_country_code = p.dw_country_code\n        LEFT JOIN catalog_date cd ON DATE(cd.d) = DATE(o.date)\n        LEFT JOIN history_product_catalog hc ON DATE(hc.archive_date) = DATE(cd.archive_date) AND hc.product_id = p.id AND hc.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`nice_names` pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`product`.`categories` apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`brands` b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`order_status` os ON os.id = o.status_id and os.dw_country_code='FR'\n        LEFT JOIN `teamdata-291012`.`inter`.`posts` p_brand ON p_brand.ID = b.attr_group_post_id AND p_brand.dw_country_code = b.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`shipping_modes` sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`gift_cards` gc ON gc.order_detail_id = d.order_detail_id AND gc.dw_country_code = d.dw_country_code -- order_detail_id instead of id for wp_jb_order_details\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons ON coupons.id = o.coupon_code_id AND coupons.dw_country_code = o.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`coupons` coupons_parents ON coupons_parents.id = coupons.parent_id AND coupons_parents.dw_country_code = coupons.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n        LEFT JOIN `teamdata-291012`.`inter`.`da_eu_countries` eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n        WHERE o.status_id IN (1, 3, 4)\n        AND (p.product_codification_id IN (0, 2, 8, 13, 18, 23, 34, 40, 41, 42, 38, 47) OR p.product_codification_id = 28 AND p.special_type = 'GWP')\n    ) t\nLEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = t.shipping_country AND tva.category = 'normal' AND tva.dw_country_code = t.dw_country_code\n\n\n-- SHOP REFUNDS ---------\n\nUNION ALL\n\nSELECT concat(sr.dw_country_code,'_',user_id)as user_key,\n    sr.dw_country_code,\n       order_id,\n       user_id,\n       order_status,\n       is_active_sub,\n       is_first_order,\n       is_first_shop_order,\n       order_date,\n       sr.product_id,\n       sku,\n       product_name,\n       store_code,\n       store_id,\n       vat_rate,\n       product_codification_id,\n       product_codification,\n       planning_category_1,\n       unit_price,\n       quantity,\n       unit_product_discount,\n       unit_coupon_discount,\n       unit_sub_discount,\n       unit_points_discount,\n       unit_store_discount,\n       brand_name,\n       brand_group,\n       is_in_house,\n       gift_card_type,\n       gift_card_duration,\n       order_coupon_code,\n       order_total_shipping_ttc,\n       order_shipping_mode_name,\n       shipping_mode_id,\n       detail_valid,\n       euro_purchase_price,\n       euro_purchase_price*quantity as products_cost,\n       bundle_product_id,\n       bundle_index,\n       shipping_country,\n       sr.selections,\n       year,\n       month,\n       gross_revenue,\n       vat_on_gross_revenue,\n       total_discount,\n       vat_on_total_discount,\n       product_discount,\n       points_discount,\n       coupons_discount,\n       store_discount,\n       sub_discount,\n       order_total_shipping,\n       vat_on_total_shipping,\n       net_revenue,\n       sell_out\nFROM `teamdata-291012`.`sales`.`shop_refunds`sr\nleft join ( select dw_country_code, sku,product_id from `teamdata-291012`.`product`.`catalog`)c on c.product_id=sr.product_id and c.dw_country_code=sr.dw_country_code\n-- -----------------OTHER SHOP REFUNDS ------------------------------------------------\n\nUNION ALL\n\nSELECT \nconcat(t.dw_country_code,'_',t.user_id)as user_key,\nt.dw_country_code,\nt.order_id,\nt.user_id,\nt.order_status,\nt.is_active_sub,\nt.is_first_order,\nt.is_first_shop_order,\nt.order_date,\nt.product_id,\nt.sku,\nt.product_name,\nt.store_code,\nt.store_id,\nt.vat_rate,\n0 AS product_codification_id,\nt.product_codification,\nt.planning_category_1,\nt.unit_price,\n- t.quantity,\nt.unit_product_discount,\nt.unit_coupon_discount,\nt.unit_sub_discount,\nt.unit_points_discount,\nt.unit_store_discount,\nt.brand_name,\nt.brand_group,\nt.is_in_house,\nt.a,\n  0,\nt.order_coupon_code,\n- t.order_total_shipping_ttc,\nt.c,\nt.shipping_mode,\nt.dv,\nt.euro_purchase_price,\nt.products_cost,\nt.bundle_product_id,\nt.bundle_index,\nt.shipping_country,\n'' as selections,\nEXTRACT(YEAR FROM t.order_date) AS year,\nEXTRACT(MONTH FROM t.order_date) AS month,\n- t.total_refunded/(1+vat_rate/100) AS gross_revenue,\n- (vat_rate/100)*t.total_refunded/(1+vat_rate/100) AS vat_on_gross_revenue,\n0 AS total_discount,\n0 AS vat_on_total_discount,\n0,\n0,\n0,\n0,\n0,\n0,\n0,\n- t.total_refunded/(1+vat_rate/100) AS net_revenue,\n- t.total_refunded AS sell_out\nFROM\n(\n    SELECT \n    an.dw_country_code,\n    an.order_id,\n    o.user_id,\n    'refund' AS order_status,\n    o.is_active_sub,\n    o.is_first_order,\n    o.is_first_shop_order,\n    date(an.created_at) AS order_date,    \n    0 AS product_id,\n    '0' as sku,\n    CAST(NULL AS STRING) AS product_name,\n    CASE\n        WHEN o.store_id IN (0,3) OR o.shipping_mode = 32 THEN an.dw_country_code\n        WHEN o.store_id > 0 THEN 'Store'\n    END AS store_code,\n    o.store_id,\n    CASE \n        WHEN o.store_id >= 1 THEN tva.taux\n        WHEN tva.taux IS NOT NULL THEN tva.taux\n        WHEN eu.country_code IS NULL THEN 0\n        ELSE tva.taux\n    END AS vat_rate,\n    0 AS product_codification_id,\n    'ESHOP' AS product_codification,\n    CAST(NULL AS STRING) AS planning_category_1,\n    0 AS unit_price,\n    0 AS quantity,\n    0 AS unit_product_discount,\n    0 AS unit_coupon_discount,\n    0 AS unit_sub_discount,\n    0 AS unit_points_discount,\n    0 AS unit_store_discount,\n    CAST(NULL AS STRING) AS brand_name,\n    CAST(NULL AS STRING) AS brand_group,\n    False As is_in_house,\n    CAST(NULL AS STRING) AS a,\n    CAST(NULL AS STRING) AS order_coupon_code,\n    False AS b,\n    0 AS order_total_shipping_ttc,\n    CAST(NULL AS STRING) AS c,\n    o.shipping_mode,\n    'other refunds' AS dv,\n    0 AS euro_purchase_price,\n    0 products_cost,\n    0 AS bundle_product_id,\n    0 AS bundle_index,\n    o.shipping_country,\n    EXTRACT(YEAR FROM an.created_at) AS year,\n    1.0*an.value/100 AS total_refunded\n    FROM (SELECT distinct dw_country_code,\n                 created_at,\n                 order_id,\n                 eventCode,\n                 sub_id,\n                 value\n          FROM (\n            SELECT dw_country_code,\n                   created_at,\n                   order_id,\n                   eventCode,\n                   sub_id,\n                   value,\n                   ROW_NUMBER() OVER (PARTITION BY dw_country_code, pspReference ORDER BY eventDate DESC) rn\n            FROM `teamdata-291012`.`inter`.`adyen_notifications`\n            WHERE success = 1\n          )\n          WHERE rn = 1) an\n    INNER JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = an.order_id AND o.dw_country_code = an.dw_country_code\n    LEFT JOIN `teamdata-291012`.`sales`.`shop_refunds` AS sr ON sr.order_id = an.order_id AND sr.dw_country_code = an.dw_country_code\n    LEFT JOIN `teamdata-291012`.`sales`.`box_refunds` AS br ON br.sub_id = an.sub_id AND br.dw_country_code = an.dw_country_code\n    LEFT JOIN `teamdata-291012`.`sales`.`box_refunds` AS br2 ON br2.order_id = an.order_id AND br2.dw_country_code = an.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`shipping_modes` sm ON sm.id = o.shipping_mode AND sm.dw_country_code = o.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tva ON tva.country_code = sm.country AND tva.category = 'normal' AND tva.dw_country_code = sm.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`da_eu_countries` eu ON sm.country = eu.country_code AND sm.dw_country_code = eu.dw_country_code\n    WHERE an.eventCode IN ('REFUND', 'CANCEL_OR_REFUND')\n    AND an.created_at >= '2021-01-01'\n    AND sr.order_id IS NULL\n    AND br.sub_id IS NULL\n    AND br2.order_id IS NULL\n) t", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_committed_not_paid": {"database": "teamdata-291012", "schema": "sales", "name": "box_committed_not_paid", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_committed_not_paid.sql", "original_file_path": "models/dwh/sales/box_committed_not_paid.sql", "unique_id": "model.warehouse.box_committed_not_paid", "fqn": ["warehouse", "dwh", "sales", "box_committed_not_paid"], "alias": "box_committed_not_paid", "checksum": {"name": "sha256", "checksum": "6cfbd235c04f0841001e9742d0adb00cd28bd4438b8f2ad22f1d68410c8235ae"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.728798, "relation_name": "`teamdata-291012`.`sales`.`box_committed_not_paid`", "raw_code": "SELECT o.dw_country_code, o.user_id, s.box_id, b.date\nFROM {{ ref('orders') }} o\nINNER JOIN {{ ref('order_details') }} d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nINNER JOIN {{ ref('order_detail_sub') }} s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\nINNER JOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN sales.box_sales bs ON bs.dw_country_code = o.dw_country_code AND bs.user_id = o.user_id AND bs.box_id = s.box_id\nLEFT JOIN sales.box_paused bp ON bp.dw_country_code = o.dw_country_code AND bp.user_id = o.user_id AND bp.box_id = s.box_id\nWHERE o.status_id IN (1,3) \nAND s.cannot_suspend = 1\nAND bs.user_id IS NULL\nAND bp.user_id IS NULL\nGROUP BY ALL", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.orders", "model.warehouse.order_details", "model.warehouse.order_detail_sub", "model.warehouse.boxes"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_committed_not_paid.sql", "compiled": true, "compiled_code": "SELECT o.dw_country_code, o.user_id, s.box_id, b.date\nFROM `teamdata-291012`.`inter`.`orders` o\nINNER JOIN `teamdata-291012`.`inter`.`order_details` d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN sales.box_sales bs ON bs.dw_country_code = o.dw_country_code AND bs.user_id = o.user_id AND bs.box_id = s.box_id\nLEFT JOIN sales.box_paused bp ON bp.dw_country_code = o.dw_country_code AND bp.user_id = o.user_id AND bp.box_id = s.box_id\nWHERE o.status_id IN (1,3) \nAND s.cannot_suspend = 1\nAND bs.user_id IS NULL\nAND bp.user_id IS NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_acquisition_daily": {"database": "teamdata-291012", "schema": "sales", "name": "box_acquisition_daily", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_acquisition_daily.sql", "original_file_path": "models/dwh/sales/box_acquisition_daily.sql", "unique_id": "model.warehouse.box_acquisition_daily", "fqn": ["warehouse", "dwh", "sales", "box_acquisition_daily"], "alias": "box_acquisition_daily", "checksum": {"name": "sha256", "checksum": "2f9afd2fe1642c61ed7f36dad1051bbbaf04d3ab8ab37ea53835e9a81ed835b0"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.7303832, "relation_name": "`teamdata-291012`.`sales`.`box_acquisition_daily`", "raw_code": "SELECT dw_country_code,\n       year,\n       month,\n       FORMAT_DATE('%Y-%m', date) AS m,\n       box_id,\n       payment_date,\n       shipping_date AS openning_cycle_date,\n       DATE_DIFF(payment_date, shipping_date, DAY) + 1 AS nb_days_since_opening, \n       sub_type,\n       COUNT(*) AS nb_subs\nFROM\n(\n    SELECT bs.dw_country_code,\n           bs.year,\n           bs.month,\n           DATE(bs.payment_date) AS payment_date,\n           b.shipping_date,\n           bs.sub_id, \n           bs.user_id,\n           bs.box_id,\n           bs.date,\n           CASE WHEN MAX(bs1.box_id) = bs.box_id - 1 THEN 'react m-1'\n                WHEN bs.gift = 1 THEN 'acquis gift'\n                WHEN bs1.user_id > 0 THEN 'react self'\n                ELSE 'acquis self'\n           END AS sub_type\n    FROM {{ ref('box_sales') }} bs\n    LEFT JOIN {{ ref('box_sales') }} bs1 ON bs.dw_country_code = bs1.dw_country_code AND bs1.user_id = bs.user_id AND bs1.box_id < bs.box_id\n    INNER JOIN {{ ref('boxes') }} b ON bs.dw_country_code = b.dw_country_code AND b.id = bs.box_id\n    WHERE bs.payment_date >= b.shipping_date\n    AND bs.payment_status = 'paid'\n    GROUP BY bs.dw_country_code,\n             bs.year,\n             bs.month,\n             bs.date,\n             bs.sub_id,\n             bs.payment_date,\n             bs.user_id,\n             bs.box_id,\n             b.shipping_date,\n             bs.gift,\n             bs1.user_id\n) t\nWHERE sub_type <> 'react m-1'\nGROUP BY dw_country_code,\n         year,\n         month,\n         box_id,\n         shipping_date,\n         payment_date,\n         sub_type,\n         m", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_sales", "model.warehouse.boxes"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_acquisition_daily.sql", "compiled": true, "compiled_code": "SELECT dw_country_code,\n       year,\n       month,\n       FORMAT_DATE('%Y-%m', date) AS m,\n       box_id,\n       payment_date,\n       shipping_date AS openning_cycle_date,\n       DATE_DIFF(payment_date, shipping_date, DAY) + 1 AS nb_days_since_opening, \n       sub_type,\n       COUNT(*) AS nb_subs\nFROM\n(\n    SELECT bs.dw_country_code,\n           bs.year,\n           bs.month,\n           DATE(bs.payment_date) AS payment_date,\n           b.shipping_date,\n           bs.sub_id, \n           bs.user_id,\n           bs.box_id,\n           bs.date,\n           CASE WHEN MAX(bs1.box_id) = bs.box_id - 1 THEN 'react m-1'\n                WHEN bs.gift = 1 THEN 'acquis gift'\n                WHEN bs1.user_id > 0 THEN 'react self'\n                ELSE 'acquis self'\n           END AS sub_type\n    FROM `teamdata-291012`.`sales`.`box_sales` bs\n    LEFT JOIN `teamdata-291012`.`sales`.`box_sales` bs1 ON bs.dw_country_code = bs1.dw_country_code AND bs1.user_id = bs.user_id AND bs1.box_id < bs.box_id\n    INNER JOIN `teamdata-291012`.`inter`.`boxes` b ON bs.dw_country_code = b.dw_country_code AND b.id = bs.box_id\n    WHERE bs.payment_date >= b.shipping_date\n    AND bs.payment_status = 'paid'\n    GROUP BY bs.dw_country_code,\n             bs.year,\n             bs.month,\n             bs.date,\n             bs.sub_id,\n             bs.payment_date,\n             bs.user_id,\n             bs.box_id,\n             b.shipping_date,\n             bs.gift,\n             bs1.user_id\n) t\nWHERE sub_type <> 'react m-1'\nGROUP BY dw_country_code,\n         year,\n         month,\n         box_id,\n         shipping_date,\n         payment_date,\n         sub_type,\n         m", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_sales_by_user_by_type": {"database": "teamdata-291012", "schema": "sales", "name": "box_sales_by_user_by_type", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_sales_by_user_by_type.sql", "original_file_path": "models/dwh/sales/box_sales_by_user_by_type.sql", "unique_id": "model.warehouse.box_sales_by_user_by_type", "fqn": ["warehouse", "dwh", "sales", "box_sales_by_user_by_type"], "alias": "box_sales_by_user_by_type", "checksum": {"name": "sha256", "checksum": "e4ba27e2365385d3f118d8ba9b7d66b84c4547081e64a402f60b6b353981ccba"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "view", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "ignore"}, "created_at": 1759995463.7319412, "relation_name": "`teamdata-291012`.`sales`.`box_sales_by_user_by_type`", "raw_code": "{{ config(\n    materialized='view',\n    on_schema_change='ignore'\n) }}\n\nWITH ranked_sub_history AS\n(\n  SELECT o.dw_country_code, o.user_id, sh.box_id, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',sh.timestamp) AS d,\n  CASE \n    WHEN ssr.value IN ('Too many fails','Card expired', 'Breakage') THEN 'technical'\n    WHEN ssr.value IN ('Self suspended', 'Paused', 'Paused for gift') THEN 'self-willed'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl1, \n  CASE \n    WHEN ssr.value ='Card expired' THEN 'expired card'\n    WHEN ssr.value IN ('Self suspended') THEN 'suspended'\n    WHEN ssr.value IN ('Paused', 'Paused for gift') THEN 'paused'\n    WHEN ssr.value IN ('Too many fails','Breakage') THEN 'breakage'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl2, \n  'reason from survey' AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, sh.box_id, sh.dw_country_code ORDER BY timestamp DESC) AS row_num\n  FROM {{ ref('sub_history') }} sh\n  JOIN {{ ref('order_detail_sub') }} s ON s.order_detail_id = sh.order_detail_id AND s.box_id = sh.box_id AND sh.dw_country_code = s.dw_country_code\n  JOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN {{ ref('orders') }} o ON o.id = d.order_id AND d.dw_country_code = o.dw_country_code\n  JOIN `inter.sub_suspended_reasons` ssr ON ssr.dw_country_code = sh.dw_country_code AND ssr.id = sh.sub_suspended_reasons_id\n  \n  AND sh.action = -1\n  \n),\nsub_history_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM ranked_sub_history\n  WHERE row_num = 1\n),\nadyen_ranked AS\n(\n  SELECT an.dw_country_code, o.user_id, s.box_id, \n  FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',an.eventDate) as d,\n  'technical' AS sub_suspended_reason_lvl1,\n  CASE WHEN an.reason LIKE '%xpired%' THEN 'expired card' ELSE 'breakage' END AS sub_suspended_reason_lvl2,\n  an.reason AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, s.box_id, s.dw_country_code ORDER BY an.eventDate DESC) AS row_num\n  FROM {{ ref('adyen_notifications') }} an\n  JOIN {{ ref('order_detail_sub') }} s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\n  JOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN {{ ref('orders') }} o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n  WHERE an.success = 0\n  \n),\nadyen_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM adyen_ranked\n  WHERE row_num = 1\n),\nall_reasons AS\n(\n   SELECT sr.*\n  FROM sub_history_reasons sr\n  LEFT JOIN adyen_reasons an ON an.dw_country_code = sr.dw_country_code AND an.user_id = sr.user_id AND an.box_id = sr.box_id\n  WHERE an.user_id IS NULL\n  UNION ALL\n  SELECT *\n  FROM adyen_reasons an \n),\nall_reasons_ranked AS\n(\n  SELECT dw_country_code, user_id, box_id, sub_suspended_reason_lvl1, sub_suspended_reason_lvl2, sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY user_id, box_id, dw_country_code ORDER BY d DESC) AS row_num\n  FROM all_reasons\n),\nself_churn_reason AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM all_reasons_ranked\n  WHERE row_num = 1\n)\n\n\nSELECT t.*, \nCASE \n  WHEN diff < 0 AND type LIKE 'GIFT%'  THEN 'gift end'\n  WHEN diff < 0 THEN COALESCE(scr.sub_suspended_reason_lvl1, 'self-willed')\n  ELSE NULL END\nAS sub_suspended_reason_lvl1,\nCASE \n  WHEN diff < 0 AND type LIKE 'GIFT%'  THEN 'gift end'\n  WHEN diff < 0 THEN COALESCE(scr.sub_suspended_reason_lvl2, 'suspended')\n  ELSE NULL END\nAS sub_suspended_reason_lvl2,\nCASE \n  WHEN diff < 0 AND type LIKE 'GIFT%'  THEN type\n  WHEN diff < 0 THEN COALESCE(scr.sub_suspended_reason_lvl3, 'suspended')\n  ELSE NULL END\nAS sub_suspended_reason_lvl3\n\nFROM\n(\n  SELECT COALESCE(m.dw_country_code, m_1.dw_country_code) AS dw_country_code,\n        COALESCE(m.box_id, m_1.box_id + 1) AS box_id,\n        COALESCE(m.year, m_1.year) AS year,\n        COALESCE(m.month, m_1.month) AS month,\n        COALESCE(m.box_month, m_1.box_month) AS box_month,\n        COALESCE(m.user_id, m_1.user_id) AS user_id,\n        COALESCE(m.self, m_1.self) AS self,\n        COALESCE(m.gift, m_1.gift) AS gift,\n        COALESCE(m.type, m_1.type) as type,\n        COALESCE(m.nb, 0) as m_nb,\n        COALESCE(m_1.nb, 0) as m_1_nb,\n        COALESCE(m.new_sub, 0) AS new_sub,\n        COALESCE(m.nb, 0) - COALESCE(m_1.nb, 0) AS diff,\n        payment_date\n  FROM\n  (\n    SELECT bs.dw_country_code,\n          bs.box_id,\n          bs.year,\n          bs.month,\n          bs.user_id,\n          FORMAT_DATE('%Y-%m', bs.date)  as box_month,\n          bs.self,\n          bs.gift,\n          CASE WHEN bs.yearly = 1 OR bs.old_yearly = 1 THEN 'yearly'\n                WHEN gift = 1 THEN 'GIFT ' || bs.dquantity\n                ELSE 'self'\n          END AS type,\n          CASE WHEN bs.box_id = first_box.first_box THEN 1\n                ELSE 0\n          END AS new_sub,\n          MAX(bs.payment_date) AS payment_date,\n          COUNT(*) AS nb\n    FROM {{ ref('box_sales') }} bs\n    LEFT JOIN\n    (\n        SELECT dw_country_code,\n              user_id,\n              MIN(box_id) AS first_box\n        FROM {{ ref('box_sales') }} bs\n        GROUP BY dw_country_code,\n                user_id\n    ) first_box ON first_box.dw_country_code = bs.dw_country_code AND first_box.user_id = bs.user_id\n    GROUP BY bs.dw_country_code,\n            bs.box_id,\n            bs.year,\n            bs.month,\n            bs.user_id,\n            bs.self,\n            bs.gift,\n            type,\n            new_sub,\n            bs.date\n  ) m\n\n  FULL OUTER JOIN \n\n  (\n    SELECT bs.dw_country_code,\n          bs.box_id,\n          extract(year from b.date) as year,\n          extract(month from b.date) AS month,\n          FORMAT_DATE('%Y-%m', b.date)  as box_month,\n          bs.user_id,\n          bs.self,\n          bs.gift,   \n          CASE WHEN bs.yearly = 1 OR bs.old_yearly = 1 THEN 'yearly'\n              WHEN gift = 1 THEN 'GIFT ' || bs.dquantity\n              ELSE 'self'\n          END AS type,\n          COUNT(*) as nb\n    FROM {{ ref('box_sales') }} bs\n    JOIN {{ ref('boxes') }} b ON b.id = bs.box_id + 1 AND b.dw_country_code = bs.dw_country_code\n    GROUP BY bs.dw_country_code,\n            bs.box_id,\n            bs.year,\n            bs.month,\n            bs.user_id,\n            bs.self,\n            bs.gift,\n            type,\n            b.date\n  ) m_1 ON m_1.dw_country_code = m.dw_country_code AND m_1.user_id = m.user_id AND m.box_id - 1 = m_1.box_id\n) t\nLEFT JOIN self_churn_reason scr ON scr.dw_country_code = t.dw_country_code AND scr.user_id = t.user_id AND scr.box_id = t.box_id", "language": "sql", "refs": [{"name": "sub_history", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "adyen_notifications", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.sub_history", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.adyen_notifications", "model.warehouse.box_sales", "model.warehouse.boxes"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_sales_by_user_by_type.sql", "compiled": true, "compiled_code": "\n\nWITH ranked_sub_history AS\n(\n  SELECT o.dw_country_code, o.user_id, sh.box_id, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',sh.timestamp) AS d,\n  CASE \n    WHEN ssr.value IN ('Too many fails','Card expired', 'Breakage') THEN 'technical'\n    WHEN ssr.value IN ('Self suspended', 'Paused', 'Paused for gift') THEN 'self-willed'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl1, \n  CASE \n    WHEN ssr.value ='Card expired' THEN 'expired card'\n    WHEN ssr.value IN ('Self suspended') THEN 'suspended'\n    WHEN ssr.value IN ('Paused', 'Paused for gift') THEN 'paused'\n    WHEN ssr.value IN ('Too many fails','Breakage') THEN 'breakage'\n    ELSE NULL\n  END AS sub_suspended_reason_lvl2, \n  'reason from survey' AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, sh.box_id, sh.dw_country_code ORDER BY timestamp DESC) AS row_num\n  FROM `teamdata-291012`.`inter`.`sub_history` sh\n  JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.order_detail_id = sh.order_detail_id AND s.box_id = sh.box_id AND sh.dw_country_code = s.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = d.order_id AND d.dw_country_code = o.dw_country_code\n  JOIN `inter.sub_suspended_reasons` ssr ON ssr.dw_country_code = sh.dw_country_code AND ssr.id = sh.sub_suspended_reasons_id\n  \n  AND sh.action = -1\n  \n),\nsub_history_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM ranked_sub_history\n  WHERE row_num = 1\n),\nadyen_ranked AS\n(\n  SELECT an.dw_country_code, o.user_id, s.box_id, \n  FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S',an.eventDate) as d,\n  'technical' AS sub_suspended_reason_lvl1,\n  CASE WHEN an.reason LIKE '%xpired%' THEN 'expired card' ELSE 'breakage' END AS sub_suspended_reason_lvl2,\n  an.reason AS sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY o.user_id, s.box_id, s.dw_country_code ORDER BY an.eventDate DESC) AS row_num\n  FROM `teamdata-291012`.`inter`.`adyen_notifications` an\n  JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = an.sub_id AND s.dw_country_code = an.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\n  WHERE an.success = 0\n  \n),\nadyen_reasons AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM adyen_ranked\n  WHERE row_num = 1\n),\nall_reasons AS\n(\n   SELECT sr.*\n  FROM sub_history_reasons sr\n  LEFT JOIN adyen_reasons an ON an.dw_country_code = sr.dw_country_code AND an.user_id = sr.user_id AND an.box_id = sr.box_id\n  WHERE an.user_id IS NULL\n  UNION ALL\n  SELECT *\n  FROM adyen_reasons an \n),\nall_reasons_ranked AS\n(\n  SELECT dw_country_code, user_id, box_id, sub_suspended_reason_lvl1, sub_suspended_reason_lvl2, sub_suspended_reason_lvl3,\n  ROW_NUMBER() OVER (PARTITION BY user_id, box_id, dw_country_code ORDER BY d DESC) AS row_num\n  FROM all_reasons\n),\nself_churn_reason AS\n(\n  SELECT * EXCEPT(row_num)\n  FROM all_reasons_ranked\n  WHERE row_num = 1\n)\n\n\nSELECT t.*, \nCASE \n  WHEN diff < 0 AND type LIKE 'GIFT%'  THEN 'gift end'\n  WHEN diff < 0 THEN COALESCE(scr.sub_suspended_reason_lvl1, 'self-willed')\n  ELSE NULL END\nAS sub_suspended_reason_lvl1,\nCASE \n  WHEN diff < 0 AND type LIKE 'GIFT%'  THEN 'gift end'\n  WHEN diff < 0 THEN COALESCE(scr.sub_suspended_reason_lvl2, 'suspended')\n  ELSE NULL END\nAS sub_suspended_reason_lvl2,\nCASE \n  WHEN diff < 0 AND type LIKE 'GIFT%'  THEN type\n  WHEN diff < 0 THEN COALESCE(scr.sub_suspended_reason_lvl3, 'suspended')\n  ELSE NULL END\nAS sub_suspended_reason_lvl3\n\nFROM\n(\n  SELECT COALESCE(m.dw_country_code, m_1.dw_country_code) AS dw_country_code,\n        COALESCE(m.box_id, m_1.box_id + 1) AS box_id,\n        COALESCE(m.year, m_1.year) AS year,\n        COALESCE(m.month, m_1.month) AS month,\n        COALESCE(m.box_month, m_1.box_month) AS box_month,\n        COALESCE(m.user_id, m_1.user_id) AS user_id,\n        COALESCE(m.self, m_1.self) AS self,\n        COALESCE(m.gift, m_1.gift) AS gift,\n        COALESCE(m.type, m_1.type) as type,\n        COALESCE(m.nb, 0) as m_nb,\n        COALESCE(m_1.nb, 0) as m_1_nb,\n        COALESCE(m.new_sub, 0) AS new_sub,\n        COALESCE(m.nb, 0) - COALESCE(m_1.nb, 0) AS diff,\n        payment_date\n  FROM\n  (\n    SELECT bs.dw_country_code,\n          bs.box_id,\n          bs.year,\n          bs.month,\n          bs.user_id,\n          FORMAT_DATE('%Y-%m', bs.date)  as box_month,\n          bs.self,\n          bs.gift,\n          CASE WHEN bs.yearly = 1 OR bs.old_yearly = 1 THEN 'yearly'\n                WHEN gift = 1 THEN 'GIFT ' || bs.dquantity\n                ELSE 'self'\n          END AS type,\n          CASE WHEN bs.box_id = first_box.first_box THEN 1\n                ELSE 0\n          END AS new_sub,\n          MAX(bs.payment_date) AS payment_date,\n          COUNT(*) AS nb\n    FROM `teamdata-291012`.`sales`.`box_sales` bs\n    LEFT JOIN\n    (\n        SELECT dw_country_code,\n              user_id,\n              MIN(box_id) AS first_box\n        FROM `teamdata-291012`.`sales`.`box_sales` bs\n        GROUP BY dw_country_code,\n                user_id\n    ) first_box ON first_box.dw_country_code = bs.dw_country_code AND first_box.user_id = bs.user_id\n    GROUP BY bs.dw_country_code,\n            bs.box_id,\n            bs.year,\n            bs.month,\n            bs.user_id,\n            bs.self,\n            bs.gift,\n            type,\n            new_sub,\n            bs.date\n  ) m\n\n  FULL OUTER JOIN \n\n  (\n    SELECT bs.dw_country_code,\n          bs.box_id,\n          extract(year from b.date) as year,\n          extract(month from b.date) AS month,\n          FORMAT_DATE('%Y-%m', b.date)  as box_month,\n          bs.user_id,\n          bs.self,\n          bs.gift,   \n          CASE WHEN bs.yearly = 1 OR bs.old_yearly = 1 THEN 'yearly'\n              WHEN gift = 1 THEN 'GIFT ' || bs.dquantity\n              ELSE 'self'\n          END AS type,\n          COUNT(*) as nb\n    FROM `teamdata-291012`.`sales`.`box_sales` bs\n    JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = bs.box_id + 1 AND b.dw_country_code = bs.dw_country_code\n    GROUP BY bs.dw_country_code,\n            bs.box_id,\n            bs.year,\n            bs.month,\n            bs.user_id,\n            bs.self,\n            bs.gift,\n            type,\n            b.date\n  ) m_1 ON m_1.dw_country_code = m.dw_country_code AND m_1.user_id = m.user_id AND m.box_id - 1 = m_1.box_id\n) t\nLEFT JOIN self_churn_reason scr ON scr.dw_country_code = t.dw_country_code AND scr.user_id = t.user_id AND scr.box_id = t.box_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.kpi_box": {"database": "teamdata-291012", "schema": "sales", "name": "kpi_box", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/kpi_box.sql", "original_file_path": "models/dwh/sales/kpi_box.sql", "unique_id": "model.warehouse.kpi_box", "fqn": ["warehouse", "dwh", "sales", "kpi_box"], "alias": "kpi_box", "checksum": {"name": "sha256", "checksum": "9c49d03b5fabbc8d92b639973bc476f5e3faa27964ea8e2d153d5cbe0c43b9f4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.733682, "relation_name": "`teamdata-291012`.`sales`.`kpi_box`", "raw_code": "WITH boxes_total AS\n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM {{ ref('box_sales') }} as bs\n  WHERE 1=1\n  GROUP BY dw_country_code, year, month\n),\nboxes_shipped AS \n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM {{ ref('box_sales') }} as bs\n  WHERE 1=1\n  AND bs.payment_status = 'paid'\n  GROUP BY dw_country_code, year, month\n),\nboxes_forthcoming AS\n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM {{ ref('box_sales') }} as bs\n  WHERE 1=1\n  AND bs.payment_status = 'forthcoming'\n  GROUP BY dw_country_code, year, month\n),\nboxes_free AS\n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM {{ ref('box_sales') }} as bs\n  WHERE 1=1\n  AND bs.payment_status = 'paid'\n  AND bs.sub_payment_status_id = 8\n  GROUP BY dw_country_code, year, month\n),\nboxes_reexp AS\n(\n  SELECT bs.dw_country_code, bs.year, bs.month, count(distinct bs.sub_id) AS value\n  FROM {{ ref('tags') }} ta\n  JOIN {{ ref('box_sales') }} bs ON bs.sub_id = ta.link_id AND ta.type = 'SUB' AND ta.dw_country_code = bs.dw_country_code\n  WHERE 1=1\n  GROUP BY bs.dw_country_code, bs.year, bs.month\n),\nall_subs_for_churn AS \n(\n\n  SELECT bsbu.dw_country_code, bsbu.box_month,\n  SUM(bsbu.m_nb) nb_subs,\n  SUM(bsbu.m_1_nb) nb_subs_lm\n  FROM {{ ref('box_sales_by_user_by_type') }} bsbu\n--   WHERE bsbu.type NOT LIKE 'GIFT%'\n  GROUP BY bsbu.dw_country_code, bsbu.box_month\n\n),\nchurn AS\n(\n  \nSELECT bsbu.dw_country_code, bsbu.box_month , -- bsbu.sub_suspended_reason_lvl1,\nSUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END) AS nb_churn,\nmax(subs.nb_subs_lm)  AS nb_subs_last_month,\nSAFE_DIVIDE(SUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END),max(subs.nb_subs_lm)) AS total_churn\nFROM {{ ref('box_sales_by_user_by_type') }} bsbu\nJOIN all_subs_for_churn AS subs ON subs.dw_country_code = bsbu.dw_country_code AND bsbu.box_month = subs.box_month\nWHERE 1=1\nAND bsbu.diff < 0\nGROUP BY bsbu.dw_country_code, bsbu.box_month-- , bsbu.sub_suspended_reason_lvl1\n\n),\nall_subs_for_self_churn AS \n(\n\n  SELECT bsbu.dw_country_code, bsbu.box_month, \n  CASE WHEN bsbu.type LIKE 'GIFT%' THEN 'gift' ELSE 'self' END As sub_type,\n  SUM(bsbu.m_nb) nb_subs,\n  SUM(bsbu.m_1_nb) nb_subs_lm\n  FROM {{ ref('box_sales_by_user_by_type') }} bsbu\n   \n  GROUP BY bsbu.dw_country_code, bsbu.box_month, sub_type\n\n),\nself_churn AS\n(\n SELECT bsbu.dw_country_code, bsbu.box_month, bsbu.sub_suspended_reason_lvl1,\nSUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END) AS nb_churn,\nmax(subs.nb_subs_lm)  AS nb_subs_last_month,\nSAFE_DIVIDE(SUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END),max(subs.nb_subs_lm)) AS total_churn\nFROM {{ ref('box_sales_by_user_by_type') }} bsbu\nJOIN all_subs_for_self_churn AS subs ON subs.dw_country_code = bsbu.dw_country_code AND bsbu.box_month = subs.box_month AND subs.sub_type = 'self'\nWHERE 1=1\nAND bsbu.diff < 0\nAND bsbu.type NOT LIKE 'GIFT%'\nGROUP BY bsbu.dw_country_code, bsbu.box_month , bsbu.sub_suspended_reason_lvl1\n\n),\n\ngift_churn AS\n(\n SELECT bsbu.dw_country_code, bsbu.box_month, bsbu.sub_suspended_reason_lvl1,\nSUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END) AS nb_churn,\nmax(subs.nb_subs_lm)  AS nb_subs_last_month,\nSAFE_DIVIDE(SUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END),max(subs.nb_subs_lm)) AS total_churn\nFROM {{ ref('box_sales_by_user_by_type') }} bsbu\nJOIN all_subs_for_self_churn AS subs ON subs.dw_country_code = bsbu.dw_country_code AND bsbu.box_month = subs.box_month AND subs.sub_type <> 'self'\nWHERE 1=1\nAND bsbu.diff < 0\nAND bsbu.type LIKE 'GIFT%'\nGROUP BY bsbu.dw_country_code, bsbu.box_month , bsbu.sub_suspended_reason_lvl1\n\n),\n\nacquis AS \n(\n  SELECT dw_country_code, year, month, \n  SUM(CASE WHEN gift = 1 THEN diff ELSE 0 END) AS gift,\n  SUM(CASE WHEN self = 1 AND new_sub = 1 THEN diff ELSE 0 END) AS new_new,\n  SUM(CASE WHEN self = 1 AND new_sub = 0 THEN diff ELSE 0 END) AS reactivation\n  FROM {{ ref('box_sales_by_user_by_type') }}\n  WHERE diff > 0\n  GROUP BY dw_country_code, year, month\n),\n\nall_boxes as \n(\n  SELECT b.dw_country_code, id as box_id, extract(year from b.date) as year, extract(month from b.date) AS month, format_date('%Y-%m', b.date) AS box_month, CASE WHEN b.shipping_status_id = 2 THEN true ELSE false END AS is_current, \n  b.id - cb.current_box_id AS diff_current_box\n  FROM {{ ref('boxes') }} b\n  JOIN {{ ref('current_box') }} cb ON cb.dw_country_code = b.dw_country_code\n  ORDER BY b.dw_country_code, b.date\n)\n\n\nSELECT all_boxes.dw_country_code, all_boxes.year, all_boxes.month, is_current, all_boxes.box_month, all_boxes.box_id,all_boxes.diff_current_box,\nboxes_total.value AS box_total,\nboxes_shipped.value AS box_shipped,\nboxes_forthcoming.value AS box_forthcoming,\nboxes_free.value AS box_free,\nboxes_reexp.value AS box_reexp,\n\nchurn.nb_churn AS churn_nb_total,\nchurn.nb_subs_last_month AS total_last_box,\nchurn.total_churn AS churn_rate_total,\nself_suspended.nb_churn AS churn_self_willed_nb,\nself_suspended.nb_subs_last_month AS nb_self_subs_last_month,\nself_suspended.total_churn AS churn_rate_self_willed,\nSUM(self_tech.nb_churn) AS churn_self_tech_nb,\nSUM(self_tech.total_churn) AS churn_rate_self_tech,\ngift_churn.nb_churn AS churn_gift_nb,\ngift_churn.nb_subs_last_month AS nb_gift_subs_last_month,\ngift_churn.total_churn AS churn_rate_gift,\nacquis.new_new + acquis.reactivation + acquis.gift AS acquis_total,\nacquis.new_new AS acquis_new_new,\nacquis.reactivation AS acquis_reactivation,\nacquis.gift AS acquis_gift\n\n\n\nFROM all_boxes\nLEFT JOIN boxes_total ON all_boxes.dw_country_code = boxes_total.dw_country_code AND all_boxes.year = boxes_total.year AND all_boxes.month = boxes_total.month\nLEFT JOIN boxes_shipped ON all_boxes.dw_country_code = boxes_shipped.dw_country_code AND all_boxes.year = boxes_shipped.year AND all_boxes.month = boxes_shipped.month\nLEFT JOIN boxes_forthcoming ON all_boxes.dw_country_code = boxes_forthcoming.dw_country_code AND all_boxes.year = boxes_forthcoming.year AND all_boxes.month = boxes_forthcoming.month\nLEFT JOIN boxes_free ON all_boxes.dw_country_code = boxes_free.dw_country_code AND all_boxes.year = boxes_free.year AND all_boxes.month = boxes_free.month\nLEFT JOIN boxes_reexp ON all_boxes.dw_country_code = boxes_reexp.dw_country_code AND all_boxes.year = boxes_reexp.year AND all_boxes.month = boxes_reexp.month\nLEFT JOIN churn ON all_boxes.dw_country_code = churn.dw_country_code AND all_boxes.box_month = churn.box_month\nLEFT JOIN self_churn self_suspended ON all_boxes.dw_country_code = self_suspended.dw_country_code AND all_boxes.box_month = self_suspended.box_month AND self_suspended.sub_suspended_reason_lvl1 = 'self-willed'\nLEFT JOIN self_churn self_tech ON all_boxes.dw_country_code = self_tech.dw_country_code AND all_boxes.box_month = self_tech.box_month AND  self_tech.sub_suspended_reason_lvl1 = 'technical'\nLEFT JOIN gift_churn  ON all_boxes.dw_country_code = gift_churn.dw_country_code AND all_boxes.box_month = gift_churn.box_month \nLEFT JOIN acquis ON acquis.dw_country_code = all_boxes.dw_country_code AND acquis.year = all_boxes.year AND acquis.month = all_boxes.month\n\nGROUP BY \nall_boxes.dw_country_code, all_boxes.year, all_boxes.month, is_current, all_boxes.box_month, all_boxes.box_id, all_boxes.diff_current_box,\nbox_total,\nbox_shipped,\nbox_forthcoming,\nbox_free,\nbox_reexp,\nchurn.nb_churn,\nchurn.nb_subs_last_month,\nchurn.total_churn,\nself_suspended.nb_churn,\nself_suspended.nb_subs_last_month,\nself_suspended.total_churn,\nchurn_gift_nb,\nnb_gift_subs_last_month,\nchurn_rate_gift,\nacquis.new_new,\nacquis.reactivation,\nacquis.gift\nORDER BY all_boxes.dw_country_code, all_boxes.year, all_boxes.month", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "tags", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales_by_user_by_type", "package": null, "version": null}, {"name": "box_sales_by_user_by_type", "package": null, "version": null}, {"name": "box_sales_by_user_by_type", "package": null, "version": null}, {"name": "box_sales_by_user_by_type", "package": null, "version": null}, {"name": "box_sales_by_user_by_type", "package": null, "version": null}, {"name": "box_sales_by_user_by_type", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "current_box", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_sales", "model.warehouse.tags", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.boxes", "model.warehouse.current_box"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/kpi_box.sql", "compiled": true, "compiled_code": "WITH boxes_total AS\n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM `teamdata-291012`.`sales`.`box_sales` as bs\n  WHERE 1=1\n  GROUP BY dw_country_code, year, month\n),\nboxes_shipped AS \n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM `teamdata-291012`.`sales`.`box_sales` as bs\n  WHERE 1=1\n  AND bs.payment_status = 'paid'\n  GROUP BY dw_country_code, year, month\n),\nboxes_forthcoming AS\n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM `teamdata-291012`.`sales`.`box_sales` as bs\n  WHERE 1=1\n  AND bs.payment_status = 'forthcoming'\n  GROUP BY dw_country_code, year, month\n),\nboxes_free AS\n(\n  SELECT dw_country_code, year, month, count(*) AS value\n  FROM `teamdata-291012`.`sales`.`box_sales` as bs\n  WHERE 1=1\n  AND bs.payment_status = 'paid'\n  AND bs.sub_payment_status_id = 8\n  GROUP BY dw_country_code, year, month\n),\nboxes_reexp AS\n(\n  SELECT bs.dw_country_code, bs.year, bs.month, count(distinct bs.sub_id) AS value\n  FROM `teamdata-291012`.`inter`.`tags` ta\n  JOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.sub_id = ta.link_id AND ta.type = 'SUB' AND ta.dw_country_code = bs.dw_country_code\n  WHERE 1=1\n  GROUP BY bs.dw_country_code, bs.year, bs.month\n),\nall_subs_for_churn AS \n(\n\n  SELECT bsbu.dw_country_code, bsbu.box_month,\n  SUM(bsbu.m_nb) nb_subs,\n  SUM(bsbu.m_1_nb) nb_subs_lm\n  FROM `teamdata-291012`.`sales`.`box_sales_by_user_by_type` bsbu\n--   WHERE bsbu.type NOT LIKE 'GIFT%'\n  GROUP BY bsbu.dw_country_code, bsbu.box_month\n\n),\nchurn AS\n(\n  \nSELECT bsbu.dw_country_code, bsbu.box_month , -- bsbu.sub_suspended_reason_lvl1,\nSUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END) AS nb_churn,\nmax(subs.nb_subs_lm)  AS nb_subs_last_month,\nSAFE_DIVIDE(SUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END),max(subs.nb_subs_lm)) AS total_churn\nFROM `teamdata-291012`.`sales`.`box_sales_by_user_by_type` bsbu\nJOIN all_subs_for_churn AS subs ON subs.dw_country_code = bsbu.dw_country_code AND bsbu.box_month = subs.box_month\nWHERE 1=1\nAND bsbu.diff < 0\nGROUP BY bsbu.dw_country_code, bsbu.box_month-- , bsbu.sub_suspended_reason_lvl1\n\n),\nall_subs_for_self_churn AS \n(\n\n  SELECT bsbu.dw_country_code, bsbu.box_month, \n  CASE WHEN bsbu.type LIKE 'GIFT%' THEN 'gift' ELSE 'self' END As sub_type,\n  SUM(bsbu.m_nb) nb_subs,\n  SUM(bsbu.m_1_nb) nb_subs_lm\n  FROM `teamdata-291012`.`sales`.`box_sales_by_user_by_type` bsbu\n   \n  GROUP BY bsbu.dw_country_code, bsbu.box_month, sub_type\n\n),\nself_churn AS\n(\n SELECT bsbu.dw_country_code, bsbu.box_month, bsbu.sub_suspended_reason_lvl1,\nSUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END) AS nb_churn,\nmax(subs.nb_subs_lm)  AS nb_subs_last_month,\nSAFE_DIVIDE(SUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END),max(subs.nb_subs_lm)) AS total_churn\nFROM `teamdata-291012`.`sales`.`box_sales_by_user_by_type` bsbu\nJOIN all_subs_for_self_churn AS subs ON subs.dw_country_code = bsbu.dw_country_code AND bsbu.box_month = subs.box_month AND subs.sub_type = 'self'\nWHERE 1=1\nAND bsbu.diff < 0\nAND bsbu.type NOT LIKE 'GIFT%'\nGROUP BY bsbu.dw_country_code, bsbu.box_month , bsbu.sub_suspended_reason_lvl1\n\n),\n\ngift_churn AS\n(\n SELECT bsbu.dw_country_code, bsbu.box_month, bsbu.sub_suspended_reason_lvl1,\nSUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END) AS nb_churn,\nmax(subs.nb_subs_lm)  AS nb_subs_last_month,\nSAFE_DIVIDE(SUM(CASE WHEN bsbu.diff < 0 THEN -bsbu.diff ELSE 0 END),max(subs.nb_subs_lm)) AS total_churn\nFROM `teamdata-291012`.`sales`.`box_sales_by_user_by_type` bsbu\nJOIN all_subs_for_self_churn AS subs ON subs.dw_country_code = bsbu.dw_country_code AND bsbu.box_month = subs.box_month AND subs.sub_type <> 'self'\nWHERE 1=1\nAND bsbu.diff < 0\nAND bsbu.type LIKE 'GIFT%'\nGROUP BY bsbu.dw_country_code, bsbu.box_month , bsbu.sub_suspended_reason_lvl1\n\n),\n\nacquis AS \n(\n  SELECT dw_country_code, year, month, \n  SUM(CASE WHEN gift = 1 THEN diff ELSE 0 END) AS gift,\n  SUM(CASE WHEN self = 1 AND new_sub = 1 THEN diff ELSE 0 END) AS new_new,\n  SUM(CASE WHEN self = 1 AND new_sub = 0 THEN diff ELSE 0 END) AS reactivation\n  FROM `teamdata-291012`.`sales`.`box_sales_by_user_by_type`\n  WHERE diff > 0\n  GROUP BY dw_country_code, year, month\n),\n\nall_boxes as \n(\n  SELECT b.dw_country_code, id as box_id, extract(year from b.date) as year, extract(month from b.date) AS month, format_date('%Y-%m', b.date) AS box_month, CASE WHEN b.shipping_status_id = 2 THEN true ELSE false END AS is_current, \n  b.id - cb.current_box_id AS diff_current_box\n  FROM `teamdata-291012`.`inter`.`boxes` b\n  JOIN `teamdata-291012`.`snippets`.`current_box` cb ON cb.dw_country_code = b.dw_country_code\n  ORDER BY b.dw_country_code, b.date\n)\n\n\nSELECT all_boxes.dw_country_code, all_boxes.year, all_boxes.month, is_current, all_boxes.box_month, all_boxes.box_id,all_boxes.diff_current_box,\nboxes_total.value AS box_total,\nboxes_shipped.value AS box_shipped,\nboxes_forthcoming.value AS box_forthcoming,\nboxes_free.value AS box_free,\nboxes_reexp.value AS box_reexp,\n\nchurn.nb_churn AS churn_nb_total,\nchurn.nb_subs_last_month AS total_last_box,\nchurn.total_churn AS churn_rate_total,\nself_suspended.nb_churn AS churn_self_willed_nb,\nself_suspended.nb_subs_last_month AS nb_self_subs_last_month,\nself_suspended.total_churn AS churn_rate_self_willed,\nSUM(self_tech.nb_churn) AS churn_self_tech_nb,\nSUM(self_tech.total_churn) AS churn_rate_self_tech,\ngift_churn.nb_churn AS churn_gift_nb,\ngift_churn.nb_subs_last_month AS nb_gift_subs_last_month,\ngift_churn.total_churn AS churn_rate_gift,\nacquis.new_new + acquis.reactivation + acquis.gift AS acquis_total,\nacquis.new_new AS acquis_new_new,\nacquis.reactivation AS acquis_reactivation,\nacquis.gift AS acquis_gift\n\n\n\nFROM all_boxes\nLEFT JOIN boxes_total ON all_boxes.dw_country_code = boxes_total.dw_country_code AND all_boxes.year = boxes_total.year AND all_boxes.month = boxes_total.month\nLEFT JOIN boxes_shipped ON all_boxes.dw_country_code = boxes_shipped.dw_country_code AND all_boxes.year = boxes_shipped.year AND all_boxes.month = boxes_shipped.month\nLEFT JOIN boxes_forthcoming ON all_boxes.dw_country_code = boxes_forthcoming.dw_country_code AND all_boxes.year = boxes_forthcoming.year AND all_boxes.month = boxes_forthcoming.month\nLEFT JOIN boxes_free ON all_boxes.dw_country_code = boxes_free.dw_country_code AND all_boxes.year = boxes_free.year AND all_boxes.month = boxes_free.month\nLEFT JOIN boxes_reexp ON all_boxes.dw_country_code = boxes_reexp.dw_country_code AND all_boxes.year = boxes_reexp.year AND all_boxes.month = boxes_reexp.month\nLEFT JOIN churn ON all_boxes.dw_country_code = churn.dw_country_code AND all_boxes.box_month = churn.box_month\nLEFT JOIN self_churn self_suspended ON all_boxes.dw_country_code = self_suspended.dw_country_code AND all_boxes.box_month = self_suspended.box_month AND self_suspended.sub_suspended_reason_lvl1 = 'self-willed'\nLEFT JOIN self_churn self_tech ON all_boxes.dw_country_code = self_tech.dw_country_code AND all_boxes.box_month = self_tech.box_month AND  self_tech.sub_suspended_reason_lvl1 = 'technical'\nLEFT JOIN gift_churn  ON all_boxes.dw_country_code = gift_churn.dw_country_code AND all_boxes.box_month = gift_churn.box_month \nLEFT JOIN acquis ON acquis.dw_country_code = all_boxes.dw_country_code AND acquis.year = all_boxes.year AND acquis.month = all_boxes.month\n\nGROUP BY \nall_boxes.dw_country_code, all_boxes.year, all_boxes.month, is_current, all_boxes.box_month, all_boxes.box_id, all_boxes.diff_current_box,\nbox_total,\nbox_shipped,\nbox_forthcoming,\nbox_free,\nbox_reexp,\nchurn.nb_churn,\nchurn.nb_subs_last_month,\nchurn.total_churn,\nself_suspended.nb_churn,\nself_suspended.nb_subs_last_month,\nself_suspended.total_churn,\nchurn_gift_nb,\nnb_gift_subs_last_month,\nchurn_rate_gift,\nacquis.new_new,\nacquis.reactivation,\nacquis.gift\nORDER BY all_boxes.dw_country_code, all_boxes.year, all_boxes.month", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_paused": {"database": "teamdata-291012", "schema": "sales", "name": "box_paused", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/box_paused.sql", "original_file_path": "models/dwh/sales/box_paused.sql", "unique_id": "model.warehouse.box_paused", "fqn": ["warehouse", "dwh", "sales", "box_paused"], "alias": "box_paused", "checksum": {"name": "sha256", "checksum": "cd3e6bc855b413ea80e7720d56d934c9125d4c99e8d215604c5fff9fe1f2c7ad"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.735332, "relation_name": "`teamdata-291012`.`sales`.`box_paused`", "raw_code": "WITH \nbox_paused AS (\n    SELECT o.dw_country_code, o.user_id, s.box_id, b.date\nFROM {{ ref('orders') }} o\nINNER JOIN {{ ref('order_details') }} d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nINNER JOIN {{ ref('order_detail_sub') }} s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\nINNER JOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN sales.box_sales bs ON bs.dw_country_code = o.dw_country_code AND bs.user_id = o.user_id AND bs.box_id = s.box_id\nWHERE o.status_id IN (1,3) \nAND s.shipping_status_id = 12 \nAND bs.user_id IS NULL\nGROUP BY ALL\n),\nuser_boxes AS (\n  SELECT\n    dw_country_code,\n    user_id,\n    box_id,\n    date,\n    ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY date) AS rn\n  FROM box_paused\n),\n\nwith_lag AS (\n  SELECT\n    *,\n    LAG(box_id) OVER (PARTITION BY dw_country_code, user_id ORDER BY rn) AS prev_box_id\n  FROM user_boxes\n),\n\ngrouped_sequences AS (\n  SELECT\n    *,\n    -- D\u00e9marre un nouveau groupe quand la box_id n'est pas cons\u00e9cutive \u00e0 la pr\u00e9c\u00e9dente\n    SUM(CASE WHEN prev_box_id IS NULL OR box_id != prev_box_id + 1 THEN 1 ELSE 0 END)\n      OVER (PARTITION BY dw_country_code, user_id ORDER BY rn) AS seq_group\n  FROM with_lag\n),\n\nsequence_start AS (\n  SELECT\n    dw_country_code,\n    user_id,\n    box_id,\n    date,\n    seq_group,\n    MIN(box_id) OVER (PARTITION BY dw_country_code, user_id, seq_group) AS start_box_of_sequence,\n    MAX(box_id) OVER (PARTITION BY dw_country_code, user_id, seq_group) AS end_box_of_sequence\n  FROM grouped_sequences\n)\nSELECT\n  *,\n  box_id - start_box_of_sequence AS nb_box_since_pause,\n  end_box_of_sequence - box_id AS nb_box_until_end_of_pause\nFROM sequence_start", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.orders", "model.warehouse.order_details", "model.warehouse.order_detail_sub", "model.warehouse.boxes"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/box_paused.sql", "compiled": true, "compiled_code": "WITH \nbox_paused AS (\n    SELECT o.dw_country_code, o.user_id, s.box_id, b.date\nFROM `teamdata-291012`.`inter`.`orders` o\nINNER JOIN `teamdata-291012`.`inter`.`order_details` d ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.order_detail_id = d.id AND s.dw_country_code = d.dw_country_code\nINNER JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN sales.box_sales bs ON bs.dw_country_code = o.dw_country_code AND bs.user_id = o.user_id AND bs.box_id = s.box_id\nWHERE o.status_id IN (1,3) \nAND s.shipping_status_id = 12 \nAND bs.user_id IS NULL\nGROUP BY ALL\n),\nuser_boxes AS (\n  SELECT\n    dw_country_code,\n    user_id,\n    box_id,\n    date,\n    ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY date) AS rn\n  FROM box_paused\n),\n\nwith_lag AS (\n  SELECT\n    *,\n    LAG(box_id) OVER (PARTITION BY dw_country_code, user_id ORDER BY rn) AS prev_box_id\n  FROM user_boxes\n),\n\ngrouped_sequences AS (\n  SELECT\n    *,\n    -- D\u00e9marre un nouveau groupe quand la box_id n'est pas cons\u00e9cutive \u00e0 la pr\u00e9c\u00e9dente\n    SUM(CASE WHEN prev_box_id IS NULL OR box_id != prev_box_id + 1 THEN 1 ELSE 0 END)\n      OVER (PARTITION BY dw_country_code, user_id ORDER BY rn) AS seq_group\n  FROM with_lag\n),\n\nsequence_start AS (\n  SELECT\n    dw_country_code,\n    user_id,\n    box_id,\n    date,\n    seq_group,\n    MIN(box_id) OVER (PARTITION BY dw_country_code, user_id, seq_group) AS start_box_of_sequence,\n    MAX(box_id) OVER (PARTITION BY dw_country_code, user_id, seq_group) AS end_box_of_sequence\n  FROM grouped_sequences\n)\nSELECT\n  *,\n  box_id - start_box_of_sequence AS nb_box_since_pause,\n  end_box_of_sequence - box_id AS nb_box_until_end_of_pause\nFROM sequence_start", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shop_orders_margin": {"database": "teamdata-291012", "schema": "sales", "name": "shop_orders_margin", "resource_type": "model", "package_name": "warehouse", "path": "dwh/sales/shop_orders_margin.sql", "original_file_path": "models/dwh/sales/shop_orders_margin.sql", "unique_id": "model.warehouse.shop_orders_margin", "fqn": ["warehouse", "dwh", "sales", "shop_orders_margin"], "alias": "shop_orders_margin", "checksum": {"name": "sha256", "checksum": "2dc832603692cb91565ad448f878a640f35d9968ba0dcac54287789890ba72a1"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1759995463.736853, "relation_name": "`teamdata-291012`.`sales`.`shop_orders_margin`", "raw_code": "SELECT orders.*, \n       sc.price AS shipping_transport_cost,\n       orders.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n       (1 + orders.shipping_taxes_rate) * sc.price + 0.07 AS shipping_cost, -- ship up costs 0.07\u20ac per order\n       COALESCE(order_picking, 0) + COALESCE(packaging_cost, 0) +  COALESCE((1 + orders.shipping_taxes_rate) * sc.price, 0) + 0.07 + products_cost AS total_order_costs,\n       net_revenue + shipping_revenue AS total_order_revenue,\n       net_revenue + shipping_revenue - (COALESCE(order_picking, 0) + COALESCE(packaging_cost, 0) + COALESCE((1 + orders.shipping_taxes_rate) * sc.price, 0) + 0.07 + products_cost) AS gross_profit,\n       CASE WHEN (net_revenue + shipping_revenue) <> 0\n            THEN (net_revenue + shipping_revenue - (COALESCE(order_picking, 0) + COALESCE(packaging_cost, 0)  + COALESCE((1 + orders.shipping_taxes_rate) * sc.price, 0) + 0.07 + products_cost))\n/ (net_revenue + shipping_revenue) ELSE 0\n       END AS gross_margin\nFROM\n(\n  SELECT ss.dw_country_code,\n         ss.order_id, \n         MAX(ss.user_id) AS user_id,\n         MAX(ss.order_date) AS order_date,\n         MAX(ss.year) AS year,\n         MAX(ss.month) AS month,\n         MAX(ss.is_first_shop_order) AS is_first_shop_order,\n         SUM(ss.gross_revenue) AS gross_revenue,\n         SUM(ss.net_revenue) AS net_revenue, \n         MIN(ss.order_total_shipping) AS shipping_revenue,\n         MAX(ss.order_coupon_code) AS order_coupon_code,\n         MAX(ss.shipping_mode_id) AS shipping_mode_id,\n         MAX(CASE WHEN ss.product_codification = 'BYOB' THEN 1\n                  WHEN ss.product_codification = 'LTE' THEN 2\n                  WHEN ss.product_codification = 'SPLENDIST' THEN 8\n                  WHEN ss.product_codification = 'CALENDAR' THEN 13\n                  ELSE 0\n             END) AS codification,\n          SUM(CASE WHEN pc.PC_GIFT AND ss.gift_card_type = 'PHYSICAL'\n                  THEN 0.2 ELSE ss.quantity * COALESCE(c.weight, 0.2)\n              END) / 1000 + 0.15 AS order_weight,\n          SUM(COALESCE(ss.euro_purchase_price, 0) * ss.quantity) AS products_cost,\n          MAX(CASE WHEN pc.PC_GIFT AND ss.gift_card_type <> 'PHYSICAL'\n                   THEN 0 \n                   WHEN pc.PC_DONATION\n                   THEN 0\n                   ELSE dlc_first_product.price \n              END)\n              +\n        (MAX(dlc_prepacked.price) - MAX(dlc_first_product.price)) * \n        (CASE WHEN \n          SUM(CASE WHEN pc.PC_GIFT\n                  AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  ELSE ss.quantity END) = 1 THEN 1 ELSE 0 END )\n        *\n        MAX(CASE WHEN pc.PC_SPLENDIST OR pc.PC_CALENDAR THEN 1 ELSE 0 END) -- deduction if only one calendar or splendist\n\n        +\n\n        (SUM(CASE \n                  WHEN pc.PC_GIFT AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  WHEN pc.PC_BYOB\n                  THEN 6\n                  ELSE ss.quantity\n              END)\n          -\n          MAX(CASE WHEN ss.gift_card_type <> 'PHYSICAL' OR pc.PC_DONATION\n                    THEN 0 \n                    ELSE 1 \n              END)\n              ) * MAX(dlc_next_product.price) AS order_picking,\n          MAX(dlc_taxes.price) AS shipping_taxes_rate,\n          MAX(CASE \n                  WHEN pc.PC_GIFT\n                  AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  ELSE 0.728\n              END) AS packaging_cost,\n    SUM(CASE \n                  WHEN pc.PC_GIFT AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  WHEN pc.PC_BYOB\n                  THEN 6\n                  ELSE ss.quantity\n              END)\n          \n               AS quantity,\n    CASE WHEN o.gift_message IS NULL OR o.gift_message = '' THEN 0 ELSE 1 END AS msg_perso\n  FROM {{ ref('shop_sales') }} AS ss\n  LEFT JOIN {{ ref('orders') }} o ON o.id = ss.order_id AND ss.dw_country_code = o.dw_country_code\n  LEFT JOIN {{ ref('catalog') }} AS c ON ss.dw_country_code = c.dw_country_code AND c.product_id = ss.product_id\n  INNER JOIN {{ ref('products') }} p ON p.dw_country_code = ss.dw_country_code AND p.id = ss.product_id\n  LEFT JOIN {{ ref('logistics_costs') }} dlc_taxes ON dlc_taxes.name = 'shipping_taxes_rate' AND ss.order_date >= DATE(dlc_taxes.date_start) AND (ss.order_date <= DATE(dlc_taxes.date_end) OR dlc_taxes.date_end IS NULL)\n  LEFT JOIN {{ ref('logistics_costs') }} dlc_first_product ON dlc_first_product.name = 'picking first article' AND ss.order_date >= DATE(dlc_first_product.date_start) AND (ss.order_date <= DATE(dlc_first_product.date_end) OR dlc_first_product.date_end IS NULL)\n  LEFT JOIN {{ ref('logistics_costs') }} dlc_next_product ON dlc_next_product.name = 'picking next article' AND ss.order_date >= DATE(dlc_next_product.date_start) AND (ss.order_date <= DATE(dlc_next_product.date_end) OR dlc_next_product.date_end IS NULL)\n  LEFT JOIN {{ ref('logistics_costs') }} dlc_prepacked ON dlc_prepacked.name = 'picking prepacked' AND ss.order_date >= DATE(dlc_prepacked.date_start) AND (ss.order_date <= DATE(dlc_prepacked.date_end) OR dlc_prepacked.date_end IS NULL)\n    LEFT JOIN {{ ref('logistics_costs') }} msg_perso ON msg_perso.name = 'perso_msg_print' AND ss.order_date >= DATE(msg_perso.date_start) AND (ss.order_date <= DATE(msg_perso.date_end) OR msg_perso.date_end IS NULL)\n  LEFT JOIN snippets.product_codifications pc ON ss.product_codification_id = pc.product_codification_id\n  WHERE ss.store_code <> 'Store'\n  AND ss.order_status <> 'refund'\n  AND ss.product_codification <> 'DONATION'\n  GROUP BY ss.dw_country_code,\n           ss.order_id,\n           o.gift_message\n) orders\nLEFT JOIN {{ ref('shipping_costs') }} sc ON orders.order_date >= sc.date_start AND (sc.date_end IS NULL OR orders.order_date <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id", "language": "sql", "refs": [{"name": "shop_sales", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "logistics_costs", "package": null, "version": null}, {"name": "logistics_costs", "package": null, "version": null}, {"name": "logistics_costs", "package": null, "version": null}, {"name": "logistics_costs", "package": null, "version": null}, {"name": "logistics_costs", "package": null, "version": null}, {"name": "shipping_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.shop_sales", "model.warehouse.orders", "model.warehouse.catalog", "model.warehouse.products", "model.warehouse.logistics_costs", "model.warehouse.shipping_costs"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/shop_orders_margin.sql", "compiled": true, "compiled_code": "SELECT orders.*, \n       sc.price AS shipping_transport_cost,\n       orders.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n       (1 + orders.shipping_taxes_rate) * sc.price + 0.07 AS shipping_cost, -- ship up costs 0.07\u20ac per order\n       COALESCE(order_picking, 0) + COALESCE(packaging_cost, 0) +  COALESCE((1 + orders.shipping_taxes_rate) * sc.price, 0) + 0.07 + products_cost AS total_order_costs,\n       net_revenue + shipping_revenue AS total_order_revenue,\n       net_revenue + shipping_revenue - (COALESCE(order_picking, 0) + COALESCE(packaging_cost, 0) + COALESCE((1 + orders.shipping_taxes_rate) * sc.price, 0) + 0.07 + products_cost) AS gross_profit,\n       CASE WHEN (net_revenue + shipping_revenue) <> 0\n            THEN (net_revenue + shipping_revenue - (COALESCE(order_picking, 0) + COALESCE(packaging_cost, 0)  + COALESCE((1 + orders.shipping_taxes_rate) * sc.price, 0) + 0.07 + products_cost))\n/ (net_revenue + shipping_revenue) ELSE 0\n       END AS gross_margin\nFROM\n(\n  SELECT ss.dw_country_code,\n         ss.order_id, \n         MAX(ss.user_id) AS user_id,\n         MAX(ss.order_date) AS order_date,\n         MAX(ss.year) AS year,\n         MAX(ss.month) AS month,\n         MAX(ss.is_first_shop_order) AS is_first_shop_order,\n         SUM(ss.gross_revenue) AS gross_revenue,\n         SUM(ss.net_revenue) AS net_revenue, \n         MIN(ss.order_total_shipping) AS shipping_revenue,\n         MAX(ss.order_coupon_code) AS order_coupon_code,\n         MAX(ss.shipping_mode_id) AS shipping_mode_id,\n         MAX(CASE WHEN ss.product_codification = 'BYOB' THEN 1\n                  WHEN ss.product_codification = 'LTE' THEN 2\n                  WHEN ss.product_codification = 'SPLENDIST' THEN 8\n                  WHEN ss.product_codification = 'CALENDAR' THEN 13\n                  ELSE 0\n             END) AS codification,\n          SUM(CASE WHEN pc.PC_GIFT AND ss.gift_card_type = 'PHYSICAL'\n                  THEN 0.2 ELSE ss.quantity * COALESCE(c.weight, 0.2)\n              END) / 1000 + 0.15 AS order_weight,\n          SUM(COALESCE(ss.euro_purchase_price, 0) * ss.quantity) AS products_cost,\n          MAX(CASE WHEN pc.PC_GIFT AND ss.gift_card_type <> 'PHYSICAL'\n                   THEN 0 \n                   WHEN pc.PC_DONATION\n                   THEN 0\n                   ELSE dlc_first_product.price \n              END)\n              +\n        (MAX(dlc_prepacked.price) - MAX(dlc_first_product.price)) * \n        (CASE WHEN \n          SUM(CASE WHEN pc.PC_GIFT\n                  AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  ELSE ss.quantity END) = 1 THEN 1 ELSE 0 END )\n        *\n        MAX(CASE WHEN pc.PC_SPLENDIST OR pc.PC_CALENDAR THEN 1 ELSE 0 END) -- deduction if only one calendar or splendist\n\n        +\n\n        (SUM(CASE \n                  WHEN pc.PC_GIFT AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  WHEN pc.PC_BYOB\n                  THEN 6\n                  ELSE ss.quantity\n              END)\n          -\n          MAX(CASE WHEN ss.gift_card_type <> 'PHYSICAL' OR pc.PC_DONATION\n                    THEN 0 \n                    ELSE 1 \n              END)\n              ) * MAX(dlc_next_product.price) AS order_picking,\n          MAX(dlc_taxes.price) AS shipping_taxes_rate,\n          MAX(CASE \n                  WHEN pc.PC_GIFT\n                  AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  ELSE 0.728\n              END) AS packaging_cost,\n    SUM(CASE \n                  WHEN pc.PC_GIFT AND ss.gift_card_type <> 'PHYSICAL'\n                  THEN 0 \n                  WHEN pc.PC_DONATION\n                  THEN 0\n                  WHEN pc.PC_BYOB\n                  THEN 6\n                  ELSE ss.quantity\n              END)\n          \n               AS quantity,\n    CASE WHEN o.gift_message IS NULL OR o.gift_message = '' THEN 0 ELSE 1 END AS msg_perso\n  FROM `teamdata-291012`.`sales`.`shop_sales` AS ss\n  LEFT JOIN `teamdata-291012`.`inter`.`orders` o ON o.id = ss.order_id AND ss.dw_country_code = o.dw_country_code\n  LEFT JOIN `teamdata-291012`.`product`.`catalog` AS c ON ss.dw_country_code = c.dw_country_code AND c.product_id = ss.product_id\n  INNER JOIN `teamdata-291012`.`inter`.`products` p ON p.dw_country_code = ss.dw_country_code AND p.id = ss.product_id\n  LEFT JOIN `teamdata-291012`.`ops`.`logistics_costs` dlc_taxes ON dlc_taxes.name = 'shipping_taxes_rate' AND ss.order_date >= DATE(dlc_taxes.date_start) AND (ss.order_date <= DATE(dlc_taxes.date_end) OR dlc_taxes.date_end IS NULL)\n  LEFT JOIN `teamdata-291012`.`ops`.`logistics_costs` dlc_first_product ON dlc_first_product.name = 'picking first article' AND ss.order_date >= DATE(dlc_first_product.date_start) AND (ss.order_date <= DATE(dlc_first_product.date_end) OR dlc_first_product.date_end IS NULL)\n  LEFT JOIN `teamdata-291012`.`ops`.`logistics_costs` dlc_next_product ON dlc_next_product.name = 'picking next article' AND ss.order_date >= DATE(dlc_next_product.date_start) AND (ss.order_date <= DATE(dlc_next_product.date_end) OR dlc_next_product.date_end IS NULL)\n  LEFT JOIN `teamdata-291012`.`ops`.`logistics_costs` dlc_prepacked ON dlc_prepacked.name = 'picking prepacked' AND ss.order_date >= DATE(dlc_prepacked.date_start) AND (ss.order_date <= DATE(dlc_prepacked.date_end) OR dlc_prepacked.date_end IS NULL)\n    LEFT JOIN `teamdata-291012`.`ops`.`logistics_costs` msg_perso ON msg_perso.name = 'perso_msg_print' AND ss.order_date >= DATE(msg_perso.date_start) AND (ss.order_date <= DATE(msg_perso.date_end) OR msg_perso.date_end IS NULL)\n  LEFT JOIN snippets.product_codifications pc ON ss.product_codification_id = pc.product_codification_id\n  WHERE ss.store_code <> 'Store'\n  AND ss.order_status <> 'refund'\n  AND ss.product_codification <> 'DONATION'\n  GROUP BY ss.dw_country_code,\n           ss.order_id,\n           o.gift_message\n) orders\nLEFT JOIN `teamdata-291012`.`ops`.`shipping_costs` sc ON orders.order_date >= sc.date_start AND (sc.date_end IS NULL OR orders.order_date <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.adyen_notifications_authorization": {"database": "teamdata-291012", "schema": "payment", "name": "adyen_notifications_authorization", "resource_type": "model", "package_name": "warehouse", "path": "dwh/payment/adyen_notifications_authorization.sql", "original_file_path": "models/dwh/payment/adyen_notifications_authorization.sql", "unique_id": "model.warehouse.adyen_notifications_authorization", "fqn": ["warehouse", "dwh", "payment", "adyen_notifications_authorization"], "alias": "adyen_notifications_authorization", "checksum": {"name": "sha256", "checksum": "304a7c0e621d0e4c7392060ac962e7cb3ac171b5a3abe97f6be2778d500ccaa4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.7384698, "relation_name": "`teamdata-291012`.`payment`.`adyen_notifications_authorization`", "raw_code": "SELECT MAX(value) AS value,\n       MIN(eventDate) AS eventDate,\n       dw_country_code,\n       eventCode,\n       order_id,\n       detail_id,\n       sub_id\nFROM {{ ref('adyen_notifications') }} an\nWHERE success = 1\nAND eventCode = 'AUTHORISATION'\nGROUP BY dw_country_code,\n         eventCode,\n         order_id,\n         detail_id,\n         sub_id", "language": "sql", "refs": [{"name": "adyen_notifications", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.adyen_notifications"]}, "compiled_path": "target/compiled/warehouse/models/dwh/payment/adyen_notifications_authorization.sql", "compiled": true, "compiled_code": "SELECT MAX(value) AS value,\n       MIN(eventDate) AS eventDate,\n       dw_country_code,\n       eventCode,\n       order_id,\n       detail_id,\n       sub_id\nFROM `teamdata-291012`.`inter`.`adyen_notifications` an\nWHERE success = 1\nAND eventCode = 'AUTHORISATION'\nGROUP BY dw_country_code,\n         eventCode,\n         order_id,\n         detail_id,\n         sub_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.product_classes": {"database": "teamdata-291012", "schema": "product", "name": "product_classes", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/product_classes.sql", "original_file_path": "models/dwh/product/product_classes.sql", "unique_id": "model.warehouse.product_classes", "fqn": ["warehouse", "dwh", "product", "product_classes"], "alias": "product_classes", "checksum": {"name": "sha256", "checksum": "87d0583f59c9ff12956b490a665ff1fbd9ac26f8cf66ea1c2e0e80bcfc0af085"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.7397828, "relation_name": "`teamdata-291012`.`product`.`product_classes`", "raw_code": "WITH all_dates_table AS (\n  SELECT date\n  FROM (\n    SELECT GENERATE_DATE_ARRAY(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH), CURRENT_DATE()) AS all_dates\n  ),\n  UNNEST(all_dates) date\n),\nreal_parents AS (\n  SELECT parent_product_id\n  FROM (\n    SELECT MAX(CASE WHEN is_parent  THEN id END) AS parent_product_id, COUNT(*) AS nb\n    FROM {{ ref('products') }}\n    WHERE dw_country_code = 'FR'\n    GROUP BY parent_post_id\n  )\n  WHERE nb >= 2\n),\nall_bundles AS (\n  SELECT pbc.bundle_product_id, pbc.component_product_id\n  FROM {{ ref('products_bundle_component') }} pbc\n  INNER JOIN {{ ref('products') }} p ON pbc.bundle_product_id = p.id AND p.attr_is_bundle = 1 AND pbc.dw_country_code = p.dw_country_code\n  WHERE pbc.dw_country_code = 'FR'\n  GROUP BY bundle_product_id, component_product_id\n\n),\nraw_valid_products AS (\n  SELECT p.id AS product_id\n  FROM {{ ref('products') }}  p\n  INNER JOIN {{ ref('brands') }}  b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n  INNER JOIN {{ ref('posts') }}  po ON p.post_id = po.id AND p.dw_country_code = po.dw_country_code\n  LEFT JOIN real_parents rp ON p.id = rp.parent_product_id\n  WHERE p.product_codification_id = 0\n  AND p.attr_not_sold_anymore = 0\n  AND b.attr_is_inactive = 0\n  AND rp.parent_product_id IS NULL\n  AND p.sku IS NOT NULL\n  AND po.post_status = 'publish'\n  AND (p.special_type IS NULL or p.special_type='')\n  AND p.dw_country_code = 'FR'\n),\nvalid_products AS (\n  SELECT *\n  FROM (\n    SELECT DISTINCT CASE WHEN ab.bundle_product_id IS NULL\n                         THEN t.product_id\n                         ELSE ab.component_product_id\n                    END AS product_id\n    FROM raw_valid_products t\n    LEFT JOIN all_bundles ab ON t.product_id = ab.bundle_product_id\n  )t INNER JOIN {{ ref('products') }}  p on p.id =t.product_id and p.dw_country_code= 'FR'\n  where  p.attr_not_sold_anymore =0\n),\nvalid_products_with_date AS (\n  SELECT vp.product_id, adt.date\n  FROM valid_products vp\n  CROSS JOIN all_dates_table adt\n),\ndays_in_stock AS (\n  SELECT product_id, COUNTIF(in_stock) AS nb_days_in_stock\n  FROM (\n    SELECT date, product_id, MIN(in_stock) AS in_stock\n    FROM (\n      SELECT DATE(date) AS date, product_id, stock > 0 AS in_stock\n      FROM {{ ref('products_stock_log') }} \n      WHERE dw_country_code = 'FR'\n      UNION ALL\n      SELECT archive_date AS date, id AS product_id, stock > 0 AS in_stock\n      FROM history_table.bdd_prod_fr__wp_jb_products\n    )\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 month)\n    GROUP BY product_id, date\n  )\n  GROUP BY product_id\n),\nall_net_revenue_last_year AS (\n  SELECT ss.product_id, SUM(ss.net_revenue) AS net_revenue\n  FROM {{ ref('shop_sales') }} ss\n  LEFT JOIN {{ ref('products') }} p ON ss.dw_country_code = p.dw_country_code AND ss.bundle_product_id = p.id\n  WHERE ss.dw_country_code = 'FR'\n  AND ss.order_status = 'Valid\u00e9e'\n  AND DATE(ss.order_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\n  AND COALESCE(ss.product_discount, 0) = 0\n  AND COALESCE(ss.sub_discount, 0) <= 0.16 * ss.gross_revenue\n  AND (p.id IS NULL OR p.product_codification_id = 0)\n  GROUP BY ss.product_id\n),\nall_stats_products AS (\n  SELECT vp.product_id,\n         CASE WHEN ds.nb_days_in_stock = 0\n              THEN 0\n              ELSE COALESCE(nr.net_revenue, 0) / ds.nb_days_in_stock\n         END AS net_revenue_by_day,\n         nb_days_in_stock\n  FROM valid_products vp\n  INNER JOIN days_in_stock ds USING(product_id)\n  LEFT JOIN all_net_revenue_last_year nr USING(product_id)\n  ORDER BY net_revenue_by_day DESC\n),\ntotal_net_revenue_one_day_table AS (\n  SELECT SUM(net_revenue_by_day) AS total_net_revenue_one_day\n  FROM all_stats_products\n),\nwith_sumcum AS (\n  SELECT product_id,\n  net_revenue_by_day,\n  SUM(net_revenue_by_day) OVER (PARTITION BY 1 ORDER BY net_revenue_by_day DESC ROWS UNBOUNDED PRECEDING) - net_revenue_by_day AS sumcum_net_revenue_by_day\nFROM all_stats_products\n)\nSELECT ws.product_id,\n       CASE WHEN sumcum_net_revenue_by_day <= 0.8 * tot.total_net_revenue_one_day THEN 'A'\n            WHEN sumcum_net_revenue_by_day <= 0.95 * tot.total_net_revenue_one_day THEN 'B'\n            ELSE 'C'\n       END AS product_class\nFROM with_sumcum ws\nCROSS JOIN total_net_revenue_one_day_table tot", "language": "sql", "refs": [{"name": "products", "package": null, "version": null}, {"name": "products_bundle_component", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products_stock_log", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.products", "model.warehouse.products_bundle_component", "model.warehouse.brands", "model.warehouse.posts", "model.warehouse.products_stock_log", "model.warehouse.shop_sales"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/product_classes.sql", "compiled": true, "compiled_code": "WITH all_dates_table AS (\n  SELECT date\n  FROM (\n    SELECT GENERATE_DATE_ARRAY(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH), CURRENT_DATE()) AS all_dates\n  ),\n  UNNEST(all_dates) date\n),\nreal_parents AS (\n  SELECT parent_product_id\n  FROM (\n    SELECT MAX(CASE WHEN is_parent  THEN id END) AS parent_product_id, COUNT(*) AS nb\n    FROM `teamdata-291012`.`inter`.`products`\n    WHERE dw_country_code = 'FR'\n    GROUP BY parent_post_id\n  )\n  WHERE nb >= 2\n),\nall_bundles AS (\n  SELECT pbc.bundle_product_id, pbc.component_product_id\n  FROM `teamdata-291012`.`inter`.`products_bundle_component` pbc\n  INNER JOIN `teamdata-291012`.`inter`.`products` p ON pbc.bundle_product_id = p.id AND p.attr_is_bundle = 1 AND pbc.dw_country_code = p.dw_country_code\n  WHERE pbc.dw_country_code = 'FR'\n  GROUP BY bundle_product_id, component_product_id\n\n),\nraw_valid_products AS (\n  SELECT p.id AS product_id\n  FROM `teamdata-291012`.`inter`.`products`  p\n  INNER JOIN `teamdata-291012`.`inter`.`brands`  b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`posts`  po ON p.post_id = po.id AND p.dw_country_code = po.dw_country_code\n  LEFT JOIN real_parents rp ON p.id = rp.parent_product_id\n  WHERE p.product_codification_id = 0\n  AND p.attr_not_sold_anymore = 0\n  AND b.attr_is_inactive = 0\n  AND rp.parent_product_id IS NULL\n  AND p.sku IS NOT NULL\n  AND po.post_status = 'publish'\n  AND (p.special_type IS NULL or p.special_type='')\n  AND p.dw_country_code = 'FR'\n),\nvalid_products AS (\n  SELECT *\n  FROM (\n    SELECT DISTINCT CASE WHEN ab.bundle_product_id IS NULL\n                         THEN t.product_id\n                         ELSE ab.component_product_id\n                    END AS product_id\n    FROM raw_valid_products t\n    LEFT JOIN all_bundles ab ON t.product_id = ab.bundle_product_id\n  )t INNER JOIN `teamdata-291012`.`inter`.`products`  p on p.id =t.product_id and p.dw_country_code= 'FR'\n  where  p.attr_not_sold_anymore =0\n),\nvalid_products_with_date AS (\n  SELECT vp.product_id, adt.date\n  FROM valid_products vp\n  CROSS JOIN all_dates_table adt\n),\ndays_in_stock AS (\n  SELECT product_id, COUNTIF(in_stock) AS nb_days_in_stock\n  FROM (\n    SELECT date, product_id, MIN(in_stock) AS in_stock\n    FROM (\n      SELECT DATE(date) AS date, product_id, stock > 0 AS in_stock\n      FROM `teamdata-291012`.`inter`.`products_stock_log` \n      WHERE dw_country_code = 'FR'\n      UNION ALL\n      SELECT archive_date AS date, id AS product_id, stock > 0 AS in_stock\n      FROM history_table.bdd_prod_fr__wp_jb_products\n    )\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 month)\n    GROUP BY product_id, date\n  )\n  GROUP BY product_id\n),\nall_net_revenue_last_year AS (\n  SELECT ss.product_id, SUM(ss.net_revenue) AS net_revenue\n  FROM `teamdata-291012`.`sales`.`shop_sales` ss\n  LEFT JOIN `teamdata-291012`.`inter`.`products` p ON ss.dw_country_code = p.dw_country_code AND ss.bundle_product_id = p.id\n  WHERE ss.dw_country_code = 'FR'\n  AND ss.order_status = 'Valid\u00e9e'\n  AND DATE(ss.order_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\n  AND COALESCE(ss.product_discount, 0) = 0\n  AND COALESCE(ss.sub_discount, 0) <= 0.16 * ss.gross_revenue\n  AND (p.id IS NULL OR p.product_codification_id = 0)\n  GROUP BY ss.product_id\n),\nall_stats_products AS (\n  SELECT vp.product_id,\n         CASE WHEN ds.nb_days_in_stock = 0\n              THEN 0\n              ELSE COALESCE(nr.net_revenue, 0) / ds.nb_days_in_stock\n         END AS net_revenue_by_day,\n         nb_days_in_stock\n  FROM valid_products vp\n  INNER JOIN days_in_stock ds USING(product_id)\n  LEFT JOIN all_net_revenue_last_year nr USING(product_id)\n  ORDER BY net_revenue_by_day DESC\n),\ntotal_net_revenue_one_day_table AS (\n  SELECT SUM(net_revenue_by_day) AS total_net_revenue_one_day\n  FROM all_stats_products\n),\nwith_sumcum AS (\n  SELECT product_id,\n  net_revenue_by_day,\n  SUM(net_revenue_by_day) OVER (PARTITION BY 1 ORDER BY net_revenue_by_day DESC ROWS UNBOUNDED PRECEDING) - net_revenue_by_day AS sumcum_net_revenue_by_day\nFROM all_stats_products\n)\nSELECT ws.product_id,\n       CASE WHEN sumcum_net_revenue_by_day <= 0.8 * tot.total_net_revenue_one_day THEN 'A'\n            WHEN sumcum_net_revenue_by_day <= 0.95 * tot.total_net_revenue_one_day THEN 'B'\n            ELSE 'C'\n       END AS product_class\nFROM with_sumcum ws\nCROSS JOIN total_net_revenue_one_day_table tot", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.reviews": {"database": "teamdata-291012", "schema": "product", "name": "reviews", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/reviews.sql", "original_file_path": "models/dwh/product/reviews.sql", "unique_id": "model.warehouse.reviews", "fqn": ["warehouse", "dwh", "product", "reviews"], "alias": "reviews", "checksum": {"name": "sha256", "checksum": "407b86a1987703d5a54c57b28b9f0cdfd06672b43f9e1d8a45e8c27d8cc2c247"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.741483, "relation_name": "`teamdata-291012`.`product`.`reviews`", "raw_code": "SELECT co.dw_country_code,\nco.comment_id, \nco.comment_parent, \nFORMAT_DATE('%Y-%m-%d',co.comment_date) as review_date,\nca.product_id,\np.parent_post_id,\nca.brand_full_name, \nca.product_nice_name as product_name, \nco.rating, \nc.id AS user_id,\nco.comment_title as review_title, \nco.comment_content as review_body,\npost_status,\n\nFROM {{ ref('comments') }} co\nLEFT JOIN {{ ref('products') }} p ON p.post_id = co.comment_post_id AND p.dw_country_code = co.dw_country_code\nLEFT JOIN {{ ref('catalog') }} ca ON ca.product_id = p.id AND ca.dw_country_code = p.dw_country_code\nLEFT JOIN {{ ref('users') }} c ON c.user_email = co.comment_author_email AND c.dw_country_code = co.dw_country_code\nleft JOIN {{ ref('posts') }} post ON post.id = p.post_id and post.dw_country_code=p.dw_country_code\nWHERE co.comment_approved = '1'\nAND co.comment_author_email NOT LIKE '%blissim%'\nAND co.comment_author_email NOT LIKE '%birchbox%'", "language": "sql", "refs": [{"name": "comments", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "users", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.comments", "model.warehouse.products", "model.warehouse.catalog", "model.warehouse.users", "model.warehouse.posts"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/reviews.sql", "compiled": true, "compiled_code": "SELECT co.dw_country_code,\nco.comment_id, \nco.comment_parent, \nFORMAT_DATE('%Y-%m-%d',co.comment_date) as review_date,\nca.product_id,\np.parent_post_id,\nca.brand_full_name, \nca.product_nice_name as product_name, \nco.rating, \nc.id AS user_id,\nco.comment_title as review_title, \nco.comment_content as review_body,\npost_status,\n\nFROM `teamdata-291012`.`inter`.`comments` co\nLEFT JOIN `teamdata-291012`.`inter`.`products` p ON p.post_id = co.comment_post_id AND p.dw_country_code = co.dw_country_code\nLEFT JOIN `teamdata-291012`.`product`.`catalog` ca ON ca.product_id = p.id AND ca.dw_country_code = p.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`users` c ON c.user_email = co.comment_author_email AND c.dw_country_code = co.dw_country_code\nleft JOIN `teamdata-291012`.`inter`.`posts` post ON post.id = p.post_id and post.dw_country_code=p.dw_country_code\nWHERE co.comment_approved = '1'\nAND co.comment_author_email NOT LIKE '%blissim%'\nAND co.comment_author_email NOT LIKE '%birchbox%'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.categories": {"database": "teamdata-291012", "schema": "product", "name": "categories", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/categories.sql", "original_file_path": "models/dwh/product/categories.sql", "unique_id": "model.warehouse.categories", "fqn": ["warehouse", "dwh", "product", "categories"], "alias": "categories", "checksum": {"name": "sha256", "checksum": "262e6f62ade6b3fe5d0acf0c5bed24a437c73ac07c0668cdb08595638175c136"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.742966, "relation_name": "`teamdata-291012`.`product`.`categories`", "raw_code": "SELECT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&'), ' / ', REPLACE(t3.name, '&amp;', '&')) AS product_categories,\n       REPLACE(t1.name, '&amp;', '&') AS category_lvl_1,\n       REPLACE(t2.name, '&amp;', '&') AS category_lvl_2,\n       REPLACE(t3.name, '&amp;', '&') AS category_lvl_3,\n       tx3.term_id AS term_id,\n       3 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx3.parent AS parent_lvl2\nFROM {{ ref('term_taxonomy') }} tx1\nINNER JOIN {{ ref('terms') }} t1 ON t1.term_id = tx1.term_id AND t1.dw_country_code = tx1.dw_country_code\nLEFT JOIN {{ ref('term_taxonomy') }} tx2 ON tx2.parent = tx1.term_id AND tx2.dw_country_code = tx1.dw_country_code AND tx2.taxonomy = 'product-categories'\nLEFT JOIN {{ ref('terms') }}  t2 ON t2.term_id = tx2.term_id AND t2.dw_country_code = tx2.dw_country_code\nLEFT JOIN {{ ref('term_taxonomy') }} tx3 ON tx3.parent = tx2.term_id AND tx3.dw_country_code = tx2.dw_country_code AND tx3.taxonomy = 'product-categories'\nLEFT JOIN {{ ref('terms') }}  t3 ON t3.term_id = tx3.term_id AND t3.dw_country_code = tx3.dw_country_code\nWHERE tx1.taxonomy = 'product-categories'\n  AND tx1.parent = 0\n  AND tx3.term_id IS NOT NULL\nUNION ALL\nSELECT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&')) AS product_categories,\n       REPLACE(t1.name, '&amp;', '&') AS category_lvl_1,\n       REPLACE(t2.name, '&amp;', '&') AS category_lvl_2,\n       '' AS category_lvl_3,\n       tx2.term_id AS term_id,\n       2 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx2.term_id AS parent_lvl2\nFROM {{ ref('term_taxonomy') }} tx1\nINNER JOIN {{ ref('terms') }}  t1 ON t1.term_id = tx1.term_id AND t1.dw_country_code = tx1.dw_country_code\nLEFT JOIN {{ ref('term_taxonomy') }} tx2 ON tx2.parent = tx1.term_id AND tx2.taxonomy = 'product-categories' AND tx2.dw_country_code = tx1.dw_country_code\nLEFT JOIN {{ ref('terms') }}  t2 ON t2.term_id = tx2.term_id AND t2.dw_country_code = tx2.dw_country_code\nWHERE tx1.taxonomy = 'product-categories'\n  AND tx1.parent = 0\n  AND tx2.term_id IS NOT NULL\nUNION ALL\nSELECT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&')) AS product_categories,\n       REPLACE(t1.name, '&amp;', '&') AS category_lvl_1,\n       '' AS category_lvl_2,\n       '' AS category_lvl_3,\n       tx1.term_id AS term_id,\n       1 AS category_lvl,\n       tx1.term_id AS parent_lvl1,\n       NULL AS parent_lvl2\nFROM {{ ref('term_taxonomy') }} tx1\nINNER JOIN {{ ref('terms') }}  t1 ON t1.term_id = tx1.term_id AND t1.dw_country_code = tx1.dw_country_code\nWHERE tx1.taxonomy = 'product-categories'\n  AND tx1.parent = 0\n  AND tx1.term_id IS NOT NULL", "language": "sql", "refs": [{"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.term_taxonomy", "model.warehouse.terms"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/categories.sql", "compiled": true, "compiled_code": "SELECT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&'), ' / ', REPLACE(t3.name, '&amp;', '&')) AS product_categories,\n       REPLACE(t1.name, '&amp;', '&') AS category_lvl_1,\n       REPLACE(t2.name, '&amp;', '&') AS category_lvl_2,\n       REPLACE(t3.name, '&amp;', '&') AS category_lvl_3,\n       tx3.term_id AS term_id,\n       3 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx3.parent AS parent_lvl2\nFROM `teamdata-291012`.`inter`.`term_taxonomy` tx1\nINNER JOIN `teamdata-291012`.`inter`.`terms` t1 ON t1.term_id = tx1.term_id AND t1.dw_country_code = tx1.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`term_taxonomy` tx2 ON tx2.parent = tx1.term_id AND tx2.dw_country_code = tx1.dw_country_code AND tx2.taxonomy = 'product-categories'\nLEFT JOIN `teamdata-291012`.`inter`.`terms`  t2 ON t2.term_id = tx2.term_id AND t2.dw_country_code = tx2.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`term_taxonomy` tx3 ON tx3.parent = tx2.term_id AND tx3.dw_country_code = tx2.dw_country_code AND tx3.taxonomy = 'product-categories'\nLEFT JOIN `teamdata-291012`.`inter`.`terms`  t3 ON t3.term_id = tx3.term_id AND t3.dw_country_code = tx3.dw_country_code\nWHERE tx1.taxonomy = 'product-categories'\n  AND tx1.parent = 0\n  AND tx3.term_id IS NOT NULL\nUNION ALL\nSELECT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&')) AS product_categories,\n       REPLACE(t1.name, '&amp;', '&') AS category_lvl_1,\n       REPLACE(t2.name, '&amp;', '&') AS category_lvl_2,\n       '' AS category_lvl_3,\n       tx2.term_id AS term_id,\n       2 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx2.term_id AS parent_lvl2\nFROM `teamdata-291012`.`inter`.`term_taxonomy` tx1\nINNER JOIN `teamdata-291012`.`inter`.`terms`  t1 ON t1.term_id = tx1.term_id AND t1.dw_country_code = tx1.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`term_taxonomy` tx2 ON tx2.parent = tx1.term_id AND tx2.taxonomy = 'product-categories' AND tx2.dw_country_code = tx1.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`terms`  t2 ON t2.term_id = tx2.term_id AND t2.dw_country_code = tx2.dw_country_code\nWHERE tx1.taxonomy = 'product-categories'\n  AND tx1.parent = 0\n  AND tx2.term_id IS NOT NULL\nUNION ALL\nSELECT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&')) AS product_categories,\n       REPLACE(t1.name, '&amp;', '&') AS category_lvl_1,\n       '' AS category_lvl_2,\n       '' AS category_lvl_3,\n       tx1.term_id AS term_id,\n       1 AS category_lvl,\n       tx1.term_id AS parent_lvl1,\n       NULL AS parent_lvl2\nFROM `teamdata-291012`.`inter`.`term_taxonomy` tx1\nINNER JOIN `teamdata-291012`.`inter`.`terms`  t1 ON t1.term_id = tx1.term_id AND t1.dw_country_code = tx1.dw_country_code\nWHERE tx1.taxonomy = 'product-categories'\n  AND tx1.parent = 0\n  AND tx1.term_id IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.all_kits": {"database": "teamdata-291012", "schema": "product", "name": "all_kits", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/all_kits.sql", "original_file_path": "models/dwh/product/all_kits.sql", "unique_id": "model.warehouse.all_kits", "fqn": ["warehouse", "dwh", "product", "all_kits"], "alias": "all_kits", "checksum": {"name": "sha256", "checksum": "b6abb7e4dbd9a4bad3617d814a1f23f70e2fc8821d3f51db092e45cfc205d85c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.7445529, "relation_name": "`teamdata-291012`.`product`.`all_kits`", "raw_code": "WITH lte_kits AS (\n  SELECT dw_country_code AS country_code, lte_product_id AS kit_id, product_id, COUNT(*) AS quantity, 'LTE' AS kit_type\n  FROM {{ ref('lte_kits') }}\n  GROUP BY dw_country_code, lte_product_id, product_id\n)\nSELECT country_code, kit_id, product_id, max(quantity) AS quantity,'BOX' as kit_type\nFROM\n(\nSELECT dw_country_code AS country_code, kit_id, product_id, quantity, 'BOX' AS kit_type\nFROM {{ ref('kit_links') }}\nUNION ALL\nSELECT country_code, kit_id, product_id, quantity, kit_type\nFROM lte_kits\n) t\nGROUP BY country_code, kit_id, product_id", "language": "sql", "refs": [{"name": "lte_kits", "package": null, "version": null}, {"name": "kit_links", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.lte_kits", "model.warehouse.kit_links"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/all_kits.sql", "compiled": true, "compiled_code": "WITH lte_kits AS (\n  SELECT dw_country_code AS country_code, lte_product_id AS kit_id, product_id, COUNT(*) AS quantity, 'LTE' AS kit_type\n  FROM `teamdata-291012`.`inter`.`lte_kits`\n  GROUP BY dw_country_code, lte_product_id, product_id\n)\nSELECT country_code, kit_id, product_id, max(quantity) AS quantity,'BOX' as kit_type\nFROM\n(\nSELECT dw_country_code AS country_code, kit_id, product_id, quantity, 'BOX' AS kit_type\nFROM `teamdata-291012`.`inter`.`kit_links`\nUNION ALL\nSELECT country_code, kit_id, product_id, quantity, kit_type\nFROM lte_kits\n) t\nGROUP BY country_code, kit_id, product_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.catalog": {"database": "teamdata-291012", "schema": "product", "name": "catalog", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/catalog.sql", "original_file_path": "models/dwh/product/catalog.sql", "unique_id": "model.warehouse.catalog", "fqn": ["warehouse", "dwh", "product", "catalog"], "alias": "catalog", "checksum": {"name": "sha256", "checksum": "4627022e84a3e721e86ab4d36416219624e7430f2f6dcbad8c4f316a162fe7b2"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.7459579, "relation_name": "`teamdata-291012`.`product`.`catalog`", "raw_code": "SELECT t.*,\r\n'[Edit](' || t.edit_page_url || ')' AS Edit,\r\n'[View](' || t.view_page_url || ')' AS View,\r\nCASE WHEN t.purchase_currency = 'EUR' THEN t.purchase_price\r\n     WHEN t.purchase_currency = 'GBP' THEN t.purchase_price / 0.864\r\n     WHEN t.purchase_currency IN ('USD','DOL')  THEN t.purchase_price / 1.21\r\n     ELSE 0\r\nEND AS euro_purchase_price\r\nFROM\r\n(\r\n    SELECT\r\n    p.dw_country_code,\r\n    p.id AS product_id,\r\n    p.post_id AS product_post_id,\r\n    p.inventory_item_id,\r\n    p.brand_id,\r\n    p.sku,\r\n    p.EAN,\r\n    pnn.brand_full_name,\r\n        case when pnn.product_nice_name is null or pnn.product_nice_name='' then p.name else pnn.product_nice_name end  AS product_nice_name,\r\n    p.price as sale_price,\r\n    p.sales_count,\r\n    p.stock,\r\n    p.stock_physique,\r\n    p.stock_scamp,\r\n    p.parent_post_id,\r\n    p.tampon,\r\n    p.product_codification_id,\r\n    pc.category_lvl_1 AS pc_cat1,\r\n    pc.category_lvl_2 AS pc_cat2,\r\n    pc.category_lvl_1 AS codification,\r\n    CONCAT(pc.category_lvl_1, '/', pc.category_lvl_2) AS full_codification,\r\n    apc.product_categories AS planning_category,\r\n    dpc.category_lvl_1,\r\n    dpc.category_lvl_2,\r\n    dpc.category_lvl_3,\r\n    apc.category_lvl AS planning_category_level,\r\n    apc.parent_lvl1 AS planning_category_lvl_1,\r\n    apc.parent_lvl2 AS planning_category_lvl_2,\r\n    p.visible,\r\n    pp.post_date AS created_at,\r\n    p.url AS view_page_url,\r\n    CASE WHEN p.post_id > 0 THEN CONCAT('https://back.blissim.', LOWER(p.dw_country_code), '/wp-admin/post.php?action=edit&post=', p.post_id) END AS edit_page_url,\r\n    CASE WHEN p.brand_id > 0 THEN CONCAT('https://back.blissim.', LOWER(p.dw_country_code), '/wp-admin/post.php?action=edit&post=', p.brand_id) END AS edit_brand_url,\r\n    COALESCE(ii.discounted_purchase_price, ii.purchase_price, kc.total_cost) AS purchase_price,\r\n    CASE WHEN ii.purchase_currency = '' THEN 'EUR' ELSE ii.purchase_currency END AS purchase_currency,\r\n    p.product_categories_lvl1 AS categories_level_1,\r\n    p.product_categories_lvl2 AS categories_level_2,\r\n    p.product_categories_lvl3 AS categories_level_3,\r\n    p.grade,\r\n    CASE WHEN b.attr_point_rouge IS NULL THEN 0 ELSE b.attr_point_rouge END AS point_rouge,\r\n    REPLACE(p.thumb_url, '40x60', '360x540') AS thumb_url,\r\n    COALESCE(ii.company_id, 1) AS company_id,\r\n    COALESCE(cp.name, 'Blissim') AS company,\r\n    p.attr_brand_code,\r\n    CASE WHEN p.weight > 0 THEN p.weight\r\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id = 0 THEN 170 -- avg weight of shop products\r\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id IN (2, 8) THEN 950 -- avg weight of LTE, Splendist Products\r\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id = 13 THEN 2900 -- avg weight of LTE, Splendist Products\r\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id = 40 THEN 150 -- loyalty without weight\r\n         WHEN p.weight IS NULL OR p.weight = 0 THEN 200 -- default weight\r\n         ELSE p.weight\r\n    END AS weight,\r\n    tp.taux as vat_rate,\r\n    p.price*(100-tp.taux)/100 AS ht_sale_price\r\n    FROM {{ ref('products') }} p\r\n    LEFT JOIN {{ ref('kit_costs') }} kc ON p.inventory_item_id = kc.inventory_item_id AND p.dw_country_code = kc.country_code\r\n    LEFT JOIN {{ ref('brands') }} b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\r\n    LEFT JOIN {{ ref('posts') }} pp ON pp.id = p.post_id AND pp.dw_country_code = p.dw_country_code\r\n    LEFT JOIN {{ ref('nice_names') }} pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\r\n    LEFT JOIN {{ ref('brands') }} b_group ON b_group.post_id = b.attr_group_post_id AND b_group.dw_country_code = b.dw_country_code\r\n    LEFT JOIN {{ ref('product_codification') }} pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\r\n    LEFT JOIN {{ ref('algolia_product_categories') }} apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\r\n    LEFT JOIN {{ ref('categories') }} dpc ON dpc.term_id = p.attr_planning_category AND dpc.dw_country_code = p.dw_country_code\r\n    LEFT JOIN {{ ref('inventory_items') }} ii ON ii.id = p.inventory_item_id AND ii.dw_country_code = p.dw_country_code\r\n    LEFT JOIN {{ ref('company') }} cp ON cp.id = ii.company_id AND cp.dw_country_code = ii.dw_country_code\r\n    LEFT JOIN {{ ref('tva_product') }} tp ON tp.dw_country_code = p.dw_country_code AND tp.country_code = p.dw_country_code AND tp.category = CASE WHEN p.attr_tva_type IN ('alimentaire', 'hygienique') THEN p.attr_tva_type ELSE 'normal' END \r\n) t\r\nGROUP BY t.dw_country_code, t.product_id, t.product_post_id, t.inventory_item_id, t.brand_id, t.sku, t.ean, t.brand_full_name, t.product_nice_name,\r\n     t.sales_count, t.stock, t.stock_physique, t.tampon, t.product_codification_id, t.codification, t.full_codification, t.planning_category, t.planning_category_level,\r\n     t.planning_category_lvl_1, t.planning_category_lvl_2, t.visible, t.created_at, t.view_page_url, t.edit_page_url, t.edit_brand_url, t.purchase_currency, \r\n     t.purchase_price, t.categories_level_1, t.categories_level_2, t.categories_level_3, t.grade, edit, view, euro_purchase_price, point_rouge,\r\n     t.category_lvl_1, t.category_lvl_2, t.category_lvl_3, t.thumb_url, t.company_id, t.company, pc_cat1, pc_cat2, t.attr_brand_code, t.stock_scamp, t.weight,sale_price, vat_rate,ht_sale_price,parent_post_id", "language": "sql", "refs": [{"name": "products", "package": null, "version": null}, {"name": "kit_costs", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "nice_names", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "algolia_product_categories", "package": null, "version": null}, {"name": "categories", "package": null, "version": null}, {"name": "inventory_items", "package": null, "version": null}, {"name": "company", "package": null, "version": null}, {"name": "tva_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.products", "model.warehouse.kit_costs", "model.warehouse.brands", "model.warehouse.posts", "model.warehouse.nice_names", "model.warehouse.product_codification", "model.warehouse.algolia_product_categories", "model.warehouse.categories", "model.warehouse.inventory_items", "model.warehouse.company", "model.warehouse.tva_product"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/catalog.sql", "compiled": true, "compiled_code": "SELECT t.*,\n'[Edit](' || t.edit_page_url || ')' AS Edit,\n'[View](' || t.view_page_url || ')' AS View,\nCASE WHEN t.purchase_currency = 'EUR' THEN t.purchase_price\n     WHEN t.purchase_currency = 'GBP' THEN t.purchase_price / 0.864\n     WHEN t.purchase_currency IN ('USD','DOL')  THEN t.purchase_price / 1.21\n     ELSE 0\nEND AS euro_purchase_price\nFROM\n(\n    SELECT\n    p.dw_country_code,\n    p.id AS product_id,\n    p.post_id AS product_post_id,\n    p.inventory_item_id,\n    p.brand_id,\n    p.sku,\n    p.EAN,\n    pnn.brand_full_name,\n        case when pnn.product_nice_name is null or pnn.product_nice_name='' then p.name else pnn.product_nice_name end  AS product_nice_name,\n    p.price as sale_price,\n    p.sales_count,\n    p.stock,\n    p.stock_physique,\n    p.stock_scamp,\n    p.parent_post_id,\n    p.tampon,\n    p.product_codification_id,\n    pc.category_lvl_1 AS pc_cat1,\n    pc.category_lvl_2 AS pc_cat2,\n    pc.category_lvl_1 AS codification,\n    CONCAT(pc.category_lvl_1, '/', pc.category_lvl_2) AS full_codification,\n    apc.product_categories AS planning_category,\n    dpc.category_lvl_1,\n    dpc.category_lvl_2,\n    dpc.category_lvl_3,\n    apc.category_lvl AS planning_category_level,\n    apc.parent_lvl1 AS planning_category_lvl_1,\n    apc.parent_lvl2 AS planning_category_lvl_2,\n    p.visible,\n    pp.post_date AS created_at,\n    p.url AS view_page_url,\n    CASE WHEN p.post_id > 0 THEN CONCAT('https://back.blissim.', LOWER(p.dw_country_code), '/wp-admin/post.php?action=edit&post=', p.post_id) END AS edit_page_url,\n    CASE WHEN p.brand_id > 0 THEN CONCAT('https://back.blissim.', LOWER(p.dw_country_code), '/wp-admin/post.php?action=edit&post=', p.brand_id) END AS edit_brand_url,\n    COALESCE(ii.discounted_purchase_price, ii.purchase_price, kc.total_cost) AS purchase_price,\n    CASE WHEN ii.purchase_currency = '' THEN 'EUR' ELSE ii.purchase_currency END AS purchase_currency,\n    p.product_categories_lvl1 AS categories_level_1,\n    p.product_categories_lvl2 AS categories_level_2,\n    p.product_categories_lvl3 AS categories_level_3,\n    p.grade,\n    CASE WHEN b.attr_point_rouge IS NULL THEN 0 ELSE b.attr_point_rouge END AS point_rouge,\n    REPLACE(p.thumb_url, '40x60', '360x540') AS thumb_url,\n    COALESCE(ii.company_id, 1) AS company_id,\n    COALESCE(cp.name, 'Blissim') AS company,\n    p.attr_brand_code,\n    CASE WHEN p.weight > 0 THEN p.weight\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id = 0 THEN 170 -- avg weight of shop products\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id IN (2, 8) THEN 950 -- avg weight of LTE, Splendist Products\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id = 13 THEN 2900 -- avg weight of LTE, Splendist Products\n         WHEN (p.weight IS NULL OR p.weight = 0) AND p.product_codification_id = 40 THEN 150 -- loyalty without weight\n         WHEN p.weight IS NULL OR p.weight = 0 THEN 200 -- default weight\n         ELSE p.weight\n    END AS weight,\n    tp.taux as vat_rate,\n    p.price*(100-tp.taux)/100 AS ht_sale_price\n    FROM `teamdata-291012`.`inter`.`products` p\n    LEFT JOIN `teamdata-291012`.`product`.`kit_costs` kc ON p.inventory_item_id = kc.inventory_item_id AND p.dw_country_code = kc.country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`brands` b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`posts` pp ON pp.id = p.post_id AND pp.dw_country_code = p.dw_country_code\n    LEFT JOIN `teamdata-291012`.`product`.`nice_names` pnn ON pnn.product_id = p.id AND pnn.dw_country_code = p.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`brands` b_group ON b_group.post_id = b.attr_group_post_id AND b_group.dw_country_code = b.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc ON pc.id = p.product_codification_id AND pc.dw_country_code = p.dw_country_code\n    LEFT JOIN `teamdata-291012`.`product`.`algolia_product_categories` apc ON apc.term_id = p.attr_planning_category AND apc.dw_country_code = p.dw_country_code\n    LEFT JOIN `teamdata-291012`.`product`.`categories` dpc ON dpc.term_id = p.attr_planning_category AND dpc.dw_country_code = p.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`inventory_items` ii ON ii.id = p.inventory_item_id AND ii.dw_country_code = p.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`company` cp ON cp.id = ii.company_id AND cp.dw_country_code = ii.dw_country_code\n    LEFT JOIN `teamdata-291012`.`inter`.`tva_product` tp ON tp.dw_country_code = p.dw_country_code AND tp.country_code = p.dw_country_code AND tp.category = CASE WHEN p.attr_tva_type IN ('alimentaire', 'hygienique') THEN p.attr_tva_type ELSE 'normal' END \n) t\nGROUP BY t.dw_country_code, t.product_id, t.product_post_id, t.inventory_item_id, t.brand_id, t.sku, t.ean, t.brand_full_name, t.product_nice_name,\n     t.sales_count, t.stock, t.stock_physique, t.tampon, t.product_codification_id, t.codification, t.full_codification, t.planning_category, t.planning_category_level,\n     t.planning_category_lvl_1, t.planning_category_lvl_2, t.visible, t.created_at, t.view_page_url, t.edit_page_url, t.edit_brand_url, t.purchase_currency, \n     t.purchase_price, t.categories_level_1, t.categories_level_2, t.categories_level_3, t.grade, edit, view, euro_purchase_price, point_rouge,\n     t.category_lvl_1, t.category_lvl_2, t.category_lvl_3, t.thumb_url, t.company_id, t.company, pc_cat1, pc_cat2, t.attr_brand_code, t.stock_scamp, t.weight,sale_price, vat_rate,ht_sale_price,parent_post_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.algolia_product_categories": {"database": "teamdata-291012", "schema": "product", "name": "algolia_product_categories", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/algolia_product_categories.sql", "original_file_path": "models/dwh/product/algolia_product_categories.sql", "unique_id": "model.warehouse.algolia_product_categories", "fqn": ["warehouse", "dwh", "product", "algolia_product_categories"], "alias": "algolia_product_categories", "checksum": {"name": "sha256", "checksum": "3f0ab7b92be4f278770fe7f1376e0c3404a863c4f73f69c477bbf1d606b97683"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.747458, "relation_name": "`teamdata-291012`.`product`.`algolia_product_categories`", "raw_code": "SELECT DISTINCT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&'), ' / ', REPLACE(t3.name, '&amp;', '&')) AS product_categories,\n       tx3.term_id AS term_id,\n       3 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx3.parent AS parent_lvl2\nFROM {{ ref('term_taxonomy') }} tx1\nINNER JOIN {{ ref('terms') }} t1 ON t1.term_id = tx1.term_id AND tx1.dw_country_code = t1.dw_country_code\nLEFT JOIN {{ ref('term_taxonomy') }}  tx2 ON tx2.parent = tx1.term_id AND tx2.taxonomy = 'product-categories' AND tx2.dw_country_code = tx1.dw_country_code\nLEFT JOIN {{ ref('terms') }} t2 ON t2.term_id = tx2.term_id AND t2.dw_country_code = tx2.dw_country_code\nLEFT JOIN {{ ref('term_taxonomy') }}  tx3 ON tx3.parent = tx2.term_id AND tx3.taxonomy = 'product-categories' AND tx3.dw_country_code = tx2.dw_country_code\nLEFT JOIN {{ ref('terms') }} t3 ON t3.term_id = tx3.term_id AND t3.dw_country_code = tx3.dw_country_code\nWHERE tx1.taxonomy = 'product-categories' AND tx1.parent = 0 AND tx3.term_id IS NOT NULL\nUNION ALL\nSELECT DISTINCT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&')) AS product_categories,\n       tx2.term_id AS term_id,\n       2 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx2.term_id AS parent_lvl2\nFROM {{ ref('term_taxonomy') }} tx1\nINNER JOIN {{ ref('terms') }} t1 ON t1.term_id = tx1.term_id AND tx1.dw_country_code = t1.dw_country_code\nLEFT JOIN {{ ref('term_taxonomy') }} tx2 ON tx2.parent = tx1.term_id AND tx2.taxonomy = 'product-categories' AND tx2.dw_country_code = tx1.dw_country_code\nLEFT JOIN {{ ref('terms') }} t2 ON t2.term_id = tx2.term_id AND tx2.dw_country_code = tx2.dw_country_code\nWHERE tx1.taxonomy = 'product-categories' AND tx1.parent = 0 AND tx2.term_id IS NOT NULL\nUNION ALL\nSELECT DISTINCT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&')) AS product_categories,\n       tx1.term_id AS term_id,\n       1 AS category_lvl,\n       tx1.term_id AS parent_lvl1,\n       NULL AS parent_lvl2\nFROM {{ ref('term_taxonomy') }} tx1\nINNER JOIN {{ ref('terms') }} t1 ON t1.term_id = tx1.term_id AND tx1.dw_country_code = t1.dw_country_code\nWHERE tx1.taxonomy = 'product-categories' AND tx1.parent = 0 AND tx1.term_id IS NOT NULL", "language": "sql", "refs": [{"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}, {"name": "term_taxonomy", "package": null, "version": null}, {"name": "terms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.term_taxonomy", "model.warehouse.terms"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/algolia_product_categories.sql", "compiled": true, "compiled_code": "SELECT DISTINCT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&'), ' / ', REPLACE(t3.name, '&amp;', '&')) AS product_categories,\n       tx3.term_id AS term_id,\n       3 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx3.parent AS parent_lvl2\nFROM `teamdata-291012`.`inter`.`term_taxonomy` tx1\nINNER JOIN `teamdata-291012`.`inter`.`terms` t1 ON t1.term_id = tx1.term_id AND tx1.dw_country_code = t1.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`term_taxonomy`  tx2 ON tx2.parent = tx1.term_id AND tx2.taxonomy = 'product-categories' AND tx2.dw_country_code = tx1.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`terms` t2 ON t2.term_id = tx2.term_id AND t2.dw_country_code = tx2.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`term_taxonomy`  tx3 ON tx3.parent = tx2.term_id AND tx3.taxonomy = 'product-categories' AND tx3.dw_country_code = tx2.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`terms` t3 ON t3.term_id = tx3.term_id AND t3.dw_country_code = tx3.dw_country_code\nWHERE tx1.taxonomy = 'product-categories' AND tx1.parent = 0 AND tx3.term_id IS NOT NULL\nUNION ALL\nSELECT DISTINCT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&'), ' / ', REPLACE(t2.name, '&amp;', '&')) AS product_categories,\n       tx2.term_id AS term_id,\n       2 AS category_lvl,\n       tx2.parent AS parent_lvl1,\n       tx2.term_id AS parent_lvl2\nFROM `teamdata-291012`.`inter`.`term_taxonomy` tx1\nINNER JOIN `teamdata-291012`.`inter`.`terms` t1 ON t1.term_id = tx1.term_id AND tx1.dw_country_code = t1.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`term_taxonomy` tx2 ON tx2.parent = tx1.term_id AND tx2.taxonomy = 'product-categories' AND tx2.dw_country_code = tx1.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`terms` t2 ON t2.term_id = tx2.term_id AND tx2.dw_country_code = tx2.dw_country_code\nWHERE tx1.taxonomy = 'product-categories' AND tx1.parent = 0 AND tx2.term_id IS NOT NULL\nUNION ALL\nSELECT DISTINCT tx1.dw_country_code,\n       CONCAT(REPLACE(t1.name, '&amp;', '&')) AS product_categories,\n       tx1.term_id AS term_id,\n       1 AS category_lvl,\n       tx1.term_id AS parent_lvl1,\n       NULL AS parent_lvl2\nFROM `teamdata-291012`.`inter`.`term_taxonomy` tx1\nINNER JOIN `teamdata-291012`.`inter`.`terms` t1 ON t1.term_id = tx1.term_id AND tx1.dw_country_code = t1.dw_country_code\nWHERE tx1.taxonomy = 'product-categories' AND tx1.parent = 0 AND tx1.term_id IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.stock_store": {"database": "teamdata-291012", "schema": "product", "name": "stock_store", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/stock_store.sql", "original_file_path": "models/dwh/product/stock_store.sql", "unique_id": "model.warehouse.stock_store", "fqn": ["warehouse", "dwh", "product", "stock_store"], "alias": "stock_store", "checksum": {"name": "sha256", "checksum": "4be56a9f26db09f97dfa99390529b85b5db1961be1a58f1f73cf367835340c26"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.74896, "relation_name": "`teamdata-291012`.`product`.`stock_store`", "raw_code": "WITH stock as (\nSELECT p.dw_country_code, sp.store_id, c.sku, c.pc_cat1, c.pc_cat2, c.codification, \nc.product_id, c.brand_full_name, c.product_nice_name AS name, \nsp.stock AS stock, c.sale_price, c.euro_purchase_price, \nFROM {{ ref('store_products') }}  sp\nJOIN {{ ref('products') }} p ON p.id = sp.product_id AND p.dw_country_code = 'FR'\nJOIN {{ ref('catalog') }} c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nWHERE c.company_id = 1\nAND sp.dw_country_code = 'FR'\n)\n\n\nSELECT stock.*, COALESCE(stock.stock,0)*COALESCE(euro_purchase_price,0) AS valo_stock\nFROM stock", "language": "sql", "refs": [{"name": "store_products", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.store_products", "model.warehouse.products", "model.warehouse.catalog"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/stock_store.sql", "compiled": true, "compiled_code": "WITH stock as (\nSELECT p.dw_country_code, sp.store_id, c.sku, c.pc_cat1, c.pc_cat2, c.codification, \nc.product_id, c.brand_full_name, c.product_nice_name AS name, \nsp.stock AS stock, c.sale_price, c.euro_purchase_price, \nFROM `teamdata-291012`.`inter`.`store_products`  sp\nJOIN `teamdata-291012`.`inter`.`products` p ON p.id = sp.product_id AND p.dw_country_code = 'FR'\nJOIN `teamdata-291012`.`product`.`catalog` c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nWHERE c.company_id = 1\nAND sp.dw_country_code = 'FR'\n)\n\n\nSELECT stock.*, COALESCE(stock.stock,0)*COALESCE(euro_purchase_price,0) AS valo_stock\nFROM stock", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.codification_bundle_product": {"database": "teamdata-291012", "schema": "product", "name": "codification_bundle_product", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/codification_bundle_product.sql", "original_file_path": "models/dwh/product/codification_bundle_product.sql", "unique_id": "model.warehouse.codification_bundle_product", "fqn": ["warehouse", "dwh", "product", "codification_bundle_product"], "alias": "codification_bundle_product", "checksum": {"name": "sha256", "checksum": "ff9f60c1cf7ac8b3c1004792406ac79c490b1e996f05404ebf8c43fe3fe8ea6a"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.750357, "relation_name": "`teamdata-291012`.`product`.`codification_bundle_product`", "raw_code": "WITH bundle_with_gift_table AS (\n  SELECT pbc.dw_country_code,\n         pbc.bundle_product_id,\n         MAX(p_component.product_codification_id = 34) AS bundle_with_gift\n  FROM {{ ref('products_bundle_component') }} pbc\n  INNER JOIN {{ ref('products') }} p_component ON pbc.component_product_id = p_component.id AND pbc.dw_country_code = p_component.dw_country_code\n  INNER JOIN {{ ref('products') }} p_bundle ON pbc.bundle_product_id = p_bundle.id AND pbc.dw_country_code = p_bundle.dw_country_code AND p_bundle.attr_is_bundle = 1\n  GROUP BY pbc.dw_country_code,\n           pbc.bundle_product_id\n  HAVING bundle_with_gift\n)\nSELECT t.*, pc.category_lvl_1 AS product_codification\nFROM (\n  SELECT DISTINCT pbc.dw_country_code,\n         pbc.bundle_product_id,\n         pbc.component_product_id,\n         CASE WHEN bwgt.bundle_product_id IS NULL\n              THEN p_bundle.product_codification_id\n              ELSE p_component.product_codification_id\n         END AS product_codification_id\n  FROM {{ ref('products_bundle_component') }} pbc\n  INNER JOIN {{ ref('products') }} p_component ON pbc.component_product_id = p_component.id AND pbc.dw_country_code = p_component.dw_country_code\n  INNER JOIN {{ ref('products') }} p_bundle ON pbc.bundle_product_id = p_bundle.id AND pbc.dw_country_code = p_bundle.dw_country_code AND p_bundle.attr_is_bundle = 1\n  LEFT JOIN bundle_with_gift_table bwgt ON pbc.dw_country_code = bwgt.dw_country_code AND pbc.bundle_product_id = bwgt.bundle_product_id\n) t\nINNER JOIN {{ ref('product_codification') }}  pc ON t.dw_country_code = pc.dw_country_code AND t.product_codification_id = pc.id", "language": "sql", "refs": [{"name": "products_bundle_component", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products_bundle_component", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.products_bundle_component", "model.warehouse.products", "model.warehouse.product_codification"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/codification_bundle_product.sql", "compiled": true, "compiled_code": "WITH bundle_with_gift_table AS (\n  SELECT pbc.dw_country_code,\n         pbc.bundle_product_id,\n         MAX(p_component.product_codification_id = 34) AS bundle_with_gift\n  FROM `teamdata-291012`.`inter`.`products_bundle_component` pbc\n  INNER JOIN `teamdata-291012`.`inter`.`products` p_component ON pbc.component_product_id = p_component.id AND pbc.dw_country_code = p_component.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`products` p_bundle ON pbc.bundle_product_id = p_bundle.id AND pbc.dw_country_code = p_bundle.dw_country_code AND p_bundle.attr_is_bundle = 1\n  GROUP BY pbc.dw_country_code,\n           pbc.bundle_product_id\n  HAVING bundle_with_gift\n)\nSELECT t.*, pc.category_lvl_1 AS product_codification\nFROM (\n  SELECT DISTINCT pbc.dw_country_code,\n         pbc.bundle_product_id,\n         pbc.component_product_id,\n         CASE WHEN bwgt.bundle_product_id IS NULL\n              THEN p_bundle.product_codification_id\n              ELSE p_component.product_codification_id\n         END AS product_codification_id\n  FROM `teamdata-291012`.`inter`.`products_bundle_component` pbc\n  INNER JOIN `teamdata-291012`.`inter`.`products` p_component ON pbc.component_product_id = p_component.id AND pbc.dw_country_code = p_component.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`products` p_bundle ON pbc.bundle_product_id = p_bundle.id AND pbc.dw_country_code = p_bundle.dw_country_code AND p_bundle.attr_is_bundle = 1\n  LEFT JOIN bundle_with_gift_table bwgt ON pbc.dw_country_code = bwgt.dw_country_code AND pbc.bundle_product_id = bwgt.bundle_product_id\n) t\nINNER JOIN `teamdata-291012`.`inter`.`product_codification`  pc ON t.dw_country_code = pc.dw_country_code AND t.product_codification_id = pc.id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.kit_costs": {"database": "teamdata-291012", "schema": "product", "name": "kit_costs", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/kit_costs.sql", "original_file_path": "models/dwh/product/kit_costs.sql", "unique_id": "model.warehouse.kit_costs", "fqn": ["warehouse", "dwh", "product", "kit_costs"], "alias": "kit_costs", "checksum": {"name": "sha256", "checksum": "3dbce8981e170bb46313f5f9f2bc322fae939c21a94a2ec12cf92727b7f27975"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.751849, "relation_name": "`teamdata-291012`.`product`.`kit_costs`", "raw_code": "WITH details_product AS (\n  SELECT ak.country_code,\n         ii.id AS inventory_item_id,kit_id,\n         MAX(COALESCE(DATE(po.post_date), DATE(p1.created_at))) AS ii_date,\n         MAX(p1.special_type) AS special_type,\n         COUNTIF(pc.category_lvl_2 = 'Product') AS nb_products,\n         SUM(IF(pc.category_lvl_2 = 'Product', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS coop,\n         COUNTIF(pc.category_lvl_2 = 'Product' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_product_price,\n         COUNTIF(pc.category_lvl_2 = 'Pack') AS nb_packs,\n         SUM(IF(pc.category_lvl_2 = 'Pack', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS pack_cost,\n         COUNTIF(pc.category_lvl_2 = 'Pack' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_pack_price,\n         COUNTIF(pc.category_lvl_2 = 'Print') AS nb_prints,\n         SUM(IF(pc.category_lvl_2 = 'Print', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS print_cost,\n         COUNTIF(pc.category_lvl_2 = 'Print' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_print_price,\n         COUNTIF(pc.category_lvl_2 = 'Consumable item') AS nb_consumables,\n         SUM(IF(pc.category_lvl_2 = 'Consumable item', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS consumable_cost,\n         COUNTIF(pc.category_lvl_2 = 'Consumable item' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_consumable_item_price,\n         MAX(ak.kit_type) AS kit_type\n  FROM {{ ref('all_kits') }} ak\n  INNER JOIN {{ ref('products') }} p1 ON ak.country_code = p1.dw_country_code AND ak.kit_id = p1.id\n  LEFT JOIN {{ ref('posts') }} po ON p1.dw_country_code = po.dw_country_code AND p1.post_id = po.id\n  INNER JOIN {{ ref('products') }} p2 ON ak.country_code = p2.dw_country_code AND ak.product_id = p2.id\n  INNER JOIN {{ ref('product_codification') }}  pc ON p2.dw_country_code = pc.dw_country_code AND p2.product_codification_id = pc.id\n  INNER JOIN {{ ref('inventory_items') }} ii ON p1.dw_country_code = ii.dw_country_code AND p1.inventory_item_id = ii.id\n  GROUP BY all\n),\nwout_total_costs AS (\n  SELECT dp.country_code,kit_id,\n         dp.inventory_item_id,\n         ROUND(SUM(CASE WHEN dlc.name = 'assembly basis lte' AND dp.special_type = 'LTE' THEN price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly basis' THEN price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly product supp' THEN GREATEST(nb_products - 5, 0) * price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly pack supp' THEN GREATEST(nb_packs - 2, 0) * price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly print supp' THEN GREATEST(nb_prints - 1, 0) * price ELSE 0 END), 3) AS assembly_cost,\n         MAX(ROUND(coop, 3)) AS coop,\n         MAX(ROUND(pack_cost, 3)) AS pack_cost,\n         MAX(ROUND(print_cost, 3)) AS print_cost,\n         MAX(ROUND(consumable_cost, 3)) AS consumable_cost,\n         MAX(nb_missing_product_price) AS nb_missing_product_price,\n         MAX(nb_missing_pack_price) AS nb_missing_pack_price,\n         MAX(nb_missing_print_price) AS nb_missing_print_price,\n         MAX(nb_missing_consumable_item_price) AS nb_missing_consumable_item_price,\n         MAX(kit_type) AS kit_type,\n         MAX(nb_products) AS nb_products,\n         MAX(nb_packs) AS nb_packs\n  FROM details_product dp\n  INNER JOIN {{ ref('logistics_costs') }} dlc ON dp.ii_date >= DATE(dlc.date_start) AND (dp.ii_date <= DATE(dlc.date_end) OR date_end IS NULL)\n  WHERE dlc.name IN ('assembly basis',\n                     'assembly basis lte',\n                     'assembly product supp',\n                     'assembly pack supp',\n                     'assembly print supp')\n  GROUP BY ALL\n),\ndefault_costs AS (\n  SELECT 5 AS nb_products,\n         2 AS nb_packs,\n         2.1 AS default_coop,\n         0.65 AS default_pack_cost\n  UNION ALL\n  SELECT 10 AS nb_products,\n         2 AS nb_packs,\n         3.41 AS default_coop,\n         1.63 AS default_pack_cost\n)\nSELECT country_code,\n       inventory_item_id,kit_id,\n       ROUND(assembly_cost + coop + pack_cost + print_cost + consumable_cost, 3) AS total_cost,\n       assembly_cost,\n       CASE WHEN wtc.nb_missing_product_price = 0 THEN wtc.coop\n            ELSE COALESCE(dc.default_coop, wtc.coop)\n       END AS coop,\n       CASE WHEN wtc.nb_missing_pack_price = 0 THEN wtc.pack_cost\n            ELSE COALESCE(dc.default_pack_cost, wtc.pack_cost)\n       END AS pack_cost,\n       print_cost,\n       consumable_cost,\n       nb_missing_product_price,\n       nb_missing_pack_price,\n       nb_missing_print_price,\n       nb_missing_consumable_item_price,\n       wtc.nb_missing_product_price > 0 AND dc.default_coop IS NOT NULL AS is_default_coop,\n       wtc.nb_missing_pack_price > 0 AND dc.default_pack_cost IS NOT NULL AS is_default_pack_cost\nFROM wout_total_costs wtc\nLEFT JOIN default_costs dc ON wtc.nb_products = dc.nb_products AND wtc.nb_packs = dc.nb_packs AND wtc.kit_type = 'BOX'", "language": "sql", "refs": [{"name": "all_kits", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "inventory_items", "package": null, "version": null}, {"name": "logistics_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.all_kits", "model.warehouse.products", "model.warehouse.posts", "model.warehouse.product_codification", "model.warehouse.inventory_items", "model.warehouse.logistics_costs"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/kit_costs.sql", "compiled": true, "compiled_code": "WITH details_product AS (\n  SELECT ak.country_code,\n         ii.id AS inventory_item_id,kit_id,\n         MAX(COALESCE(DATE(po.post_date), DATE(p1.created_at))) AS ii_date,\n         MAX(p1.special_type) AS special_type,\n         COUNTIF(pc.category_lvl_2 = 'Product') AS nb_products,\n         SUM(IF(pc.category_lvl_2 = 'Product', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS coop,\n         COUNTIF(pc.category_lvl_2 = 'Product' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_product_price,\n         COUNTIF(pc.category_lvl_2 = 'Pack') AS nb_packs,\n         SUM(IF(pc.category_lvl_2 = 'Pack', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS pack_cost,\n         COUNTIF(pc.category_lvl_2 = 'Pack' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_pack_price,\n         COUNTIF(pc.category_lvl_2 = 'Print') AS nb_prints,\n         SUM(IF(pc.category_lvl_2 = 'Print', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS print_cost,\n         COUNTIF(pc.category_lvl_2 = 'Print' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_print_price,\n         COUNTIF(pc.category_lvl_2 = 'Consumable item') AS nb_consumables,\n         SUM(IF(pc.category_lvl_2 = 'Consumable item', COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price), 0)) AS consumable_cost,\n         COUNTIF(pc.category_lvl_2 = 'Consumable item' AND COALESCE(p2.attr_discounted_purchase_price, p2.attr_purchase_price) IS NULL) AS nb_missing_consumable_item_price,\n         MAX(ak.kit_type) AS kit_type\n  FROM `teamdata-291012`.`product`.`all_kits` ak\n  INNER JOIN `teamdata-291012`.`inter`.`products` p1 ON ak.country_code = p1.dw_country_code AND ak.kit_id = p1.id\n  LEFT JOIN `teamdata-291012`.`inter`.`posts` po ON p1.dw_country_code = po.dw_country_code AND p1.post_id = po.id\n  INNER JOIN `teamdata-291012`.`inter`.`products` p2 ON ak.country_code = p2.dw_country_code AND ak.product_id = p2.id\n  INNER JOIN `teamdata-291012`.`inter`.`product_codification`  pc ON p2.dw_country_code = pc.dw_country_code AND p2.product_codification_id = pc.id\n  INNER JOIN `teamdata-291012`.`inter`.`inventory_items` ii ON p1.dw_country_code = ii.dw_country_code AND p1.inventory_item_id = ii.id\n  GROUP BY all\n),\nwout_total_costs AS (\n  SELECT dp.country_code,kit_id,\n         dp.inventory_item_id,\n         ROUND(SUM(CASE WHEN dlc.name = 'assembly basis lte' AND dp.special_type = 'LTE' THEN price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly basis' THEN price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly product supp' THEN GREATEST(nb_products - 5, 0) * price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly pack supp' THEN GREATEST(nb_packs - 2, 0) * price ELSE 0 END\n         + CASE WHEN dlc.name = 'assembly print supp' THEN GREATEST(nb_prints - 1, 0) * price ELSE 0 END), 3) AS assembly_cost,\n         MAX(ROUND(coop, 3)) AS coop,\n         MAX(ROUND(pack_cost, 3)) AS pack_cost,\n         MAX(ROUND(print_cost, 3)) AS print_cost,\n         MAX(ROUND(consumable_cost, 3)) AS consumable_cost,\n         MAX(nb_missing_product_price) AS nb_missing_product_price,\n         MAX(nb_missing_pack_price) AS nb_missing_pack_price,\n         MAX(nb_missing_print_price) AS nb_missing_print_price,\n         MAX(nb_missing_consumable_item_price) AS nb_missing_consumable_item_price,\n         MAX(kit_type) AS kit_type,\n         MAX(nb_products) AS nb_products,\n         MAX(nb_packs) AS nb_packs\n  FROM details_product dp\n  INNER JOIN `teamdata-291012`.`ops`.`logistics_costs` dlc ON dp.ii_date >= DATE(dlc.date_start) AND (dp.ii_date <= DATE(dlc.date_end) OR date_end IS NULL)\n  WHERE dlc.name IN ('assembly basis',\n                     'assembly basis lte',\n                     'assembly product supp',\n                     'assembly pack supp',\n                     'assembly print supp')\n  GROUP BY ALL\n),\ndefault_costs AS (\n  SELECT 5 AS nb_products,\n         2 AS nb_packs,\n         2.1 AS default_coop,\n         0.65 AS default_pack_cost\n  UNION ALL\n  SELECT 10 AS nb_products,\n         2 AS nb_packs,\n         3.41 AS default_coop,\n         1.63 AS default_pack_cost\n)\nSELECT country_code,\n       inventory_item_id,kit_id,\n       ROUND(assembly_cost + coop + pack_cost + print_cost + consumable_cost, 3) AS total_cost,\n       assembly_cost,\n       CASE WHEN wtc.nb_missing_product_price = 0 THEN wtc.coop\n            ELSE COALESCE(dc.default_coop, wtc.coop)\n       END AS coop,\n       CASE WHEN wtc.nb_missing_pack_price = 0 THEN wtc.pack_cost\n            ELSE COALESCE(dc.default_pack_cost, wtc.pack_cost)\n       END AS pack_cost,\n       print_cost,\n       consumable_cost,\n       nb_missing_product_price,\n       nb_missing_pack_price,\n       nb_missing_print_price,\n       nb_missing_consumable_item_price,\n       wtc.nb_missing_product_price > 0 AND dc.default_coop IS NOT NULL AS is_default_coop,\n       wtc.nb_missing_pack_price > 0 AND dc.default_pack_cost IS NOT NULL AS is_default_pack_cost\nFROM wout_total_costs wtc\nLEFT JOIN default_costs dc ON wtc.nb_products = dc.nb_products AND wtc.nb_packs = dc.nb_packs AND wtc.kit_type = 'BOX'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.kit_details": {"database": "teamdata-291012", "schema": "product", "name": "kit_details", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/kit_details.sql", "original_file_path": "models/dwh/product/kit_details.sql", "unique_id": "model.warehouse.kit_details", "fqn": ["warehouse", "dwh", "product", "kit_details"], "alias": "kit_details", "checksum": {"name": "sha256", "checksum": "6890c172bc20a446f9faaf19ff32e4a32d7e8aeadfff7067e4bda34c183079c9"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.753841, "relation_name": "`teamdata-291012`.`product`.`kit_details`", "raw_code": "SELECT kl.dw_country_code, kit.product_id AS kit_product_id, kit.sku AS kit_sku, p.box_id, p.coffret_id, kit.brand_full_name AS kit_brand_name, kit.brand_id AS kit_brand_id, kit.product_codification_id AS kit_codification_id, pc_kit.category_lvl_1 AS kit_codification_lvl1, pc_kit.category_lvl_2 AS kit_codification_lvl2,\nb.date as box_date, extract(year from b.date) AS box_year, extract(month from b.date) as box_month,\ncomponent.product_id AS component_product_id, component.sku as component_sku, component.brand_id as component_brand_id, component.brand_full_name as component_brand_name, component.product_nice_name AS component_name, component.product_codification_id AS component_codification_id, pc_component.category_lvl_1 AS component_codification_lvl1,pc_component.category_lvl_2 AS component_codification_lvl2, component.euro_purchase_price as component_euro_purchase_price\nFROM {{ ref('kit_links') }}  kl\nJOIN {{ ref('catalog') }} as kit ON kit.product_id = kl.kit_id AND kit.dw_country_code = kl.dw_country_code\nJOIN {{ ref('products') }} p ON p.id = kit.product_id AND kit.dw_country_code = p.dw_country_code\nJOIN {{ ref('catalog') }} as component ON component.product_id = kl.product_id AND component.dw_country_code = kl.dw_country_code\nLEFT JOIN {{ ref('boxes') }} b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nLEFT JOIN {{ ref('product_codification') }}  pc_kit ON pc_kit.id = kit.product_codification_id AND pc_kit.dw_country_code = kit.dw_country_code\nLEFT JOIN {{ ref('product_codification') }} pc_component ON pc_component.id = component.product_codification_id AND pc_component.dw_country_code = component.dw_country_code\n\nUNION ALL\n\nSELECT kl.dw_country_code, kit.product_id AS kit_product_id, kit.sku AS kit_sku, p.box_id, p.coffret_id, kit.brand_full_name AS kit_brand_name, kit.brand_id AS kit_brand_id, kit.product_codification_id AS kit_codification_id, pc_kit.category_lvl_1 AS kit_codification_lvl1, pc_kit.category_lvl_2 AS kit_codification_lvl2,\nNULL as box_date, NULL AS box_year, NULL as box_month,\ncomponent.product_id AS component_product_id, component.sku as component_sku, component.brand_id as component_brand_id, component.brand_full_name as component_brand_name, component.product_nice_name AS component_name, component.product_codification_id AS component_codification_id, pc_component.category_lvl_1 AS component_codification_lvl1,pc_component.category_lvl_2 AS component_codification_lvl2, component.euro_purchase_price as component_euro_purchase_price\nFROM {{ ref('lte_kits') }} kl\nJOIN {{ ref('catalog') }} as kit ON kit.product_id = kl.lte_product_id AND kit.dw_country_code = kl.dw_country_code\nJOIN {{ ref('products') }} p ON p.id = kit.product_id AND kit.dw_country_code = p.dw_country_code\nJOIN {{ ref('catalog') }} as component ON component.product_id = kl.product_id AND component.dw_country_code = kl.dw_country_code\nLEFT JOIN {{ ref('product_codification') }} pc_kit ON pc_kit.id = kit.product_codification_id AND pc_kit.dw_country_code = kit.dw_country_code\nLEFT JOIN {{ ref('product_codification') }} pc_component ON pc_component.id = component.product_codification_id AND pc_component.dw_country_code = component.dw_country_code\nWHERE p.box_id IS NULL", "language": "sql", "refs": [{"name": "kit_links", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "lte_kits", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.kit_links", "model.warehouse.catalog", "model.warehouse.products", "model.warehouse.boxes", "model.warehouse.product_codification", "model.warehouse.lte_kits"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/kit_details.sql", "compiled": true, "compiled_code": "SELECT kl.dw_country_code, kit.product_id AS kit_product_id, kit.sku AS kit_sku, p.box_id, p.coffret_id, kit.brand_full_name AS kit_brand_name, kit.brand_id AS kit_brand_id, kit.product_codification_id AS kit_codification_id, pc_kit.category_lvl_1 AS kit_codification_lvl1, pc_kit.category_lvl_2 AS kit_codification_lvl2,\nb.date as box_date, extract(year from b.date) AS box_year, extract(month from b.date) as box_month,\ncomponent.product_id AS component_product_id, component.sku as component_sku, component.brand_id as component_brand_id, component.brand_full_name as component_brand_name, component.product_nice_name AS component_name, component.product_codification_id AS component_codification_id, pc_component.category_lvl_1 AS component_codification_lvl1,pc_component.category_lvl_2 AS component_codification_lvl2, component.euro_purchase_price as component_euro_purchase_price\nFROM `teamdata-291012`.`inter`.`kit_links`  kl\nJOIN `teamdata-291012`.`product`.`catalog` as kit ON kit.product_id = kl.kit_id AND kit.dw_country_code = kl.dw_country_code\nJOIN `teamdata-291012`.`inter`.`products` p ON p.id = kit.product_id AND kit.dw_country_code = p.dw_country_code\nJOIN `teamdata-291012`.`product`.`catalog` as component ON component.product_id = kl.product_id AND component.dw_country_code = kl.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`product_codification`  pc_kit ON pc_kit.id = kit.product_codification_id AND pc_kit.dw_country_code = kit.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc_component ON pc_component.id = component.product_codification_id AND pc_component.dw_country_code = component.dw_country_code\n\nUNION ALL\n\nSELECT kl.dw_country_code, kit.product_id AS kit_product_id, kit.sku AS kit_sku, p.box_id, p.coffret_id, kit.brand_full_name AS kit_brand_name, kit.brand_id AS kit_brand_id, kit.product_codification_id AS kit_codification_id, pc_kit.category_lvl_1 AS kit_codification_lvl1, pc_kit.category_lvl_2 AS kit_codification_lvl2,\nNULL as box_date, NULL AS box_year, NULL as box_month,\ncomponent.product_id AS component_product_id, component.sku as component_sku, component.brand_id as component_brand_id, component.brand_full_name as component_brand_name, component.product_nice_name AS component_name, component.product_codification_id AS component_codification_id, pc_component.category_lvl_1 AS component_codification_lvl1,pc_component.category_lvl_2 AS component_codification_lvl2, component.euro_purchase_price as component_euro_purchase_price\nFROM `teamdata-291012`.`inter`.`lte_kits` kl\nJOIN `teamdata-291012`.`product`.`catalog` as kit ON kit.product_id = kl.lte_product_id AND kit.dw_country_code = kl.dw_country_code\nJOIN `teamdata-291012`.`inter`.`products` p ON p.id = kit.product_id AND kit.dw_country_code = p.dw_country_code\nJOIN `teamdata-291012`.`product`.`catalog` as component ON component.product_id = kl.product_id AND component.dw_country_code = kl.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc_kit ON pc_kit.id = kit.product_codification_id AND pc_kit.dw_country_code = kit.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`product_codification` pc_component ON pc_component.id = component.product_codification_id AND pc_component.dw_country_code = component.dw_country_code\nWHERE p.box_id IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.stock": {"database": "teamdata-291012", "schema": "product", "name": "stock", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/stock.sql", "original_file_path": "models/dwh/product/stock.sql", "unique_id": "model.warehouse.stock", "fqn": ["warehouse", "dwh", "product", "stock"], "alias": "stock", "checksum": {"name": "sha256", "checksum": "d014090c32f5c389c133a154c5dda586f4a7897d68bbe44ffa61255f792f350c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.7553558, "relation_name": "`teamdata-291012`.`product`.`stock`", "raw_code": "WITH stock as (\nSELECT p.dw_country_code, c.sku, c.pc_cat1, c.pc_cat2, c.codification, \nc.product_id, c.brand_full_name, c.product_nice_name AS name, \np.stock_scamp AS stock, c.sale_price, c.euro_purchase_price, COALESCE(b.box_reservations,0) + COALESCE(b.other_reservations,0) + COALESCE(b.gws_reservations,0) AS bank_reservations, \n  CASE WHEN p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) < 0 THEN 0 ELSE  p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) END AS available_stock\nFROM {{ ref('products') }} p\nJOIN {{ ref('catalog') }} c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nLEFT JOIN (SELECT b.sku, SUM(b.box_reservations) AS box_reservations, SUM(b.other_reservations) AS other_reservations, SUM(b.gws_reservations) AS gws_reservations FROM product.bank b GROUP BY b.sku) AS b ON b.sku = c.sku AND c.dw_country_code = 'FR'\nWHERE c.company_id = 1\n),\n\nposition_details AS (\nSELECT dw_country_code, sku, min(pwl.dluo) AS dluo_min,\nSUM(CASE WHEN zone_key IN ('Z1', 'Z2') THEN stock ELSE 0 END) AS stock_POT1,\nSUM(CASE WHEN zone_key = 'Z3' THEN stock ELSE 0 END) AS stock_POT2\n\nFROM {{ ref('product_warehouse_location') }} pwl\nWHERE date(pwl.created_at) >= CURRENT_DATE\nAND stock > 0\nGROUP BY dw_country_code, sku\n)\n\n\n\n\nSELECT stock.*, COALESCE(stock.stock,0)*COALESCE(euro_purchase_price,0) AS valo_stock, COALESCE(available_stock,0)*COALESCE(euro_purchase_price,0) AS valo_available_stock,\nDATE(position_details.dluo_min) AS dluo_min, position_details.stock_POT1, position_details.stock_POT2,\napd.product_class, apd.stock_coverage\nFROM stock\nLEFT JOIN position_details ON position_details.dw_country_code = stock.dw_country_code AND position_details.sku = stock.sku\nLEFT JOIN `appro.prev_appro_details` apd ON apd.sku = stock.sku AND stock.dw_country_code = 'FR'", "language": "sql", "refs": [{"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "product_warehouse_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.products", "model.warehouse.catalog", "model.warehouse.product_warehouse_location"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/stock.sql", "compiled": true, "compiled_code": "WITH stock as (\nSELECT p.dw_country_code, c.sku, c.pc_cat1, c.pc_cat2, c.codification, \nc.product_id, c.brand_full_name, c.product_nice_name AS name, \np.stock_scamp AS stock, c.sale_price, c.euro_purchase_price, COALESCE(b.box_reservations,0) + COALESCE(b.other_reservations,0) + COALESCE(b.gws_reservations,0) AS bank_reservations, \n  CASE WHEN p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) < 0 THEN 0 ELSE  p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) END AS available_stock\nFROM `teamdata-291012`.`inter`.`products` p\nJOIN `teamdata-291012`.`product`.`catalog` c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nLEFT JOIN (SELECT b.sku, SUM(b.box_reservations) AS box_reservations, SUM(b.other_reservations) AS other_reservations, SUM(b.gws_reservations) AS gws_reservations FROM product.bank b GROUP BY b.sku) AS b ON b.sku = c.sku AND c.dw_country_code = 'FR'\nWHERE c.company_id = 1\n),\n\nposition_details AS (\nSELECT dw_country_code, sku, min(pwl.dluo) AS dluo_min,\nSUM(CASE WHEN zone_key IN ('Z1', 'Z2') THEN stock ELSE 0 END) AS stock_POT1,\nSUM(CASE WHEN zone_key = 'Z3' THEN stock ELSE 0 END) AS stock_POT2\n\nFROM `teamdata-291012`.`inter`.`product_warehouse_location` pwl\nWHERE date(pwl.created_at) >= CURRENT_DATE\nAND stock > 0\nGROUP BY dw_country_code, sku\n)\n\n\n\n\nSELECT stock.*, COALESCE(stock.stock,0)*COALESCE(euro_purchase_price,0) AS valo_stock, COALESCE(available_stock,0)*COALESCE(euro_purchase_price,0) AS valo_available_stock,\nDATE(position_details.dluo_min) AS dluo_min, position_details.stock_POT1, position_details.stock_POT2,\napd.product_class, apd.stock_coverage\nFROM stock\nLEFT JOIN position_details ON position_details.dw_country_code = stock.dw_country_code AND position_details.sku = stock.sku\nLEFT JOIN `appro.prev_appro_details` apd ON apd.sku = stock.sku AND stock.dw_country_code = 'FR'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.nice_names": {"database": "teamdata-291012", "schema": "product", "name": "nice_names", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/nice_names.sql", "original_file_path": "models/dwh/product/nice_names.sql", "unique_id": "model.warehouse.nice_names", "fqn": ["warehouse", "dwh", "product", "nice_names"], "alias": "nice_names", "checksum": {"name": "sha256", "checksum": "715a174b392ffb81069c2bf5b71f0fc6fe790ad31d06b8345e3995a924788656"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.756691, "relation_name": "`teamdata-291012`.`product`.`nice_names`", "raw_code": "SELECT p.dw_country_code,\n       p.id AS product_id,\n       g.post_title AS brand_group_name,\n       IF(b.visible = 0, CONCAT(b.name, ' (disabled)'), b.name) AS brand_name,\n       CONCAT(IF(g.post_title IS NULL, '', CONCAT(g.post_title, ' - ')), IF((b.visible = 0), CONCAT(b.name, ' (disabled)'), b.name)) AS brand_full_name,\n       REGEXP_REPLACE(CASE\n                           WHEN p_product.post_title IS NULL THEN p.name\n                           WHEN p.is_parent  AND (COALESCE(p.nb_children, 0) = 0) THEN p_product.post_title\n                           WHEN p.is_parent  AND (p.nb_children > 0) THEN CONCAT(p_product_parent.post_title, ' [Parent]')\n                           WHEN p.post_id <> p.parent_post_id THEN CONCAT(p_product_parent.post_title, ' | ', p_product.post_title)\n                           ELSE p_product.post_title\n                      END, r'\\&.*;', '') AS product_nice_name\nFROM {{ ref('products') }} p\nLEFT JOIN {{ ref('posts') }} p_product ON p_product.ID = p.post_id AND p.dw_country_code = p_product.dw_country_code\nLEFT JOIN {{ ref('posts') }} p_product_parent ON p_product_parent.ID = p.parent_post_id AND p_product_parent.dw_country_code = p.dw_country_code\nLEFT JOIN {{ ref('brands') }} b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\nLEFT JOIN {{ ref('posts') }} g ON g.ID = b.attr_group_post_id AND g.dw_country_code = b.dw_country_code", "language": "sql", "refs": [{"name": "products", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.products", "model.warehouse.posts", "model.warehouse.brands"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/nice_names.sql", "compiled": true, "compiled_code": "SELECT p.dw_country_code,\n       p.id AS product_id,\n       g.post_title AS brand_group_name,\n       IF(b.visible = 0, CONCAT(b.name, ' (disabled)'), b.name) AS brand_name,\n       CONCAT(IF(g.post_title IS NULL, '', CONCAT(g.post_title, ' - ')), IF((b.visible = 0), CONCAT(b.name, ' (disabled)'), b.name)) AS brand_full_name,\n       REGEXP_REPLACE(CASE\n                           WHEN p_product.post_title IS NULL THEN p.name\n                           WHEN p.is_parent  AND (COALESCE(p.nb_children, 0) = 0) THEN p_product.post_title\n                           WHEN p.is_parent  AND (p.nb_children > 0) THEN CONCAT(p_product_parent.post_title, ' [Parent]')\n                           WHEN p.post_id <> p.parent_post_id THEN CONCAT(p_product_parent.post_title, ' | ', p_product.post_title)\n                           ELSE p_product.post_title\n                      END, r'\\&.*;', '') AS product_nice_name\nFROM `teamdata-291012`.`inter`.`products` p\nLEFT JOIN `teamdata-291012`.`inter`.`posts` p_product ON p_product.ID = p.post_id AND p.dw_country_code = p_product.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`posts` p_product_parent ON p_product_parent.ID = p.parent_post_id AND p_product_parent.dw_country_code = p.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`brands` b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\nLEFT JOIN `teamdata-291012`.`inter`.`posts` g ON g.ID = b.attr_group_post_id AND g.dw_country_code = b.dw_country_code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.stock_bs": {"database": "teamdata-291012", "schema": "product", "name": "stock_bs", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/stock_bs.sql", "original_file_path": "models/dwh/product/stock_bs.sql", "unique_id": "model.warehouse.stock_bs", "fqn": ["warehouse", "dwh", "product", "stock_bs"], "alias": "stock_bs", "checksum": {"name": "sha256", "checksum": "d401082d535f60c01ad452a4a2bd66199a0ac82e5a838ab9991766607080a0f4"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.758382, "relation_name": "`teamdata-291012`.`product`.`stock_bs`", "raw_code": "WITH stock as (\nSELECT p.dw_country_code, c.sku, c.pc_cat1, c.pc_cat2, c.codification, \nc.product_id, c.brand_full_name, c.product_nice_name AS name, \np.stock_scamp AS stock, c.sale_price, c.euro_purchase_price, COALESCE(b.box_reservations,0) + COALESCE(b.other_reservations,0) + COALESCE(b.gws_reservations,0) AS bank_reservations, \n  CASE WHEN p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) < 0 THEN 0 ELSE  p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) END AS available_stock\nFROM {{ ref('products') }} p\nJOIN {{ ref('catalog') }} c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nLEFT JOIN (SELECT b.sku, SUM(b.box_reservations) AS box_reservations, SUM(b.other_reservations) AS other_reservations, SUM(b.gws_reservations) AS gws_reservations FROM product.bank b GROUP BY b.sku) AS b ON b.sku = c.sku AND c.dw_country_code = 'FR'\nWHERE c.company_id = 2\n),\n\nposition_details AS (\nSELECT dw_country_code, sku, min(pwl.dluo) AS dluo_min,\nSUM(CASE WHEN zone_key IN ('Z1', 'Z2') THEN stock ELSE 0 END) AS stock_POT1,\nSUM(CASE WHEN zone_key = 'Z3' THEN stock ELSE 0 END) AS stock_POT2\n\nFROM {{ ref('product_warehouse_location') }} pwl\nWHERE date(pwl.created_at) >= CURRENT_DATE\nAND stock > 0\nGROUP BY dw_country_code, sku\n)\n\n\n\n\nSELECT stock.*, COALESCE(stock.stock,0)*COALESCE(euro_purchase_price,0) AS valo_stock, COALESCE(available_stock,0)*COALESCE(euro_purchase_price,0) AS valo_available_stock,\nDATE(position_details.dluo_min) AS dluo_min, position_details.stock_POT1, position_details.stock_POT2,\napd.product_class, apd.stock_coverage\nFROM stock\nLEFT JOIN position_details ON position_details.dw_country_code = stock.dw_country_code AND position_details.sku = stock.sku\nLEFT JOIN `appro.prev_appro_details` apd ON apd.sku = stock.sku AND stock.dw_country_code = 'FR'", "language": "sql", "refs": [{"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "product_warehouse_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.products", "model.warehouse.catalog", "model.warehouse.product_warehouse_location"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/stock_bs.sql", "compiled": true, "compiled_code": "WITH stock as (\nSELECT p.dw_country_code, c.sku, c.pc_cat1, c.pc_cat2, c.codification, \nc.product_id, c.brand_full_name, c.product_nice_name AS name, \np.stock_scamp AS stock, c.sale_price, c.euro_purchase_price, COALESCE(b.box_reservations,0) + COALESCE(b.other_reservations,0) + COALESCE(b.gws_reservations,0) AS bank_reservations, \n  CASE WHEN p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) < 0 THEN 0 ELSE  p.stock_scamp - coalesce(b.box_reservations,0)-coalesce(b.other_reservations, 0) - coalesce(b.gws_reservations,0) END AS available_stock\nFROM `teamdata-291012`.`inter`.`products` p\nJOIN `teamdata-291012`.`product`.`catalog` c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nLEFT JOIN (SELECT b.sku, SUM(b.box_reservations) AS box_reservations, SUM(b.other_reservations) AS other_reservations, SUM(b.gws_reservations) AS gws_reservations FROM product.bank b GROUP BY b.sku) AS b ON b.sku = c.sku AND c.dw_country_code = 'FR'\nWHERE c.company_id = 2\n),\n\nposition_details AS (\nSELECT dw_country_code, sku, min(pwl.dluo) AS dluo_min,\nSUM(CASE WHEN zone_key IN ('Z1', 'Z2') THEN stock ELSE 0 END) AS stock_POT1,\nSUM(CASE WHEN zone_key = 'Z3' THEN stock ELSE 0 END) AS stock_POT2\n\nFROM `teamdata-291012`.`inter`.`product_warehouse_location` pwl\nWHERE date(pwl.created_at) >= CURRENT_DATE\nAND stock > 0\nGROUP BY dw_country_code, sku\n)\n\n\n\n\nSELECT stock.*, COALESCE(stock.stock,0)*COALESCE(euro_purchase_price,0) AS valo_stock, COALESCE(available_stock,0)*COALESCE(euro_purchase_price,0) AS valo_available_stock,\nDATE(position_details.dluo_min) AS dluo_min, position_details.stock_POT1, position_details.stock_POT2,\napd.product_class, apd.stock_coverage\nFROM stock\nLEFT JOIN position_details ON position_details.dw_country_code = stock.dw_country_code AND position_details.sku = stock.sku\nLEFT JOIN `appro.prev_appro_details` apd ON apd.sku = stock.sku AND stock.dw_country_code = 'FR'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.product_classes_3m": {"database": "teamdata-291012", "schema": "product", "name": "product_classes_3m", "resource_type": "model", "package_name": "warehouse", "path": "dwh/product/product_classes_3m.sql", "original_file_path": "models/dwh/product/product_classes_3m.sql", "unique_id": "model.warehouse.product_classes_3m", "fqn": ["warehouse", "dwh", "product", "product_classes_3m"], "alias": "product_classes_3m", "checksum": {"name": "sha256", "checksum": "470991238904d4c342eeb59613c20e87cdc46df0f704822e4bda03b64b5adb8e"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995463.7600708, "relation_name": "`teamdata-291012`.`product`.`product_classes_3m`", "raw_code": "WITH all_dates_table AS (\n  SELECT date\n  FROM (\n    SELECT GENERATE_DATE_ARRAY(DATE_SUB(CURRENT_DATE(), INTERVAL 6 month), CURRENT_DATE()) AS all_dates\n  ),\n  UNNEST(all_dates) date\n),\nreal_parents AS (\n  SELECT parent_product_id\n  FROM (\n    SELECT MAX(CASE WHEN is_parent  THEN id END) AS parent_product_id, COUNT(*) AS nb\n    FROM {{ ref('products') }}\n    WHERE dw_country_code = 'FR'\n    GROUP BY parent_post_id\n  )\n  WHERE nb >= 2\n),\nall_bundles AS (\n  SELECT pbc.bundle_product_id, pbc.component_product_id\n  FROM {{ ref('products_bundle_component') }} pbc\n  INNER JOIN {{ ref('products') }} p ON pbc.bundle_product_id = p.id AND p.attr_is_bundle = 1 AND pbc.dw_country_code = p.dw_country_code\n  WHERE pbc.dw_country_code = 'FR'\n  GROUP BY bundle_product_id, component_product_id\n),\nraw_valid_products AS (\n  SELECT p.id AS product_id\n  FROM {{ ref('products') }}  p\n  INNER JOIN {{ ref('brands') }}  b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n  INNER JOIN {{ ref('posts') }}  po ON p.post_id = po.id AND p.dw_country_code = po.dw_country_code\n  LEFT JOIN real_parents rp ON p.id = rp.parent_product_id\n  WHERE p.product_codification_id = 0\n  AND p.attr_not_sold_anymore = 0\n  AND b.attr_is_inactive = 0\n  AND rp.parent_product_id IS NULL\n  AND p.sku IS NOT NULL\n  AND po.post_status = 'publish'\n  AND (p.special_type IS NULL or p.special_type='')\n  AND p.dw_country_code = 'FR'\n),\nvalid_products AS (\n  SELECT *\n  FROM (\n    SELECT DISTINCT CASE WHEN ab.bundle_product_id IS NULL\n                         THEN t.product_id\n                         ELSE ab.component_product_id\n                    END AS product_id\n    FROM raw_valid_products t\n    LEFT JOIN all_bundles ab ON t.product_id = ab.bundle_product_id\n  )\n),\nvalid_products_with_date AS (\n  SELECT vp.product_id, adt.date\n  FROM valid_products vp\n  CROSS JOIN all_dates_table adt\n),\ndays_in_stock AS (\n  SELECT product_id, COUNTIF(in_stock) AS nb_days_in_stock\n  FROM (\n    SELECT date, product_id, MIN(in_stock) AS in_stock\n    FROM (\n      SELECT DATE(date) AS date, product_id, stock > 0 AS in_stock\n      FROM {{ ref('products_stock_log') }} \n      WHERE dw_country_code = 'FR'\n      UNION ALL\n      SELECT archive_date AS date, id AS product_id, stock > 0 AS in_stock\n      FROM history_table.bdd_prod_fr__wp_jb_products\n    )\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 month)\n    GROUP BY product_id, date\n  )\n  GROUP BY product_id\n),\nall_net_revenue_last_year AS (\n  SELECT ss.product_id, SUM(ss.net_revenue) AS net_revenue\n  FROM {{ ref('shop_sales') }} ss\n  LEFT JOIN {{ ref('products') }} p ON ss.dw_country_code = p.dw_country_code AND ss.bundle_product_id = p.id\n  WHERE ss.dw_country_code = 'FR'\n  AND ss.order_status = 'Valid\u00e9e'\n  AND DATE(ss.order_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 month)\n  AND COALESCE(ss.product_discount, 0) = 0\n  AND COALESCE(ss.sub_discount, 0) <= 0.16 * ss.gross_revenue\n  AND (p.id IS NULL OR p.product_codification_id = 0)\n  GROUP BY ss.product_id\n),\nall_stats_products AS (\n  SELECT vp.product_id,\n         CASE WHEN ds.nb_days_in_stock = 0\n              THEN 0\n              ELSE COALESCE(nr.net_revenue, 0) / ds.nb_days_in_stock\n         END AS net_revenue_by_day,\n         nb_days_in_stock\n  FROM valid_products vp\n  INNER JOIN days_in_stock ds USING(product_id)\n  LEFT JOIN all_net_revenue_last_year nr USING(product_id)\n  ORDER BY net_revenue_by_day DESC\n),\ntotal_net_revenue_one_day_table AS (\n  SELECT SUM(net_revenue_by_day) AS total_net_revenue_one_day\n  FROM all_stats_products\n),\nwith_sumcum AS (\n  SELECT product_id,\n  net_revenue_by_day,\n  SUM(net_revenue_by_day) OVER (PARTITION BY 1 ORDER BY net_revenue_by_day DESC ROWS UNBOUNDED PRECEDING) - net_revenue_by_day AS sumcum_net_revenue_by_day\nFROM all_stats_products\n)\nSELECT ws.product_id,\n       CASE WHEN sumcum_net_revenue_by_day <= 0.8 * tot.total_net_revenue_one_day THEN 'A'\n            WHEN sumcum_net_revenue_by_day <= 0.95 * tot.total_net_revenue_one_day THEN 'B'\n            ELSE 'C'\n       END AS product_class\nFROM with_sumcum ws\nCROSS JOIN total_net_revenue_one_day_table tot", "language": "sql", "refs": [{"name": "products", "package": null, "version": null}, {"name": "products_bundle_component", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "products_stock_log", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.products", "model.warehouse.products_bundle_component", "model.warehouse.brands", "model.warehouse.posts", "model.warehouse.products_stock_log", "model.warehouse.shop_sales"]}, "compiled_path": "target/compiled/warehouse/models/dwh/product/product_classes_3m.sql", "compiled": true, "compiled_code": "WITH all_dates_table AS (\n  SELECT date\n  FROM (\n    SELECT GENERATE_DATE_ARRAY(DATE_SUB(CURRENT_DATE(), INTERVAL 6 month), CURRENT_DATE()) AS all_dates\n  ),\n  UNNEST(all_dates) date\n),\nreal_parents AS (\n  SELECT parent_product_id\n  FROM (\n    SELECT MAX(CASE WHEN is_parent  THEN id END) AS parent_product_id, COUNT(*) AS nb\n    FROM `teamdata-291012`.`inter`.`products`\n    WHERE dw_country_code = 'FR'\n    GROUP BY parent_post_id\n  )\n  WHERE nb >= 2\n),\nall_bundles AS (\n  SELECT pbc.bundle_product_id, pbc.component_product_id\n  FROM `teamdata-291012`.`inter`.`products_bundle_component` pbc\n  INNER JOIN `teamdata-291012`.`inter`.`products` p ON pbc.bundle_product_id = p.id AND p.attr_is_bundle = 1 AND pbc.dw_country_code = p.dw_country_code\n  WHERE pbc.dw_country_code = 'FR'\n  GROUP BY bundle_product_id, component_product_id\n),\nraw_valid_products AS (\n  SELECT p.id AS product_id\n  FROM `teamdata-291012`.`inter`.`products`  p\n  INNER JOIN `teamdata-291012`.`inter`.`brands`  b ON p.brand_id = b.post_id AND p.dw_country_code = b.dw_country_code\n  INNER JOIN `teamdata-291012`.`inter`.`posts`  po ON p.post_id = po.id AND p.dw_country_code = po.dw_country_code\n  LEFT JOIN real_parents rp ON p.id = rp.parent_product_id\n  WHERE p.product_codification_id = 0\n  AND p.attr_not_sold_anymore = 0\n  AND b.attr_is_inactive = 0\n  AND rp.parent_product_id IS NULL\n  AND p.sku IS NOT NULL\n  AND po.post_status = 'publish'\n  AND (p.special_type IS NULL or p.special_type='')\n  AND p.dw_country_code = 'FR'\n),\nvalid_products AS (\n  SELECT *\n  FROM (\n    SELECT DISTINCT CASE WHEN ab.bundle_product_id IS NULL\n                         THEN t.product_id\n                         ELSE ab.component_product_id\n                    END AS product_id\n    FROM raw_valid_products t\n    LEFT JOIN all_bundles ab ON t.product_id = ab.bundle_product_id\n  )\n),\nvalid_products_with_date AS (\n  SELECT vp.product_id, adt.date\n  FROM valid_products vp\n  CROSS JOIN all_dates_table adt\n),\ndays_in_stock AS (\n  SELECT product_id, COUNTIF(in_stock) AS nb_days_in_stock\n  FROM (\n    SELECT date, product_id, MIN(in_stock) AS in_stock\n    FROM (\n      SELECT DATE(date) AS date, product_id, stock > 0 AS in_stock\n      FROM `teamdata-291012`.`inter`.`products_stock_log` \n      WHERE dw_country_code = 'FR'\n      UNION ALL\n      SELECT archive_date AS date, id AS product_id, stock > 0 AS in_stock\n      FROM history_table.bdd_prod_fr__wp_jb_products\n    )\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 month)\n    GROUP BY product_id, date\n  )\n  GROUP BY product_id\n),\nall_net_revenue_last_year AS (\n  SELECT ss.product_id, SUM(ss.net_revenue) AS net_revenue\n  FROM `teamdata-291012`.`sales`.`shop_sales` ss\n  LEFT JOIN `teamdata-291012`.`inter`.`products` p ON ss.dw_country_code = p.dw_country_code AND ss.bundle_product_id = p.id\n  WHERE ss.dw_country_code = 'FR'\n  AND ss.order_status = 'Valid\u00e9e'\n  AND DATE(ss.order_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 month)\n  AND COALESCE(ss.product_discount, 0) = 0\n  AND COALESCE(ss.sub_discount, 0) <= 0.16 * ss.gross_revenue\n  AND (p.id IS NULL OR p.product_codification_id = 0)\n  GROUP BY ss.product_id\n),\nall_stats_products AS (\n  SELECT vp.product_id,\n         CASE WHEN ds.nb_days_in_stock = 0\n              THEN 0\n              ELSE COALESCE(nr.net_revenue, 0) / ds.nb_days_in_stock\n         END AS net_revenue_by_day,\n         nb_days_in_stock\n  FROM valid_products vp\n  INNER JOIN days_in_stock ds USING(product_id)\n  LEFT JOIN all_net_revenue_last_year nr USING(product_id)\n  ORDER BY net_revenue_by_day DESC\n),\ntotal_net_revenue_one_day_table AS (\n  SELECT SUM(net_revenue_by_day) AS total_net_revenue_one_day\n  FROM all_stats_products\n),\nwith_sumcum AS (\n  SELECT product_id,\n  net_revenue_by_day,\n  SUM(net_revenue_by_day) OVER (PARTITION BY 1 ORDER BY net_revenue_by_day DESC ROWS UNBOUNDED PRECEDING) - net_revenue_by_day AS sumcum_net_revenue_by_day\nFROM all_stats_products\n)\nSELECT ws.product_id,\n       CASE WHEN sumcum_net_revenue_by_day <= 0.8 * tot.total_net_revenue_one_day THEN 'A'\n            WHEN sumcum_net_revenue_by_day <= 0.95 * tot.total_net_revenue_one_day THEN 'B'\n            ELSE 'C'\n       END AS product_class\nFROM with_sumcum ws\nCROSS JOIN total_net_revenue_one_day_table tot", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.users": {"database": "teamdata-291012", "schema": "inter", "name": "users", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/users.sql", "original_file_path": "models/dwh/inter/merge/users.sql", "unique_id": "model.warehouse.users", "fqn": ["warehouse", "dwh", "inter", "merge", "users"], "alias": "users", "checksum": {"name": "sha256", "checksum": "2303affd14cf82a3286179ecf0811f5b378e2dd36b7066b330cad08361de0095"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.761835, "relation_name": "`teamdata-291012`.`inter`.`users`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_users\" -%}   \n{%- set target_table = \"inter.users\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/users.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_suspend_survey_result": {"database": "teamdata-291012", "schema": "inter", "name": "sub_suspend_survey_result", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_suspend_survey_result.sql", "original_file_path": "models/dwh/inter/merge/sub_suspend_survey_result.sql", "unique_id": "model.warehouse.sub_suspend_survey_result", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_suspend_survey_result"], "alias": "sub_suspend_survey_result", "checksum": {"name": "sha256", "checksum": "1fe62790494c1a521ff90e0cb91defdf50a6dbe918fe832f9e1c8bfdee127332"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.768838, "relation_name": "`teamdata-291012`.`inter`.`sub_suspend_survey_result`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_suspend_survey_result\" -%}   \n{%- set target_table = \"inter.sub_suspend_survey_result\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, result_id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      result_id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.result_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.result_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_suspend_survey_result.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.result_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_suspend_survey_result` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.result_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.prod_de.wp_jb_sub_suspend_survey_result` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.result_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_suspend_survey_result` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.result_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_suspend_survey_result` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.raf_order_link": {"database": "teamdata-291012", "schema": "inter", "name": "raf_order_link", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/raf_order_link.sql", "original_file_path": "models/dwh/inter/merge/raf_order_link.sql", "unique_id": "model.warehouse.raf_order_link", "fqn": ["warehouse", "dwh", "inter", "merge", "raf_order_link"], "alias": "raf_order_link", "checksum": {"name": "sha256", "checksum": "3648f6b94b95900415ce623623f0ead18c3b5225905c5f04cec98e585df66aba"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.7757518, "relation_name": "`teamdata-291012`.`inter`.`raf_order_link`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_raf_order_link\" -%}   \n{%- set target_table = \"inter.raf_order_link\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\nWITH base_data AS (\n  {%- if is_incremental() -%}\n    {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n    {%- for country in countries %}\n    SELECT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(b.id AS INT64) AS id,\n      CAST(b.order_id AS INT64) AS order_id,\n      b.* EXCEPT(id, order_id)\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n    WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n      AND b._airbyte_extracted_at >= {{ window_start }}\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor %}\n  {%- else -%}\n    {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n    {%- for country in countries %}\n    SELECT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(b.id AS INT64) AS id,\n      CAST(b.order_id AS INT64) AS order_id,\n      b.* EXCEPT(id, order_id)\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n    WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor %}\n  {%- endif -%}\n),\n\n-- D\u00e9duplication : garde seulement le MAX(id) par (dw_country_code, order_id)\nmax_ids AS (\n  SELECT \n    dw_country_code,\n    order_id,\n    MAX(id) AS max_id\n  FROM base_data\n  GROUP BY dw_country_code, order_id\n)\n\n-- S\u00e9lection finale : uniquement les lignes avec MAX(id)\nSELECT \n  base_data.dw_country_code,\n  base_data.id,\n  base_data.* EXCEPT(dw_country_code, id)\nFROM base_data\nINNER JOIN max_ids \n  ON base_data.dw_country_code = max_ids.dw_country_code\n  AND base_data.order_id = max_ids.order_id\n  AND base_data.id = max_ids.max_id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/raf_order_link.sql", "compiled": true, "compiled_code": "\n\n\n\n\nWITH base_data AS (\n    SELECT\n      'FR' AS dw_country_code,\n      CAST(b.id AS INT64) AS id,\n      CAST(b.order_id AS INT64) AS order_id,\n      b.* EXCEPT(id, order_id)\n    FROM `teamdata-291012.bdd_prod_fr.wp_jb_raf_order_link` AS b\n    WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n      AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n    UNION ALL\n    SELECT\n      'DE' AS dw_country_code,\n      CAST(b.id AS INT64) AS id,\n      CAST(b.order_id AS INT64) AS order_id,\n      b.* EXCEPT(id, order_id)\n    FROM `teamdata-291012.prod_de.wp_jb_raf_order_link` AS b\n    WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n      AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n    UNION ALL\n    SELECT\n      'ES' AS dw_country_code,\n      CAST(b.id AS INT64) AS id,\n      CAST(b.order_id AS INT64) AS order_id,\n      b.* EXCEPT(id, order_id)\n    FROM `teamdata-291012.bdd_prod_es.wp_jb_raf_order_link` AS b\n    WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n      AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n    UNION ALL\n    SELECT\n      'IT' AS dw_country_code,\n      CAST(b.id AS INT64) AS id,\n      CAST(b.order_id AS INT64) AS order_id,\n      b.* EXCEPT(id, order_id)\n    FROM `teamdata-291012.bdd_prod_it.wp_jb_raf_order_link` AS b\n    WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n      AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n    ),\n\n-- D\u00e9duplication : garde seulement le MAX(id) par (dw_country_code, order_id)\nmax_ids AS (\n  SELECT \n    dw_country_code,\n    order_id,\n    MAX(id) AS max_id\n  FROM base_data\n  GROUP BY dw_country_code, order_id\n)\n\n-- S\u00e9lection finale : uniquement les lignes avec MAX(id)\nSELECT \n  base_data.dw_country_code,\n  base_data.id,\n  base_data.* EXCEPT(dw_country_code, id)\nFROM base_data\nINNER JOIN max_ids \n  ON base_data.dw_country_code = max_ids.dw_country_code\n  AND base_data.order_id = max_ids.order_id\n  AND base_data.id = max_ids.max_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.company": {"database": "teamdata-291012", "schema": "inter", "name": "company", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/company.sql", "original_file_path": "models/dwh/inter/merge/company.sql", "unique_id": "model.warehouse.company", "fqn": ["warehouse", "dwh", "inter", "merge", "company"], "alias": "company", "checksum": {"name": "sha256", "checksum": "c1b5cd8b4b364f1239323780194a879631b189e19cc49150dc0673f1965c95e2"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.782732, "relation_name": "`teamdata-291012`.`inter`.`company`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_company\" -%}   \n{%- set target_table = \"inter.company\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/company.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_company` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_company` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_company` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_company` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.product_warehouse_location": {"database": "teamdata-291012", "schema": "inter", "name": "product_warehouse_location", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/product_warehouse_location.sql", "original_file_path": "models/dwh/inter/merge/product_warehouse_location.sql", "unique_id": "model.warehouse.product_warehouse_location", "fqn": ["warehouse", "dwh", "inter", "merge", "product_warehouse_location"], "alias": "product_warehouse_location", "checksum": {"name": "sha256", "checksum": "d4eedfd780e19340fa0deda1bde9c1c1ca719cc3a6ead441e7b8764e8514dc1b"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.789411, "relation_name": "`teamdata-291012`.`inter`.`product_warehouse_location`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_product_warehouse_location\" -%}   \n{%- set target_table = \"inter.product_warehouse_location\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/product_warehouse_location.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_product_warehouse_location` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_product_warehouse_location` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_product_warehouse_location` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_product_warehouse_location` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_payments_status": {"database": "teamdata-291012", "schema": "inter", "name": "sub_payments_status", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_payments_status.sql", "original_file_path": "models/dwh/inter/merge/sub_payments_status.sql", "unique_id": "model.warehouse.sub_payments_status", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_payments_status"], "alias": "sub_payments_status", "checksum": {"name": "sha256", "checksum": "94142916574230109eef8418d65fab68cbeee34b9defe4ed68d30471513e8a98"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.7967842, "relation_name": "`teamdata-291012`.`inter`.`sub_payments_status`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_payments_status\" -%}   \n{%- set target_table = \"inter.sub_payments_status\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_payments_status.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_payments_status` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_sub_payments_status` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_payments_status` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_payments_status` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.kit_links": {"database": "teamdata-291012", "schema": "inter", "name": "kit_links", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/kit_links.sql", "original_file_path": "models/dwh/inter/merge/kit_links.sql", "unique_id": "model.warehouse.kit_links", "fqn": ["warehouse", "dwh", "inter", "merge", "kit_links"], "alias": "kit_links", "checksum": {"name": "sha256", "checksum": "5b019bb74d66180397a9eeb7a4b904af86311e0177cb00ce8587f16b3c2f65a1"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "dw_country_code"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"], "partition_by": {"field": "_rivery_last_update", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["id", "dw_country_code"], "partition_by": {"field": "_rivery_last_update", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995463.8035042, "relation_name": "`teamdata-291012`.`inter`.`kit_links`", "raw_code": "{{ config(\n    partition_by={\n    \"field\": \"_rivery_last_update\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by=['dw_country_code']\n) }}\n\n--partition \n{% set lookback_hours = 2 %}\n--lookback 2h\n\n\n{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_kit_links')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_kit_links')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_kit_links')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_kit_links')) -%}\n\n\n--donn\u00e9es FR\nSELECT 'FR' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_kit_links` t\nWHERE \n  -- Filtre sur les lignes non supprim\u00e9es\n  {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  -- Filtre sur les donn\u00e9es r\u00e9centes uniquement\n  {% if is_incremental() %}\n  (\n    -- Donn\u00e9es mises \u00e0 jour r\u00e9cemment (dans les X derni\u00e8res heures)\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  -- Premier chargement: toutes les donn\u00e9es\n  TRUE\n  {% endif %}\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_kit_links` t\nWHERE \n  {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  {% if is_incremental() %}\n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  TRUE\n  {% endif %}\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_kit_links` t\nWHERE \n  {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  {% if is_incremental() %}\n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  TRUE\n  {% endif %}\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_kit_links` t\nWHERE \n  {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  {% if is_incremental() %}\n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  TRUE\n  {% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/kit_links.sql", "compiled": true, "compiled_code": "\n\n--partition \n\n--lookback 2h--donn\u00e9es FR\nSELECT 'FR' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_kit_links` t\nWHERE \n  -- Filtre sur les lignes non supprim\u00e9es\n  (t.__deleted is null OR t.__deleted = false) AND\n  -- Filtre sur les donn\u00e9es r\u00e9centes uniquement\n  \n  (\n    -- Donn\u00e9es mises \u00e0 jour r\u00e9cemment (dans les X derni\u00e8res heures)\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  \nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_kit_links` t\nWHERE \n  (t.__deleted is null OR t.__deleted = false) AND\n  \n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  \nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_kit_links` t\nWHERE \n  (t.__deleted is null OR t.__deleted = false) AND\n  \n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  \nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nconcat(cast(kit_id as string),'_',cast( product_id as string)) as id ,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_kit_links` t\nWHERE \n  (t.__deleted is null OR t.__deleted = false) AND\n  \n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.payments": {"database": "teamdata-291012", "schema": "inter", "name": "payments", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/payments.sql", "original_file_path": "models/dwh/inter/merge/payments.sql", "unique_id": "model.warehouse.payments", "fqn": ["warehouse", "dwh", "inter", "merge", "payments"], "alias": "payments", "checksum": {"name": "sha256", "checksum": "8b1d044b26a68e9b9fc018d15c49bd9d69288ee43dc20f1e01aed7e79733632f"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.8174562, "relation_name": "`teamdata-291012`.`inter`.`payments`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_payments\" -%}   \n{%- set target_table = \"inter.payments\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n\n '{{ country.code }}' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  _airbyte_extracted_at\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n\n '{{ country.code }}' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  _airbyte_extracted_at\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/payments.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n\n 'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  _airbyte_extracted_at\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_payments` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n\n 'DE' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  _airbyte_extracted_at\n  FROM `teamdata-291012.prod_de.wp_jb_payments` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n\n 'ES' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  _airbyte_extracted_at\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_payments` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n\n 'IT' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  _airbyte_extracted_at\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_payments` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.survey_result_answers": {"database": "teamdata-291012", "schema": "inter", "name": "survey_result_answers", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/survey_result_answers.sql", "original_file_path": "models/dwh/inter/merge/survey_result_answers.sql", "unique_id": "model.warehouse.survey_result_answers", "fqn": ["warehouse", "dwh", "inter", "merge", "survey_result_answers"], "alias": "survey_result_answers", "checksum": {"name": "sha256", "checksum": "e0f387cb6c22e89b47d19fa942fea2d57fa63438443a5dc2bdf2069e71cbf433"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_survey_result_answers', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_survey_result_answers', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995463.824086, "relation_name": "`teamdata-291012`.`inter`.`survey_result_answers`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_survey_result_answers\" -%}   \n{%- set target_table = \"inter.survey_result_answers\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n  post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/survey_result_answers.sql", "compiled": true, "compiled_code": "\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_survey_result_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_survey_result_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_survey_result_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_survey_result_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.tags": {"database": "teamdata-291012", "schema": "inter", "name": "tags", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/tags.sql", "original_file_path": "models/dwh/inter/merge/tags.sql", "unique_id": "model.warehouse.tags", "fqn": ["warehouse", "dwh", "inter", "merge", "tags"], "alias": "tags", "checksum": {"name": "sha256", "checksum": "f28fb9dac53d19a82b3fec02bce60e26d4b7a8b293e4f295bbe1e181db841042"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_tags', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_tags', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995463.831234, "relation_name": "`teamdata-291012`.`inter`.`tags`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_tags\" -%}   \n{%- set target_table = \"inter.tags\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n  post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL \" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/tags.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_tags` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL \n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_tags` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL \n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_tags` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL \n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_tags` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.user_consent_history": {"database": "teamdata-291012", "schema": "inter", "name": "user_consent_history", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/user_consent_history.sql", "original_file_path": "models/dwh/inter/merge/user_consent_history.sql", "unique_id": "model.warehouse.user_consent_history", "fqn": ["warehouse", "dwh", "inter", "merge", "user_consent_history"], "alias": "user_consent_history", "checksum": {"name": "sha256", "checksum": "8eded6d0e0b1af6353a630202a4891c751f450069b1092d40c017b1896227a1f"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.837523, "relation_name": "`teamdata-291012`.`inter`.`user_consent_history`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_user_consent_history\" -%}   \n{%- set target_table = \"inter.user_consent_history\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/user_consent_history.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_user_consent_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_user_consent_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_user_consent_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_user_consent_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.reward_points_history_uses": {"database": "teamdata-291012", "schema": "inter", "name": "reward_points_history_uses", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/reward_points_history_uses.sql", "original_file_path": "models/dwh/inter/merge/reward_points_history_uses.sql", "unique_id": "model.warehouse.reward_points_history_uses", "fqn": ["warehouse", "dwh", "inter", "merge", "reward_points_history_uses"], "alias": "reward_points_history_uses", "checksum": {"name": "sha256", "checksum": "319c5d383812b56545fa56aadc9399fb865a443741ec1380f777736332e54531"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.8439748, "relation_name": "`teamdata-291012`.`inter`.`reward_points_history_uses`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_reward_points_history_uses\" -%}   \n{%- set target_table = \"inter.reward_points_history_uses\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/reward_points_history_uses.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_reward_points_history_uses` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_reward_points_history_uses` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_reward_points_history_uses` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_reward_points_history_uses` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.prepacked_products": {"database": "teamdata-291012", "schema": "inter", "name": "prepacked_products", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/prepacked_products.sql", "original_file_path": "models/dwh/inter/merge/prepacked_products.sql", "unique_id": "model.warehouse.prepacked_products", "fqn": ["warehouse", "dwh", "inter", "merge", "prepacked_products"], "alias": "prepacked_products", "checksum": {"name": "sha256", "checksum": "cbbc2aeeee2009910a2218586f0fa3bf9708c4da3d67c8f07e57dc4924bd286e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.850608, "relation_name": "`teamdata-291012`.`inter`.`prepacked_products`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_prepacked_products\" -%}   \n{%- set target_table = \"inter.prepacked_products\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/prepacked_products.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_prepacked_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_prepacked_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_prepacked_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_prepacked_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.products": {"database": "teamdata-291012", "schema": "inter", "name": "products", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/products.sql", "original_file_path": "models/dwh/inter/merge/products.sql", "unique_id": "model.warehouse.products", "fqn": ["warehouse", "dwh", "inter", "merge", "products"], "alias": "products", "checksum": {"name": "sha256", "checksum": "3ba82536bf613dea7e2f2b201d5dd16f961e91a65ad7933818dcca4c0c736c4e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.8571022, "relation_name": "`teamdata-291012`.`inter`.`products`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_products\" -%}   \n{%- set target_table = \"inter.products\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/products.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.products_bundle_component": {"database": "teamdata-291012", "schema": "inter", "name": "products_bundle_component", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/products_bundle_component.sql", "original_file_path": "models/dwh/inter/merge/products_bundle_component.sql", "unique_id": "model.warehouse.products_bundle_component", "fqn": ["warehouse", "dwh", "inter", "merge", "products_bundle_component"], "alias": "products_bundle_component", "checksum": {"name": "sha256", "checksum": "fdd388bc551040b174a704deb80ce65691f49a7073517c8fb95647a705806834"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "dw_country_code"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"], "partition_by": {"field": "_rivery_last_update", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["id", "dw_country_code"], "partition_by": {"field": "_rivery_last_update", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995463.8643599, "relation_name": "`teamdata-291012`.`inter`.`products_bundle_component`", "raw_code": "{{ config(\n    partition_by={\n    \"field\": \"_rivery_last_update\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by=['dw_country_code']\n) }}\n\n--partition \n{% set lookback_hours = 2 %}\n--lookback 2h\n\n{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_products_bundle_component')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_products_bundle_component')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_products_bundle_component')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_products_bundle_component')) -%}\n\n--donn\u00e9es FR\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_products_bundle_component` t\nWHERE \n  -- Filtre sur les lignes non supprim\u00e9es\n  {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  -- Filtre sur les donn\u00e9es r\u00e9centes uniquement\n  {% if is_incremental() %}\n  (\n    -- Donn\u00e9es mises \u00e0 jour r\u00e9cemment (dans les X derni\u00e8res heures)\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  -- Premier chargement: toutes les donn\u00e9es\n  TRUE\n  {% endif %}\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_products_bundle_component` t\nWHERE \n  {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  {% if is_incremental() %}\n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  TRUE\n  {% endif %}\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_products_bundle_component` t\nWHERE \n  {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  {% if is_incremental() %}\n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  TRUE\n  {% endif %}\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id{% endif %}\n --{% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_products_bundle_component` t\nWHERE \n  {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) AND{% endif %}\n  {% if is_incremental() %}\n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n\n  )\n  {% else %}\n  TRUE\n  {% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/products_bundle_component.sql", "compiled": true, "compiled_code": "\n\n--partition \n\n--lookback 2h--donn\u00e9es FR\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_products_bundle_component` t\nWHERE \n  -- Filtre sur les lignes non supprim\u00e9es\n  (t.__deleted is null OR t.__deleted = false) AND\n  -- Filtre sur les donn\u00e9es r\u00e9centes uniquement\n  \n  (\n    -- Donn\u00e9es mises \u00e0 jour r\u00e9cemment (dans les X derni\u00e8res heures)\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  \nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_products_bundle_component` t\nWHERE \n  (t.__deleted is null OR t.__deleted = false) AND\n  \n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  \nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_products_bundle_component` t\nWHERE \n  (t.__deleted is null OR t.__deleted = false) AND\n  \n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  \nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id\n --_rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_products_bundle_component` t\nWHERE \n  \n  \n  (\n    t._rivery_last_update >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n\n  )\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.invoices": {"database": "teamdata-291012", "schema": "inter", "name": "invoices", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/invoices.sql", "original_file_path": "models/dwh/inter/merge/invoices.sql", "unique_id": "model.warehouse.invoices", "fqn": ["warehouse", "dwh", "inter", "merge", "invoices"], "alias": "invoices", "checksum": {"name": "sha256", "checksum": "6e55331f15eaf49fae9dbccf686d2d5ef123b06ea4fa17ea341238e98050bbcd"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.878125, "relation_name": "`teamdata-291012`.`inter`.`invoices`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_invoices\" -%}   \n{%- set target_table = \"inter.invoices\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/invoices.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_invoices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_invoices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_invoices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_invoices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.b2c_order_notifications": {"database": "teamdata-291012", "schema": "inter", "name": "b2c_order_notifications", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/b2c_order_notifications.sql", "original_file_path": "models/dwh/inter/merge/b2c_order_notifications.sql", "unique_id": "model.warehouse.b2c_order_notifications", "fqn": ["warehouse", "dwh", "inter", "merge", "b2c_order_notifications"], "alias": "b2c_order_notifications", "checksum": {"name": "sha256", "checksum": "eb207a79a49eced41b8c49f6d31d8ea9a3e7a1599fd03f039ff7b8e60f7cfe31"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.8848572, "relation_name": "`teamdata-291012`.`inter`.`b2c_order_notifications`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_B2C_order_notifications\" -%}   \n{%- set target_table = \"inter.B2C_order_notifications\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/b2c_order_notifications.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_B2C_order_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_B2C_order_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_B2C_order_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_B2C_order_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_suspended_reasons": {"database": "teamdata-291012", "schema": "inter", "name": "sub_suspended_reasons", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_suspended_reasons.sql", "original_file_path": "models/dwh/inter/merge/sub_suspended_reasons.sql", "unique_id": "model.warehouse.sub_suspended_reasons", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_suspended_reasons"], "alias": "sub_suspended_reasons", "checksum": {"name": "sha256", "checksum": "5238c9c55a3215200c716a8799fe54d37ac67bb662b4a8e5cdad21952e01622b"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.891584, "relation_name": "`teamdata-291012`.`inter`.`sub_suspended_reasons`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_suspended_reasons\" -%}   \n{%- set target_table = \"inter.sub_suspended_reasons\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_suspended_reasons.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_suspended_reasons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_sub_suspended_reasons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_suspended_reasons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_suspended_reasons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.open_comment_posts": {"database": "teamdata-291012", "schema": "inter", "name": "open_comment_posts", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/open_comment_posts.sql", "original_file_path": "models/dwh/inter/merge/open_comment_posts.sql", "unique_id": "model.warehouse.open_comment_posts", "fqn": ["warehouse", "dwh", "inter", "merge", "open_comment_posts"], "alias": "open_comment_posts", "checksum": {"name": "sha256", "checksum": "2cd2cc3a8e2bc33caacdb6f3ab4880fe977599d8da7e0fda12f59fdf58e1eb61"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.898088, "relation_name": "`teamdata-291012`.`inter`.`open_comment_posts`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_open_comment_posts\" -%}   \n{%- set target_table = \"inter.open_comment_posts\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/open_comment_posts.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_open_comment_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_open_comment_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_open_comment_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_open_comment_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.posts": {"database": "teamdata-291012", "schema": "inter", "name": "posts", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/posts.sql", "original_file_path": "models/dwh/inter/merge/posts.sql", "unique_id": "model.warehouse.posts", "fqn": ["warehouse", "dwh", "inter", "merge", "posts"], "alias": "posts", "checksum": {"name": "sha256", "checksum": "820d3d54d2da4a7622456400dab071931bf518b99a1356d77162ebd45ac431a4"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.905451, "relation_name": "`teamdata-291012`.`inter`.`posts`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_posts\" -%}   \n{%- set target_table = \"inter.posts\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/posts.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_posts` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_order_link": {"database": "teamdata-291012", "schema": "inter", "name": "sub_order_link", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_order_link.sql", "original_file_path": "models/dwh/inter/merge/sub_order_link.sql", "unique_id": "model.warehouse.sub_order_link", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_order_link"], "alias": "sub_order_link", "checksum": {"name": "sha256", "checksum": "ad1b47efa3db952ceb810c996a5e7bca3fb403e7eee2a750ac1b1fc8c609525a"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.9120939, "relation_name": "`teamdata-291012`.`inter`.`sub_order_link`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_order_link\" -%}   \n{%- set target_table = \"inter.sub_order_link\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_order_link.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_order_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_sub_order_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_order_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_order_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.order_detail_sub": {"database": "teamdata-291012", "schema": "inter", "name": "order_detail_sub", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/order_detail_sub.sql", "original_file_path": "models/dwh/inter/merge/order_detail_sub.sql", "unique_id": "model.warehouse.order_detail_sub", "fqn": ["warehouse", "dwh", "inter", "merge", "order_detail_sub"], "alias": "order_detail_sub", "checksum": {"name": "sha256", "checksum": "7937f284b43b1a5e7e7eb27584a1dd3e2cd646095bb40a27e2d78c2d55ae688e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_order_detail_sub', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_order_detail_sub', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995463.918871, "relation_name": "`teamdata-291012`.`inter`.`order_detail_sub`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_order_detail_sub\" -%}   \n{%- set target_table = \"inter.order_detail_sub\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n  post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/order_detail_sub.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_order_detail_sub` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_order_detail_sub` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_order_detail_sub` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_order_detail_sub` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.raf_reward_moment": {"database": "teamdata-291012", "schema": "inter", "name": "raf_reward_moment", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/raf_reward_moment.sql", "original_file_path": "models/dwh/inter/merge/raf_reward_moment.sql", "unique_id": "model.warehouse.raf_reward_moment", "fqn": ["warehouse", "dwh", "inter", "merge", "raf_reward_moment"], "alias": "raf_reward_moment", "checksum": {"name": "sha256", "checksum": "16e3323147aee89895ada7e5581375f475b11c9d8494d68b4061a175688da5e3"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.925427, "relation_name": "`teamdata-291012`.`inter`.`raf_reward_moment`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_raf_reward_moment\" -%}   \n{%- set target_table = \"inter.raf_reward_moment\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/raf_reward_moment.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_raf_reward_moment` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_raf_reward_moment` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_raf_reward_moment` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_raf_reward_moment` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.orders": {"database": "teamdata-291012", "schema": "inter", "name": "orders", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/orders.sql", "original_file_path": "models/dwh/inter/merge/orders.sql", "unique_id": "model.warehouse.orders", "fqn": ["warehouse", "dwh", "inter", "merge", "orders"], "alias": "orders", "checksum": {"name": "sha256", "checksum": "cf069e944e4242e4979aa785d78b73176e952039028e22deaa9d265bffa78766"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_orders', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_orders', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995463.9330702, "relation_name": "`teamdata-291012`.`inter`.`orders`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_orders\" -%}   \n{%- set target_table = \"inter.orders\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n  post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/orders.sql", "compiled": true, "compiled_code": "\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_orders` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_orders` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_orders` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_orders` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.choose_choices": {"database": "teamdata-291012", "schema": "inter", "name": "choose_choices", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/choose_choices.sql", "original_file_path": "models/dwh/inter/merge/choose_choices.sql", "unique_id": "model.warehouse.choose_choices", "fqn": ["warehouse", "dwh", "inter", "merge", "choose_choices"], "alias": "choose_choices", "checksum": {"name": "sha256", "checksum": "3e86d260d89a49fdf57f5b970bd106df25d2185d5c702592b3672fa86b75cff7"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.939581, "relation_name": "`teamdata-291012`.`inter`.`choose_choices`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_choose_choices\" -%}   \n{%- set target_table = \"inter.choose_choices\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/choose_choices.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_choose_choices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_choose_choices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_choose_choices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_choose_choices` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.inventory_items": {"database": "teamdata-291012", "schema": "inter", "name": "inventory_items", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/inventory_items.sql", "original_file_path": "models/dwh/inter/merge/inventory_items.sql", "unique_id": "model.warehouse.inventory_items", "fqn": ["warehouse", "dwh", "inter", "merge", "inventory_items"], "alias": "inventory_items", "checksum": {"name": "sha256", "checksum": "b526b4ddc50b371b5713679ad2c96c90c1e94b9bae73421022e5220775eab26e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.946739, "relation_name": "`teamdata-291012`.`inter`.`inventory_items`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_inventory_items\" -%}   \n{%- set target_table = \"inter.inventory_items\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/inventory_items.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_inventory_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_inventory_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_inventory_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_inventory_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.survey_answers": {"database": "teamdata-291012", "schema": "inter", "name": "survey_answers", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/survey_answers.sql", "original_file_path": "models/dwh/inter/merge/survey_answers.sql", "unique_id": "model.warehouse.survey_answers", "fqn": ["warehouse", "dwh", "inter", "merge", "survey_answers"], "alias": "survey_answers", "checksum": {"name": "sha256", "checksum": "4685105dadcfccd70481059070b2046f5c8347456a095a8177603302f013fd31"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.954308, "relation_name": "`teamdata-291012`.`inter`.`survey_answers`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_survey_answers\" -%}   \n{%- set target_table = \"inter.survey_answers\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/survey_answers.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_survey_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_survey_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_survey_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_survey_answers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.raf_offers": {"database": "teamdata-291012", "schema": "inter", "name": "raf_offers", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/raf_offers.sql", "original_file_path": "models/dwh/inter/merge/raf_offers.sql", "unique_id": "model.warehouse.raf_offers", "fqn": ["warehouse", "dwh", "inter", "merge", "raf_offers"], "alias": "raf_offers", "checksum": {"name": "sha256", "checksum": "a9b81e07315bb13e7f3900afd1814ac4d6ea816e9c69df47dd8b864f900a9c25"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.9615018, "relation_name": "`teamdata-291012`.`inter`.`raf_offers`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_raf_offers\" -%}   \n{%- set target_table = \"inter.raf_offers\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/raf_offers.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_raf_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_raf_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_raf_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_raf_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.mini_lte_reexp": {"database": "teamdata-291012", "schema": "inter", "name": "mini_lte_reexp", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/mini_lte_reexp.sql", "original_file_path": "models/dwh/inter/merge/mini_lte_reexp.sql", "unique_id": "model.warehouse.mini_lte_reexp", "fqn": ["warehouse", "dwh", "inter", "merge", "mini_lte_reexp"], "alias": "mini_lte_reexp", "checksum": {"name": "sha256", "checksum": "ed0496e615d276378d80510eb83024180bc9b79f210aca0e81705424ebf38a46"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.969555, "relation_name": "`teamdata-291012`.`inter`.`mini_lte_reexp`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_mini_lte_reexp\" -%}   \n{%- set target_table = \"inter.mini_lte_reexp\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/mini_lte_reexp.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_mini_lte_reexp` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_mini_lte_reexp` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_mini_lte_reexp` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_mini_lte_reexp` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shipup_tracking": {"database": "teamdata-291012", "schema": "inter", "name": "shipup_tracking", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/shipup_tracking.sql", "original_file_path": "models/dwh/inter/merge/shipup_tracking.sql", "unique_id": "model.warehouse.shipup_tracking", "fqn": ["warehouse", "dwh", "inter", "merge", "shipup_tracking"], "alias": "shipup_tracking", "checksum": {"name": "sha256", "checksum": "9087306821bd2acbe6ef348da3dd5d3fc73dc48f29427ce6e589f03c0c3b35cb"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.976668, "relation_name": "`teamdata-291012`.`inter`.`shipup_tracking`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_shipup_tracking\" -%}   \n{%- set target_table = \"inter.shipup_tracking\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/shipup_tracking.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_shipup_tracking` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_shipup_tracking` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_shipup_tracking` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_shipup_tracking` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.raf_offer_details": {"database": "teamdata-291012", "schema": "inter", "name": "raf_offer_details", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/raf_offer_details.sql", "original_file_path": "models/dwh/inter/merge/raf_offer_details.sql", "unique_id": "model.warehouse.raf_offer_details", "fqn": ["warehouse", "dwh", "inter", "merge", "raf_offer_details"], "alias": "raf_offer_details", "checksum": {"name": "sha256", "checksum": "f8be322f9b1e0903016164a69af9594a77b08a04f480877c97081ec56051d15c"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.984413, "relation_name": "`teamdata-291012`.`inter`.`raf_offer_details`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_raf_offer_details\" -%}   \n{%- set target_table = \"inter.raf_offer_details\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/raf_offer_details.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_raf_offer_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_raf_offer_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_raf_offer_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_raf_offer_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.user_consent": {"database": "teamdata-291012", "schema": "inter", "name": "user_consent", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/user_consent.sql", "original_file_path": "models/dwh/inter/merge/user_consent.sql", "unique_id": "model.warehouse.user_consent", "fqn": ["warehouse", "dwh", "inter", "merge", "user_consent"], "alias": "user_consent", "checksum": {"name": "sha256", "checksum": "fd0ddeb35f7f06ba85094cd2821ec3b6c87b230996fce1b66ceaa65069370f6e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.991727, "relation_name": "`teamdata-291012`.`inter`.`user_consent`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_user_consent\" -%}   \n{%- set target_table = \"inter.user_consent\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/user_consent.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_user_consent` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_user_consent` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_user_consent` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_user_consent` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.choose_users": {"database": "teamdata-291012", "schema": "inter", "name": "choose_users", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/choose_users.sql", "original_file_path": "models/dwh/inter/merge/choose_users.sql", "unique_id": "model.warehouse.choose_users", "fqn": ["warehouse", "dwh", "inter", "merge", "choose_users"], "alias": "choose_users", "checksum": {"name": "sha256", "checksum": "536d5aafd43e917d21650592dc295bc204aef409e10b7b847628cc198888a5d1"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995463.999029, "relation_name": "`teamdata-291012`.`inter`.`choose_users`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_choose_users\" -%}   \n{%- set target_table = \"inter.choose_users\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/choose_users.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_choose_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_choose_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_choose_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_choose_users` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.customers_beauty_profile": {"database": "teamdata-291012", "schema": "user", "name": "customers_beauty_profile", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/customers_beauty_profile.sql", "original_file_path": "models/dwh/inter/merge/customers_beauty_profile.sql", "unique_id": "model.warehouse.customers_beauty_profile", "fqn": ["warehouse", "dwh", "inter", "merge", "customers_beauty_profile"], "alias": "customers_beauty_profile", "checksum": {"name": "sha256", "checksum": "85fd9164db3a08ce7022df7871c437aade7beec5a190df7a113c102e1a266f85"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "dw_country_code"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "skin_redness", "bath_products", "hair_products"], "partition_by": {"field": "last_update", "data_type": "date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["id", "dw_country_code"], "partition_by": {"field": "last_update", "data_type": "date"}, "cluster_by": ["dw_country_code", "skin_redness", "bath_products", "hair_products"]}, "created_at": 1759995464.006974, "relation_name": "`teamdata-291012`.`user`.`customers_beauty_profile`", "raw_code": "{{ config(\n    partition_by={\n\"field\": \"last_update\",\n     \"data_type\": \"date\"\n    },\n    cluster_by=['dw_country_code', 'skin_redness','bath_products','hair_products']\n) }}\n\n--partition \n{% set lookback_hours = 2 %}\n--lookback 2h\n\nSELECT    concat(sq.dw_country_code,'_',cast(sr.user_id as string)) as ID,\n          sq.dw_country_code,\n       sr.user_id,\n         MAX(CASE WHEN sq.id = 46861 THEN sa.value END) AS beauty_budget,\n         MAX(CASE WHEN sq.id = 62162 THEN sa.value END) AS skin_tone,\n         MAX(CASE WHEN sq.id = 62163 THEN sa.value END) AS eyebrows,\n         MAX(CASE WHEN sq.id = 62165 THEN sa.value END) AS face_care,\n         MAX(CASE WHEN sq.id = 62166 THEN sa.value END) AS body_care,\n         MAX(CASE WHEN sq.id = 62167 THEN sa.value END) AS bath_products,\n         MAX(CASE WHEN sq.id = 62168 THEN sa.value END) AS makeup_general,\n         MAX(CASE WHEN sq.id = 62169 THEN sa.value END) AS makeup_eyes,\n         MAX(CASE WHEN sq.id = 62170 THEN sa.value END) AS makeup_lips,\n         MAX(CASE WHEN sq.id = 62171 THEN sa.value END) AS makeup_eyebrows,\n         MAX(CASE WHEN sq.id = 62172 THEN sa.value END) AS makeup_complexion,\n         MAX(CASE WHEN sq.id = 62173 THEN sa.value END) AS makeup_nails,\n         MAX(CASE WHEN sq.id = 62174 THEN sa.value END) AS hair_shampoo,\n         MAX(CASE WHEN sq.id = 62175 THEN sa.value END) AS hair_conditioner,\n         MAX(CASE WHEN sq.id = 62176 THEN sa.value END) AS hair_mask,\n         MAX(CASE WHEN sq.id = 62177 THEN sa.value END) AS hair_styling,\n         MAX(CASE WHEN sq.id = 62178 THEN sa.value END) AS accessories,\n         MAX(CASE WHEN sq.id = 62179 THEN sa.value END) AS food_supplements,\n         MAX(CASE WHEN sq.id = 62180 THEN sa.value END) AS green_natural_products,\n         MAX(CASE WHEN sq.id = 62181 THEN sa.value END) AS slimming_products, \n         MAX(CASE WHEN sq.id = 66856 THEN sa.value END ) AS perfumes,\n         MAX(CASE WHEN sq.id = 79039 THEN sa.value END) AS self_taining, \n         MAX(CASE WHEN sq.id = 79043 THEN sa.value END) AS solid_cosmetics,\n         MAX(CASE WHEN sq.id = 79040 THEN sa.value END) AS hair_products,\n\n         MAX(CASE WHEN sq.id = 79045 and sa.id = 193360 THEN true \n              WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_glitter,\n          MAX(CASE WHEN sq.id = 79045 and sa.id = 193361 THEN true \n               WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END)AS discovery_liners_mascaras,\n          MAX(CASE WHEN sq.id = 79045 and sa.id =193362 THEN true  \n               WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_colored_lipstick,\n          MAX(CASE WHEN sq.id = 79045 and sa.id =193363  THEN true  \n            WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_colored_nail_varnish,\n             MAX(CASE WHEN sq.id = 79045 and sa.id =193364 THEN true \n            WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_colored_nude_makeup,\n          MAX(CASE WHEN sq.id = 79045 and  sa.id =193365 THEN true \n           WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_makeup,\n\n\n                 -- SHOP LOCATION AS \"Le lieu o\u00f9 j'ach\u00e8te mes produits de beaut\u00e9\"\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114657 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_perfumery,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114658 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END)AS shop_brand_store,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114659 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_hairdressing,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114660 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END)AS shop_pharmacy,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114661 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_hypermarket,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114662 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END)AS shop_bio_store,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114663 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_internet,\n\n                 -- FRAGRANCE PREFERENCE : \" Les parfums que j'appr\u00e9cie le plus sont\"\n                 MAX(CASE WHEN sq.id = 46855 and sa.id = 114623 THEN true \n         WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END) AS fragrance_sweet,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114624 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END)AS fragrance_floral,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114625 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END) AS fragrance_spicy,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114626 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END)AS fragrance_fruity,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114627 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END) AS fragrance_woody,\n\n-----------------------------------------------------SKIN ISSUES--------------------------------------\n                MAX(ifnull(CASE WHEN sq.id = 46256 THEN sa.value END,CASE WHEN sq.id = 15424 THEN sa.value END)) AS skin_complexion,\n         MAX(ifnull(CASE WHEN sq.id = 46257 THEN sa.value END,CASE WHEN sq.id = 15425 THEN sa.value END)) AS skin_type,\n                 MAX(CASE WHEN sq.id = 46258 and sa.id = 113178 THEN true \n         WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_redness,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113179 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_sensitiveness,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113180 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_aging,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113181 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_acne,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113182 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_dilated_pores,\n          MAX(CASE WHEN sq.id = 46258 and sa.id = 113183 THEN true \n         WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_dehydration,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113184 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_eye_bags,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113185 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_dullness,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113186 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_no_problem,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 153850 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_spots,\n          MAX(CASE WHEN sq.id = 46258 and sa.id = 153851 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_wrinkles,\n------------------------------------------BODY IssUES----------------------------------\n\n        MAX(CASE WHEN sq.id = 46259 and sa.id = 113187 THEN true \n         WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_stretch_marks,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113188 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END)AS body_cellulite,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113189 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_lack_firmness,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113190 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END)AS body_dry_skin,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113191 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_water_retention,\n          MAX(CASE WHEN sq.id = 46259 and sa.id = 113192 THEN true \n         WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_no_problem,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 193350 THEN true \n         WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_spots,\n-------------------hair----------------------------------------------------------------------------------------------------\n\n          MAX(ifnull(CASE WHEN sq.id = 46261 THEN sa.value END,CASE WHEN sq.id = 15422 THEN sa.value END)) AS hair_color,\n\n         MAX(CASE WHEN sq.id = 46845 THEN sa.value END) AS hair_dye,\n         MAX(CASE WHEN sq.id = 46846 THEN sa.value END) AS hair_thickness,\n         MAX(CASE WHEN sq.id = 46847 THEN sa.value END) AS hair_type,\n         MAX(CASE WHEN sq.id = 46848 THEN sa.value END) AS hair_scalp,\n         MAX(CASE WHEN sq.id = 46849 THEN sa.value END) AS hair_style,\n-------------------hair ISSSUE----------------------------------------------------------------------------------------------------\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114597 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END) AS hair_damaged,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114598 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)AS hair_split_end,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114599 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END) AS hair_greasy,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114600 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END) AS hair_dried,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114601 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)  AS hair_dandruff,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114603 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)  AS hair_no_problem,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 153858 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)  AS hair_falls,\n\n\n      MAX(CASE WHEN sq.id = 46853 THEN sa.value END) AS beauty_routine,\n       -- HAIR DREAM : \"Mon r\u00eave serait d'avoir les cheveux \"\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114604 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_straight,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114605 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_frizz_free,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114606 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_volume,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114607 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END)AS want_hair_shine,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114608 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_soft,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114609 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_less_thinning,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114610 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_curly,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114611 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_grow,\n\n     \n       -- HAIR DRYER USER : \"De mani\u00e8re fr\u00e9quente j'utilise \"\n         MAX(CASE WHEN sq.id = 46852 and sa.id = 114612 THEN true \n         WHEN  sq.id = 46852  and sa.id is not  null THEN false ELSE null END)AS use_hair_dryer,\n         MAX(CASE WHEN sq.id = 46852 and sa.id = 114613 THEN true \n         WHEN  sq.id = 46852  and sa.id is not  null THEN false ELSE null END) AS use_hair_straightener,\n         MAX(CASE WHEN sq.id = 46852 and sa.id = 114614 THEN true \n         WHEN  sq.id = 46852  and sa.id is not  null THEN false ELSE null END) AS use_hair_no_device,\n          date(max(sra._airbyte_extracted_at)) last_update\n\n  FROM inter.survey_questions sq\n  INNER JOIN inter.survey_answers sa ON COALESCE(sq.parent_id, sq.id) = sa.question_id AND sa.dw_country_code = 'FR'\n  INNER JOIN inter.survey_results sr ON sq.dw_country_code = sr.dw_country_code AND sq.survey_id = sr.survey_id\n  INNER JOIN inter.survey_result_answers sra ON sra.dw_country_code = sq.dw_country_code AND sra.question_id = sq.id AND sra.result_id = sr.id AND sra.answer_id = sa.id\n  WHERE sq.survey_id = 2639 --and user_id=2622634 -- and sq.id=46259\n  {% if is_incremental() %}\n        AND sra._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ lookback_hours }} HOUR)\n    {% endif %}\n  group by all", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/customers_beauty_profile.sql", "compiled": true, "compiled_code": "\n\n--partition \n\n--lookback 2h\n\nSELECT    concat(sq.dw_country_code,'_',cast(sr.user_id as string)) as ID,\n          sq.dw_country_code,\n       sr.user_id,\n         MAX(CASE WHEN sq.id = 46861 THEN sa.value END) AS beauty_budget,\n         MAX(CASE WHEN sq.id = 62162 THEN sa.value END) AS skin_tone,\n         MAX(CASE WHEN sq.id = 62163 THEN sa.value END) AS eyebrows,\n         MAX(CASE WHEN sq.id = 62165 THEN sa.value END) AS face_care,\n         MAX(CASE WHEN sq.id = 62166 THEN sa.value END) AS body_care,\n         MAX(CASE WHEN sq.id = 62167 THEN sa.value END) AS bath_products,\n         MAX(CASE WHEN sq.id = 62168 THEN sa.value END) AS makeup_general,\n         MAX(CASE WHEN sq.id = 62169 THEN sa.value END) AS makeup_eyes,\n         MAX(CASE WHEN sq.id = 62170 THEN sa.value END) AS makeup_lips,\n         MAX(CASE WHEN sq.id = 62171 THEN sa.value END) AS makeup_eyebrows,\n         MAX(CASE WHEN sq.id = 62172 THEN sa.value END) AS makeup_complexion,\n         MAX(CASE WHEN sq.id = 62173 THEN sa.value END) AS makeup_nails,\n         MAX(CASE WHEN sq.id = 62174 THEN sa.value END) AS hair_shampoo,\n         MAX(CASE WHEN sq.id = 62175 THEN sa.value END) AS hair_conditioner,\n         MAX(CASE WHEN sq.id = 62176 THEN sa.value END) AS hair_mask,\n         MAX(CASE WHEN sq.id = 62177 THEN sa.value END) AS hair_styling,\n         MAX(CASE WHEN sq.id = 62178 THEN sa.value END) AS accessories,\n         MAX(CASE WHEN sq.id = 62179 THEN sa.value END) AS food_supplements,\n         MAX(CASE WHEN sq.id = 62180 THEN sa.value END) AS green_natural_products,\n         MAX(CASE WHEN sq.id = 62181 THEN sa.value END) AS slimming_products, \n         MAX(CASE WHEN sq.id = 66856 THEN sa.value END ) AS perfumes,\n         MAX(CASE WHEN sq.id = 79039 THEN sa.value END) AS self_taining, \n         MAX(CASE WHEN sq.id = 79043 THEN sa.value END) AS solid_cosmetics,\n         MAX(CASE WHEN sq.id = 79040 THEN sa.value END) AS hair_products,\n\n         MAX(CASE WHEN sq.id = 79045 and sa.id = 193360 THEN true \n              WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_glitter,\n          MAX(CASE WHEN sq.id = 79045 and sa.id = 193361 THEN true \n               WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END)AS discovery_liners_mascaras,\n          MAX(CASE WHEN sq.id = 79045 and sa.id =193362 THEN true  \n               WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_colored_lipstick,\n          MAX(CASE WHEN sq.id = 79045 and sa.id =193363  THEN true  \n            WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_colored_nail_varnish,\n             MAX(CASE WHEN sq.id = 79045 and sa.id =193364 THEN true \n            WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_colored_nude_makeup,\n          MAX(CASE WHEN sq.id = 79045 and  sa.id =193365 THEN true \n           WHEN  sq.id = 79045  and sa.id is not  null THEN false ELSE null END) AS discovery_makeup,\n\n\n                 -- SHOP LOCATION AS \"Le lieu o\u00f9 j'ach\u00e8te mes produits de beaut\u00e9\"\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114657 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_perfumery,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114658 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END)AS shop_brand_store,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114659 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_hairdressing,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114660 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END)AS shop_pharmacy,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114661 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_hypermarket,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114662 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END)AS shop_bio_store,\n         MAX(CASE WHEN sq.id = 46860 and sa.id = 114663 THEN true \n              WHEN  sq.id = 46860  and sa.id is not  null THEN false ELSE null END) AS shop_internet,\n\n                 -- FRAGRANCE PREFERENCE : \" Les parfums que j'appr\u00e9cie le plus sont\"\n                 MAX(CASE WHEN sq.id = 46855 and sa.id = 114623 THEN true \n         WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END) AS fragrance_sweet,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114624 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END)AS fragrance_floral,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114625 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END) AS fragrance_spicy,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114626 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END)AS fragrance_fruity,\n         MAX(CASE WHEN sq.id = 46855 and sa.id = 114627 THEN true \n              WHEN  sq.id = 46855  and sa.id is not  null THEN false ELSE null END) AS fragrance_woody,\n\n-----------------------------------------------------SKIN ISSUES--------------------------------------\n                MAX(ifnull(CASE WHEN sq.id = 46256 THEN sa.value END,CASE WHEN sq.id = 15424 THEN sa.value END)) AS skin_complexion,\n         MAX(ifnull(CASE WHEN sq.id = 46257 THEN sa.value END,CASE WHEN sq.id = 15425 THEN sa.value END)) AS skin_type,\n                 MAX(CASE WHEN sq.id = 46258 and sa.id = 113178 THEN true \n         WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_redness,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113179 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_sensitiveness,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113180 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_aging,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113181 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_acne,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113182 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_dilated_pores,\n          MAX(CASE WHEN sq.id = 46258 and sa.id = 113183 THEN true \n         WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_dehydration,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113184 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_eye_bags,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113185 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_dullness,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 113186 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END)AS skin_no_problem,\n         MAX(CASE WHEN sq.id = 46258 and sa.id = 153850 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_spots,\n          MAX(CASE WHEN sq.id = 46258 and sa.id = 153851 THEN true \n              WHEN  sq.id = 46258  and sa.id is not  null THEN false ELSE null END) AS skin_wrinkles,\n------------------------------------------BODY IssUES----------------------------------\n\n        MAX(CASE WHEN sq.id = 46259 and sa.id = 113187 THEN true \n         WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_stretch_marks,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113188 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END)AS body_cellulite,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113189 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_lack_firmness,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113190 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END)AS body_dry_skin,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 113191 THEN true \n              WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_water_retention,\n          MAX(CASE WHEN sq.id = 46259 and sa.id = 113192 THEN true \n         WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_no_problem,\n         MAX(CASE WHEN sq.id = 46259 and sa.id = 193350 THEN true \n         WHEN  sq.id = 46259  and sa.id is not  null THEN false ELSE null END) AS body_spots,\n-------------------hair----------------------------------------------------------------------------------------------------\n\n          MAX(ifnull(CASE WHEN sq.id = 46261 THEN sa.value END,CASE WHEN sq.id = 15422 THEN sa.value END)) AS hair_color,\n\n         MAX(CASE WHEN sq.id = 46845 THEN sa.value END) AS hair_dye,\n         MAX(CASE WHEN sq.id = 46846 THEN sa.value END) AS hair_thickness,\n         MAX(CASE WHEN sq.id = 46847 THEN sa.value END) AS hair_type,\n         MAX(CASE WHEN sq.id = 46848 THEN sa.value END) AS hair_scalp,\n         MAX(CASE WHEN sq.id = 46849 THEN sa.value END) AS hair_style,\n-------------------hair ISSSUE----------------------------------------------------------------------------------------------------\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114597 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END) AS hair_damaged,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114598 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)AS hair_split_end,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114599 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END) AS hair_greasy,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114600 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END) AS hair_dried,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114601 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)  AS hair_dandruff,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 114603 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)  AS hair_no_problem,\n          MAX(CASE WHEN sq.id = 46850 and sa.id = 153858 THEN true \n         WHEN  sq.id = 46850  and sa.id is not  null THEN false ELSE null END)  AS hair_falls,\n\n\n      MAX(CASE WHEN sq.id = 46853 THEN sa.value END) AS beauty_routine,\n       -- HAIR DREAM : \"Mon r\u00eave serait d'avoir les cheveux \"\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114604 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_straight,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114605 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_frizz_free,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114606 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_volume,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114607 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END)AS want_hair_shine,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114608 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_soft,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114609 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_less_thinning,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114610 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_curly,\n         MAX(CASE WHEN sq.id = 46851 and sa.id = 114611 THEN true \n         WHEN  sq.id = 46851  and sa.id is not  null THEN false ELSE null END) AS want_hair_grow,\n\n     \n       -- HAIR DRYER USER : \"De mani\u00e8re fr\u00e9quente j'utilise \"\n         MAX(CASE WHEN sq.id = 46852 and sa.id = 114612 THEN true \n         WHEN  sq.id = 46852  and sa.id is not  null THEN false ELSE null END)AS use_hair_dryer,\n         MAX(CASE WHEN sq.id = 46852 and sa.id = 114613 THEN true \n         WHEN  sq.id = 46852  and sa.id is not  null THEN false ELSE null END) AS use_hair_straightener,\n         MAX(CASE WHEN sq.id = 46852 and sa.id = 114614 THEN true \n         WHEN  sq.id = 46852  and sa.id is not  null THEN false ELSE null END) AS use_hair_no_device,\n          date(max(sra._airbyte_extracted_at)) last_update\n\n  FROM inter.survey_questions sq\n  INNER JOIN inter.survey_answers sa ON COALESCE(sq.parent_id, sq.id) = sa.question_id AND sa.dw_country_code = 'FR'\n  INNER JOIN inter.survey_results sr ON sq.dw_country_code = sr.dw_country_code AND sq.survey_id = sr.survey_id\n  INNER JOIN inter.survey_result_answers sra ON sra.dw_country_code = sq.dw_country_code AND sra.question_id = sq.id AND sra.result_id = sr.id AND sra.answer_id = sa.id\n  WHERE sq.survey_id = 2639 --and user_id=2622634 -- and sq.id=46259\n  \n        AND sra._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n    \n  group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.products_detailed_rating": {"database": "teamdata-291012", "schema": "inter", "name": "products_detailed_rating", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/products_detailed_rating.sql", "original_file_path": "models/dwh/inter/merge/products_detailed_rating.sql", "unique_id": "model.warehouse.products_detailed_rating", "fqn": ["warehouse", "dwh", "inter", "merge", "products_detailed_rating"], "alias": "products_detailed_rating", "checksum": {"name": "sha256", "checksum": "7b3bda0bf0942d8859254cac1e88bed7ad8af27df5e2cf5a7a8bb1f9e91498ef"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "dw_country_code"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["id", "dw_country_code"]}, "created_at": 1759995464.011979, "relation_name": "`teamdata-291012`.`inter`.`products_detailed_rating`", "raw_code": "WITH source_data AS (\n    -- Donn\u00e9es France\n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'FR' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_fr.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    {% if is_incremental() %}\n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM {{ this }}\n        )\n    {% endif %}\n\n    UNION ALL\n\n    -- Donn\u00e9es Allemagne  \n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'DE' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.prod_de.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    {% if is_incremental() %}\n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM {{ this }}\n        )\n    {% endif %}\n\n    UNION ALL\n\n    -- Donn\u00e9es Espagne\n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'ES' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_es.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    {% if is_incremental() %}\n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM {{ this }}\n        )\n    {% endif %}\n\n    UNION ALL\n\n    -- Donn\u00e9es Italie\n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'IT' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_it.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    {% if is_incremental() %}\n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM {{ this }}\n        )\n    {% endif %}\n)\n\nSELECT \n    id,\n    rating,\n    created_at,\n    field_name,\n    field_slug,\n    product_id,\n    updated_at,\n    dw_country_code,\n    source_updated_at,\n    CURRENT_TIMESTAMP() as dbt_processed_at\nFROM source_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/products_detailed_rating.sql", "compiled": true, "compiled_code": "WITH source_data AS (\n    -- Donn\u00e9es France\n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'FR' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_fr.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    \n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM `teamdata-291012`.`inter`.`products_detailed_rating`\n        )\n    \n\n    UNION ALL\n\n    -- Donn\u00e9es Allemagne  \n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'DE' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.prod_de.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    \n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM `teamdata-291012`.`inter`.`products_detailed_rating`\n        )\n    \n\n    UNION ALL\n\n    -- Donn\u00e9es Espagne\n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'ES' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_es.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    \n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM `teamdata-291012`.`inter`.`products_detailed_rating`\n        )\n    \n\n    UNION ALL\n\n    -- Donn\u00e9es Italie\n    SELECT \n        id,\n        rating,\n        created_at,\n        field_name,\n        field_slug,\n        product_id,\n        updated_at,\n        'IT' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_it.wp_jb_products_detailed_rating`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    \n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM `teamdata-291012`.`inter`.`products_detailed_rating`\n        )\n    \n)\n\nSELECT \n    id,\n    rating,\n    created_at,\n    field_name,\n    field_slug,\n    product_id,\n    updated_at,\n    dw_country_code,\n    source_updated_at,\n    CURRENT_TIMESTAMP() as dbt_processed_at\nFROM source_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_suspend_survey_question": {"database": "teamdata-291012", "schema": "inter", "name": "sub_suspend_survey_question", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_suspend_survey_question.sql", "original_file_path": "models/dwh/inter/merge/sub_suspend_survey_question.sql", "unique_id": "model.warehouse.sub_suspend_survey_question", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_suspend_survey_question"], "alias": "sub_suspend_survey_question", "checksum": {"name": "sha256", "checksum": "696868e8d0110d41b306b53f306f7772c8a2031a0f4c7f54f3af5ddf289776bc"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.016334, "relation_name": "`teamdata-291012`.`inter`.`sub_suspend_survey_question`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_suspend_survey_question\" -%}   \n{%- set target_table = \"inter.sub_suspend_survey_question\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, question_id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      question_id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(question_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(question_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_suspend_survey_question.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(question_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_suspend_survey_question` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(question_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.prod_de.wp_jb_sub_suspend_survey_question` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(question_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_suspend_survey_question` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(question_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_suspend_survey_question` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.allocation_history": {"database": "teamdata-291012", "schema": "inter", "name": "allocation_history", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/allocation_history.sql", "original_file_path": "models/dwh/inter/merge/allocation_history.sql", "unique_id": "model.warehouse.allocation_history", "fqn": ["warehouse", "dwh", "inter", "merge", "allocation_history"], "alias": "allocation_history", "checksum": {"name": "sha256", "checksum": "6b96473547b7a2516a8a98f2dc08b3c7a72e3f52495f307787bfdab6f86acd0f"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_allocation_history', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_allocation_history', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995464.0229938, "relation_name": "`teamdata-291012`.`inter`.`allocation_history`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_allocation_history\" -%}   \n{%- set target_table = \"inter.allocation_history\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n    post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n\n\n\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/allocation_history.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_allocation_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_allocation_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_allocation_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_allocation_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.brands_correspondances": {"database": "teamdata-291012", "schema": "inter", "name": "brands_correspondances", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/brands_correspondances.sql", "original_file_path": "models/dwh/inter/merge/brands_correspondances.sql", "unique_id": "model.warehouse.brands_correspondances", "fqn": ["warehouse", "dwh", "inter", "merge", "brands_correspondances"], "alias": "brands_correspondances", "checksum": {"name": "sha256", "checksum": "ac5efe9ccf87721dfb08c52a9f1252f5b13405f3f675a3c5dbd258ce99adcbcc"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.0296361, "relation_name": "`teamdata-291012`.`inter`.`brands_correspondances`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_brands_correspondances\" -%}   \n{%- set target_table = \"inter.brands_correspondances\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/brands_correspondances.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_brands_correspondances` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_brands_correspondances` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_brands_correspondances` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_brands_correspondances` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.invoice_details": {"database": "teamdata-291012", "schema": "inter", "name": "invoice_details", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/invoice_details.sql", "original_file_path": "models/dwh/inter/merge/invoice_details.sql", "unique_id": "model.warehouse.invoice_details", "fqn": ["warehouse", "dwh", "inter", "merge", "invoice_details"], "alias": "invoice_details", "checksum": {"name": "sha256", "checksum": "8339c895ff22f44c400e2bdea80427c97cd549276146ac53125c959fd0a7edc8"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.037859, "relation_name": "`teamdata-291012`.`inter`.`invoice_details`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_invoice_details\" -%}   \n{%- set target_table = \"inter.invoice_details\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/invoice_details.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_invoice_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_invoice_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_invoice_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_invoice_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.order_details": {"database": "teamdata-291012", "schema": "inter", "name": "order_details", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/order_details.sql", "original_file_path": "models/dwh/inter/merge/order_details.sql", "unique_id": "model.warehouse.order_details", "fqn": ["warehouse", "dwh", "inter", "merge", "order_details"], "alias": "order_details", "checksum": {"name": "sha256", "checksum": "6cf039223f0cd85507ed42dc29b1205122fb4500ea9b89023056fb3c2511ab8f"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_order_details', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_order_details', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995464.044853, "relation_name": "`teamdata-291012`.`inter`.`order_details`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_order_details\" -%}   \n{%- set target_table = \"inter.order_details\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n  post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/order_details.sql", "compiled": true, "compiled_code": "\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_order_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_order_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_order_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_order_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.store_products": {"database": "teamdata-291012", "schema": "inter", "name": "store_products", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/store_products.sql", "original_file_path": "models/dwh/inter/merge/store_products.sql", "unique_id": "model.warehouse.store_products", "fqn": ["warehouse", "dwh", "inter", "merge", "store_products"], "alias": "store_products", "checksum": {"name": "sha256", "checksum": "d5ae510abe528c5509d33667b1a319259db16bb06fbc92a6194030969413d59e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.0518641, "relation_name": "`teamdata-291012`.`inter`.`store_products`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_store_products\" -%}   \n{%- set target_table = \"inter.store_products\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/store_products.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_store_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_store_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_store_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_store_products` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.raf_sub_link": {"database": "teamdata-291012", "schema": "inter", "name": "raf_sub_link", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/raf_sub_link.sql", "original_file_path": "models/dwh/inter/merge/raf_sub_link.sql", "unique_id": "model.warehouse.raf_sub_link", "fqn": ["warehouse", "dwh", "inter", "merge", "raf_sub_link"], "alias": "raf_sub_link", "checksum": {"name": "sha256", "checksum": "fe571d7326ac2814f940778070da14e6bd4c1d500c9e797bade63e757aa23c88"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.0588381, "relation_name": "`teamdata-291012`.`inter`.`raf_sub_link`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_raf_sub_link\" -%}   \n{%- set target_table = \"inter.raf_sub_link\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/raf_sub_link.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_raf_sub_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_raf_sub_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_raf_sub_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_raf_sub_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.purchase_order_items": {"database": "teamdata-291012", "schema": "inter", "name": "purchase_order_items", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/purchase_order_items.sql", "original_file_path": "models/dwh/inter/merge/purchase_order_items.sql", "unique_id": "model.warehouse.purchase_order_items", "fqn": ["warehouse", "dwh", "inter", "merge", "purchase_order_items"], "alias": "purchase_order_items", "checksum": {"name": "sha256", "checksum": "8e7c379b9e9d53c1df8350b8b50481668b797ac52e8262d6ce295565ab06f058"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.065431, "relation_name": "`teamdata-291012`.`inter`.`purchase_order_items`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_purchase_order_items\" -%}   \n{%- set target_table = \"inter.purchase_order_items\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/purchase_order_items.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_purchase_order_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_purchase_order_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_purchase_order_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_purchase_order_items` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.customers_info_perso": {"database": "teamdata-291012", "schema": "user", "name": "customers_info_perso", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/customers_info_perso.sql", "original_file_path": "models/dwh/inter/merge/customers_info_perso.sql", "unique_id": "model.warehouse.customers_info_perso", "fqn": ["warehouse", "dwh", "inter", "merge", "customers_info_perso"], "alias": "customers_info_perso", "checksum": {"name": "sha256", "checksum": "aae889be30984c369e07a5c989954d56e94b687ae9d1fc281a1df4488c99f33c"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "dw_country_code"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["id", "dw_country_code"]}, "created_at": 1759995464.072907, "relation_name": "`teamdata-291012`.`user`.`customers_info_perso`", "raw_code": "SELECT distinct \nconcat(dw_country_code,'_',cast(user_id as string)) as ID,\nuser_id ,dw_country_code,\nlast_value(date) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_order_date,\nlast_value(billing_country) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_country,\nlast_value(billing_zipcode) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_zipcode,\nlast_value(billing_phone) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_phone,\nlast_value(billing_city) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_city,\nlast_value(billing_adr1) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_adress,\nlast_value(billing_civility) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_civility,\ncase when last_value(billing_civility) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = 'MISTER' then 'M' else 'F' end  gender\n FROM {{ ref('orders') }}\n  where billing_zipcode<>'DELETED'\n{% if is_incremental() %}\n  AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR)\n{% endif %}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.warehouse.orders"]}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/customers_info_perso.sql", "compiled": true, "compiled_code": "SELECT distinct \nconcat(dw_country_code,'_',cast(user_id as string)) as ID,\nuser_id ,dw_country_code,\nlast_value(date) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) last_order_date,\nlast_value(billing_country) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_country,\nlast_value(billing_zipcode) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_zipcode,\nlast_value(billing_phone) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_phone,\nlast_value(billing_city) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_city,\nlast_value(billing_adr1) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_adress,\nlast_value(billing_civility) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) billing_civility,\ncase when last_value(billing_civility) over ( partition by user_id,dw_country_code order by date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = 'MISTER' then 'M' else 'F' end  gender\n FROM `teamdata-291012`.`inter`.`orders`\n  where billing_zipcode<>'DELETED'\n\n  AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.saved_cart_details": {"database": "teamdata-291012", "schema": "inter", "name": "saved_cart_details", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/saved_cart_details.sql", "original_file_path": "models/dwh/inter/merge/saved_cart_details.sql", "unique_id": "model.warehouse.saved_cart_details", "fqn": ["warehouse", "dwh", "inter", "merge", "saved_cart_details"], "alias": "saved_cart_details", "checksum": {"name": "sha256", "checksum": "86779b8538eab666c8d446d51e71534228fa6019211f9d3eb470748b31946520"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.076534, "relation_name": "`teamdata-291012`.`inter`.`saved_cart_details`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_saved_cart_details\" -%}   \n{%- set target_table = \"inter.saved_cart_details\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/saved_cart_details.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_saved_cart_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_saved_cart_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_saved_cart_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_saved_cart_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.products_stock_log": {"database": "teamdata-291012", "schema": "inter", "name": "products_stock_log", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/products_stock_log.sql", "original_file_path": "models/dwh/inter/merge/products_stock_log.sql", "unique_id": "model.warehouse.products_stock_log", "fqn": ["warehouse", "dwh", "inter", "merge", "products_stock_log"], "alias": "products_stock_log", "checksum": {"name": "sha256", "checksum": "7e8cf5cca1d2706787c81fbb2d94f0ca86bcc9fe420bd16d71ca6cd8e51383ae"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "", "transaction": true, "index": null}, {"sql": "", "transaction": true, "index": null}, {"sql": "", "transaction": true, "index": null}, {"sql": "", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "dw_country_code"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["id", "dw_country_code"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["", "", "", ""]}, "created_at": 1759995464.0832798, "relation_name": "`teamdata-291012`.`inter`.`products_stock_log`", "raw_code": "{{ config(\n    partition_by={\n      \"field\": \"_airbyte_extracted_at\", \n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by=[\"dw_country_code\", \"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n--- partie pays\n\n{%- set delete_hooks = [] -%}\n{%- for country in countries -%}\n  {%- set delete_sql -%}\n\n  {%- endset -%}\n  {%- do delete_hooks.append(delete_sql) -%}\n{%- endfor -%}\n\n{{ config(\n    post_hook=delete_hooks\n) }}\n-- debug\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  _airbyte_extracted_at\nFROM `teamdata-291012.{{ country.dataset }}.wp_jb_products_stock_log`\nWHERE 1=1\n   {% if country.code != 'FR' %}\n   AND `_ab_cdc_deleted_at` IS NULL \n   {% endif %}\n   {% if is_incremental() %}   \n   AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR) \n   {% endif %} \n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}\n\n{% if not is_incremental() %}\nUNION ALL\n-- Archives (seulement en full refresh)\nSELECT * FROM {{ ref('archives_products_stock_log') }}\n{% endif %}", "language": "sql", "refs": [{"name": "archives_products_stock_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.warehouse.archives_products_stock_log"]}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/products_stock_log.sql", "compiled": true, "compiled_code": "--- partie pays\n-- debug\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  _airbyte_extracted_at\nFROM `teamdata-291012.bdd_prod_fr.wp_jb_products_stock_log`\nWHERE 1=1\n   \n      \n   AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR) \n    \nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  _airbyte_extracted_at\nFROM `teamdata-291012.prod_de.wp_jb_products_stock_log`\nWHERE 1=1\n   \n   AND `_ab_cdc_deleted_at` IS NULL \n   \n      \n   AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR) \n    \nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  _airbyte_extracted_at\nFROM `teamdata-291012.bdd_prod_es.wp_jb_products_stock_log`\nWHERE 1=1\n   \n   AND `_ab_cdc_deleted_at` IS NULL \n   \n      \n   AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR) \n    \nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  _airbyte_extracted_at\nFROM `teamdata-291012.bdd_prod_it.wp_jb_products_stock_log`\nWHERE 1=1\n   \n   AND `_ab_cdc_deleted_at` IS NULL \n   \n      \n   AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR) \n    \n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.postmeta": {"database": "teamdata-291012", "schema": "inter", "name": "postmeta", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/postmeta.sql", "original_file_path": "models/dwh/inter/merge/postmeta.sql", "unique_id": "model.warehouse.postmeta", "fqn": ["warehouse", "dwh", "inter", "merge", "postmeta"], "alias": "postmeta", "checksum": {"name": "sha256", "checksum": "0967889a8fb7a06d59c144fb9f6df9673252336ea2b9fe198fcd3a601ba5b190"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.0889988, "relation_name": "`teamdata-291012`.`inter`.`postmeta`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_postmeta\" -%}   \n{%- set target_table = \"inter.postmeta\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, meta_id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.meta_id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.meta_id AS INT64) AS id,\n    b.* EXCEPT(meta_id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.meta_id AS INT64) AS id,\n    b.* EXCEPT(meta_id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/postmeta.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.meta_id AS INT64) AS id,\n    b.* EXCEPT(meta_id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_postmeta` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.meta_id AS INT64) AS id,\n    b.* EXCEPT(meta_id)\n  FROM `teamdata-291012.prod_de.wp_postmeta` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.meta_id AS INT64) AS id,\n    b.* EXCEPT(meta_id)\n  FROM `teamdata-291012.bdd_prod_es.wp_postmeta` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.meta_id AS INT64) AS id,\n    b.* EXCEPT(meta_id)\n  FROM `teamdata-291012.bdd_prod_it.wp_postmeta` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.choose_forms": {"database": "teamdata-291012", "schema": "inter", "name": "choose_forms", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/choose_forms.sql", "original_file_path": "models/dwh/inter/merge/choose_forms.sql", "unique_id": "model.warehouse.choose_forms", "fqn": ["warehouse", "dwh", "inter", "merge", "choose_forms"], "alias": "choose_forms", "checksum": {"name": "sha256", "checksum": "2955cc6cbea7edb96e8cd95ba3a8a164f822b0cc6ac631cb88389ddcfe8e6204"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.0954309, "relation_name": "`teamdata-291012`.`inter`.`choose_forms`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_choose_forms\" -%}   \n{%- set target_table = \"inter.choose_forms\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/choose_forms.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_choose_forms` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_choose_forms` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_choose_forms` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_choose_forms` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shipping_modes": {"database": "teamdata-291012", "schema": "inter", "name": "shipping_modes", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/shipping_modes.sql", "original_file_path": "models/dwh/inter/merge/shipping_modes.sql", "unique_id": "model.warehouse.shipping_modes", "fqn": ["warehouse", "dwh", "inter", "merge", "shipping_modes"], "alias": "shipping_modes", "checksum": {"name": "sha256", "checksum": "4736fb343353d71b11a915ee482bfade9621173f38bea4ed8a8d28d3a4f29ad1"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.102926, "relation_name": "`teamdata-291012`.`inter`.`shipping_modes`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_shipping_modes\" -%}   \n{%- set target_table = \"inter.shipping_modes\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n'{{ country.code }}' as dw_country_code,id,\n   _airbyte_raw_id,\n  _airbyte_extracted_at,\n  _airbyte_meta,\n  _airbyte_generation_id,\n  CASE WHEN CAST(box AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(box AS STRING) = 'MA==' THEN FALSE END AS box,\n  fee,\n  code,\n  name,\n\n  -- rank pas bool\u00e9en \u2192 on le garde brut\n  rank,\n\n  CASE WHEN CAST(shop AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(shop AS STRING) = 'MA==' THEN FALSE END AS shop,\n type,\n  delay,\n  CASE WHEN CAST(store AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(store AS STRING) = 'MA==' THEN FALSE END AS store,\n  title,\nfranco,\n  CASE WHEN CAST(status AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(status AS STRING) = 'MA==' THEN FALSE END AS status,\n  country,\n`default`,\ntracked,\n\n  b2c_code,\n  b2c_name,\n  max_delay,\n  min_delay,\n  CASE WHEN CAST(test_mode AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(test_mode AS STRING) = 'MA==' THEN FALSE END AS test_mode,\n\n  b2c_method,\n  created_at,\n  fee_franco,\nfranco_sub,\n  more_infos,\n  updated_at,\n  business_days,\n  _ab_cdc_cursor,\n  _ab_cdc_log_pos,\n  _ab_cdc_log_file,\n  b2c_method_daily,\n  _ab_cdc_deleted_at,\n  _ab_cdc_updated_at,\n  shipup_carrier_code,\n  shipup_service_code,\n  relative_path_to_logo,\n  linked_shipping_mode_id\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n '{{ country.code }}' as dw_country_code,id,\n   _airbyte_raw_id,\n  _airbyte_extracted_at,\n  _airbyte_meta,\n  _airbyte_generation_id,\n  CASE WHEN CAST(box AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(box AS STRING) = 'MA==' THEN FALSE END AS box,\n  fee,\n  code,\n  name,\n\n  -- rank pas bool\u00e9en \u2192 on le garde brut\n  rank,\n\n  CASE WHEN CAST(shop AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(shop AS STRING) = 'MA==' THEN FALSE END AS shop,\ntype,\n  delay,\n  CASE WHEN CAST(store AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(store AS STRING) = 'MA==' THEN FALSE END AS store,\n  title,\nfranco,\n  CASE WHEN CAST(status AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(status AS STRING) = 'MA==' THEN FALSE END AS status,\n  country,\n`default`,\n tracked,\n\n  b2c_code,\n  b2c_name,\n  max_delay,\n  min_delay,\n  CASE WHEN CAST(test_mode AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(test_mode AS STRING) = 'MA==' THEN FALSE END AS test_mode,\n\n  b2c_method,\n  created_at,\n  fee_franco,\nfranco_sub,\n  more_infos,\n  updated_at,\n  business_days,\n  _ab_cdc_cursor,\n  _ab_cdc_log_pos,\n  _ab_cdc_log_file,\nb2c_method_daily,\n  _ab_cdc_deleted_at,\n  _ab_cdc_updated_at,\n  shipup_carrier_code,\n  shipup_service_code,\n  relative_path_to_logo,\n  linked_shipping_mode_id\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/shipping_modes.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n'FR' as dw_country_code,id,\n   _airbyte_raw_id,\n  _airbyte_extracted_at,\n  _airbyte_meta,\n  _airbyte_generation_id,\n  CASE WHEN CAST(box AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(box AS STRING) = 'MA==' THEN FALSE END AS box,\n  fee,\n  code,\n  name,\n\n  -- rank pas bool\u00e9en \u2192 on le garde brut\n  rank,\n\n  CASE WHEN CAST(shop AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(shop AS STRING) = 'MA==' THEN FALSE END AS shop,\n type,\n  delay,\n  CASE WHEN CAST(store AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(store AS STRING) = 'MA==' THEN FALSE END AS store,\n  title,\nfranco,\n  CASE WHEN CAST(status AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(status AS STRING) = 'MA==' THEN FALSE END AS status,\n  country,\n`default`,\ntracked,\n\n  b2c_code,\n  b2c_name,\n  max_delay,\n  min_delay,\n  CASE WHEN CAST(test_mode AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(test_mode AS STRING) = 'MA==' THEN FALSE END AS test_mode,\n\n  b2c_method,\n  created_at,\n  fee_franco,\nfranco_sub,\n  more_infos,\n  updated_at,\n  business_days,\n  _ab_cdc_cursor,\n  _ab_cdc_log_pos,\n  _ab_cdc_log_file,\n  b2c_method_daily,\n  _ab_cdc_deleted_at,\n  _ab_cdc_updated_at,\n  shipup_carrier_code,\n  shipup_service_code,\n  relative_path_to_logo,\n  linked_shipping_mode_id\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_shipping_modes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n'DE' as dw_country_code,id,\n   _airbyte_raw_id,\n  _airbyte_extracted_at,\n  _airbyte_meta,\n  _airbyte_generation_id,\n  CASE WHEN CAST(box AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(box AS STRING) = 'MA==' THEN FALSE END AS box,\n  fee,\n  code,\n  name,\n\n  -- rank pas bool\u00e9en \u2192 on le garde brut\n  rank,\n\n  CASE WHEN CAST(shop AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(shop AS STRING) = 'MA==' THEN FALSE END AS shop,\n type,\n  delay,\n  CASE WHEN CAST(store AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(store AS STRING) = 'MA==' THEN FALSE END AS store,\n  title,\nfranco,\n  CASE WHEN CAST(status AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(status AS STRING) = 'MA==' THEN FALSE END AS status,\n  country,\n`default`,\ntracked,\n\n  b2c_code,\n  b2c_name,\n  max_delay,\n  min_delay,\n  CASE WHEN CAST(test_mode AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(test_mode AS STRING) = 'MA==' THEN FALSE END AS test_mode,\n\n  b2c_method,\n  created_at,\n  fee_franco,\nfranco_sub,\n  more_infos,\n  updated_at,\n  business_days,\n  _ab_cdc_cursor,\n  _ab_cdc_log_pos,\n  _ab_cdc_log_file,\n  b2c_method_daily,\n  _ab_cdc_deleted_at,\n  _ab_cdc_updated_at,\n  shipup_carrier_code,\n  shipup_service_code,\n  relative_path_to_logo,\n  linked_shipping_mode_id\n  FROM `teamdata-291012.prod_de.wp_jb_shipping_modes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n'ES' as dw_country_code,id,\n   _airbyte_raw_id,\n  _airbyte_extracted_at,\n  _airbyte_meta,\n  _airbyte_generation_id,\n  CASE WHEN CAST(box AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(box AS STRING) = 'MA==' THEN FALSE END AS box,\n  fee,\n  code,\n  name,\n\n  -- rank pas bool\u00e9en \u2192 on le garde brut\n  rank,\n\n  CASE WHEN CAST(shop AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(shop AS STRING) = 'MA==' THEN FALSE END AS shop,\n type,\n  delay,\n  CASE WHEN CAST(store AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(store AS STRING) = 'MA==' THEN FALSE END AS store,\n  title,\nfranco,\n  CASE WHEN CAST(status AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(status AS STRING) = 'MA==' THEN FALSE END AS status,\n  country,\n`default`,\ntracked,\n\n  b2c_code,\n  b2c_name,\n  max_delay,\n  min_delay,\n  CASE WHEN CAST(test_mode AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(test_mode AS STRING) = 'MA==' THEN FALSE END AS test_mode,\n\n  b2c_method,\n  created_at,\n  fee_franco,\nfranco_sub,\n  more_infos,\n  updated_at,\n  business_days,\n  _ab_cdc_cursor,\n  _ab_cdc_log_pos,\n  _ab_cdc_log_file,\n  b2c_method_daily,\n  _ab_cdc_deleted_at,\n  _ab_cdc_updated_at,\n  shipup_carrier_code,\n  shipup_service_code,\n  relative_path_to_logo,\n  linked_shipping_mode_id\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_shipping_modes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n'IT' as dw_country_code,id,\n   _airbyte_raw_id,\n  _airbyte_extracted_at,\n  _airbyte_meta,\n  _airbyte_generation_id,\n  CASE WHEN CAST(box AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(box AS STRING) = 'MA==' THEN FALSE END AS box,\n  fee,\n  code,\n  name,\n\n  -- rank pas bool\u00e9en \u2192 on le garde brut\n  rank,\n\n  CASE WHEN CAST(shop AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(shop AS STRING) = 'MA==' THEN FALSE END AS shop,\n type,\n  delay,\n  CASE WHEN CAST(store AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(store AS STRING) = 'MA==' THEN FALSE END AS store,\n  title,\nfranco,\n  CASE WHEN CAST(status AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(status AS STRING) = 'MA==' THEN FALSE END AS status,\n  country,\n`default`,\ntracked,\n\n  b2c_code,\n  b2c_name,\n  max_delay,\n  min_delay,\n  CASE WHEN CAST(test_mode AS STRING) = 'MQ==' THEN TRUE \n       WHEN CAST(test_mode AS STRING) = 'MA==' THEN FALSE END AS test_mode,\n\n  b2c_method,\n  created_at,\n  fee_franco,\nfranco_sub,\n  more_infos,\n  updated_at,\n  business_days,\n  _ab_cdc_cursor,\n  _ab_cdc_log_pos,\n  _ab_cdc_log_file,\n  b2c_method_daily,\n  _ab_cdc_deleted_at,\n  _ab_cdc_updated_at,\n  shipup_carrier_code,\n  shipup_service_code,\n  relative_path_to_logo,\n  linked_shipping_mode_id\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_shipping_modes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.yearly_check": {"database": "teamdata-291012", "schema": "inter", "name": "yearly_check", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/yearly_check.sql", "original_file_path": "models/dwh/inter/merge/yearly_check.sql", "unique_id": "model.warehouse.yearly_check", "fqn": ["warehouse", "dwh", "inter", "merge", "yearly_check"], "alias": "yearly_check", "checksum": {"name": "sha256", "checksum": "05903c1a346cfce4d140cfe0536d167879cd475b613af071055882a0ef76121d"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "dw_country_code"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["id", "dw_country_code"]}, "created_at": 1759995464.1099179, "relation_name": "`teamdata-291012`.`inter`.`yearly_check`", "raw_code": "WITH source_data AS (\n    -- Donn\u00e9es France\n    SELECT \n        id,\n        created_at,\n        updated_at,\n        next_box_sub_id,\n        current_box_sub_id,\n        'FR' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_fr.wp_jb_yearly_check`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    {% if is_incremental() %}\n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM {{ this }}\n        )\n    {% endif %}\n\n    UNION ALL\n\n    -- Donn\u00e9es Espagne\n    SELECT \n        id,\n        created_at,\n        updated_at,\n        next_box_sub_id,\n        current_box_sub_id,\n        'ES' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_es.wp_jb_yearly_check`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    {% if is_incremental() %}\n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM {{ this }}\n        )\n    {% endif %}\n)\n\nSELECT \n    id,\n    created_at,\n    updated_at,\n    next_box_sub_id,\n    current_box_sub_id,\n    dw_country_code,\n    source_updated_at,\n    CURRENT_TIMESTAMP() as dbt_processed_at\nFROM source_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/yearly_check.sql", "compiled": true, "compiled_code": "WITH source_data AS (\n    -- Donn\u00e9es France\n    SELECT \n        id,\n        created_at,\n        updated_at,\n        next_box_sub_id,\n        current_box_sub_id,\n        'FR' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_fr.wp_jb_yearly_check`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    \n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM `teamdata-291012`.`inter`.`yearly_check`\n        )\n    \n\n    UNION ALL\n\n    -- Donn\u00e9es Espagne\n    SELECT \n        id,\n        created_at,\n        updated_at,\n        next_box_sub_id,\n        current_box_sub_id,\n        'ES' as dw_country_code,\n        `_ab_cdc_updated_at` as source_updated_at\n    FROM `teamdata-291012.bdd_prod_es.wp_jb_yearly_check`\n    WHERE `_ab_cdc_deleted_at` IS NULL\n    \n        AND `_ab_cdc_updated_at` >= (\n            SELECT COALESCE(MAX(source_updated_at), '1900-01-01') \n            FROM `teamdata-291012`.`inter`.`yearly_check`\n        )\n    \n)\n\nSELECT \n    id,\n    created_at,\n    updated_at,\n    next_box_sub_id,\n    current_box_sub_id,\n    dw_country_code,\n    source_updated_at,\n    CURRENT_TIMESTAMP() as dbt_processed_at\nFROM source_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.partial_cancelations": {"database": "teamdata-291012", "schema": "inter", "name": "partial_cancelations", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/partial_cancelations.sql", "original_file_path": "models/dwh/inter/merge/partial_cancelations.sql", "unique_id": "model.warehouse.partial_cancelations", "fqn": ["warehouse", "dwh", "inter", "merge", "partial_cancelations"], "alias": "partial_cancelations", "checksum": {"name": "sha256", "checksum": "5034a0a8ece084c126c4ccfea7725d23ae755b2be001c5ea8d3c71f1d7e2c656"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.113445, "relation_name": "`teamdata-291012`.`inter`.`partial_cancelations`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_partial_cancelations\" -%}   \n{%- set target_table = \"inter.partial_cancelations\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/partial_cancelations.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_partial_cancelations` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_partial_cancelations` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_partial_cancelations` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_partial_cancelations` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_suspend_survey_result_answer": {"database": "teamdata-291012", "schema": "inter", "name": "sub_suspend_survey_result_answer", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_suspend_survey_result_answer.sql", "original_file_path": "models/dwh/inter/merge/sub_suspend_survey_result_answer.sql", "unique_id": "model.warehouse.sub_suspend_survey_result_answer", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_suspend_survey_result_answer"], "alias": "sub_suspend_survey_result_answer", "checksum": {"name": "sha256", "checksum": "8776ca12b6ad6de550dcf99532235593b1357ed66a2f70e272ed8ce723f966a6"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.119966, "relation_name": "`teamdata-291012`.`inter`.`sub_suspend_survey_result_answer`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_suspend_survey_result_answer\" -%}   \n{%- set target_table = \"inter.sub_suspend_survey_result_answer\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, answer_id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      answer_id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_suspend_survey_result_answer.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_suspend_survey_result_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.prod_de.wp_jb_sub_suspend_survey_result_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_suspend_survey_result_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_suspend_survey_result_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.store_mouvements": {"database": "teamdata-291012", "schema": "inter", "name": "store_mouvements", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/store_mouvements.sql", "original_file_path": "models/dwh/inter/merge/store_mouvements.sql", "unique_id": "model.warehouse.store_mouvements", "fqn": ["warehouse", "dwh", "inter", "merge", "store_mouvements"], "alias": "store_mouvements", "checksum": {"name": "sha256", "checksum": "6103829b1e3cfdd449ceb4dd001c200fdcf0d1371dd00f593a715b5bf1ab75d6"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.126463, "relation_name": "`teamdata-291012`.`inter`.`store_mouvements`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_store_mouvements\" -%}   \n{%- set target_table = \"inter.store_mouvements\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/store_mouvements.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_store_mouvements` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_store_mouvements` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_store_mouvements` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_store_mouvements` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.survey_surveys": {"database": "teamdata-291012", "schema": "inter", "name": "survey_surveys", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/survey_surveys.sql", "original_file_path": "models/dwh/inter/merge/survey_surveys.sql", "unique_id": "model.warehouse.survey_surveys", "fqn": ["warehouse", "dwh", "inter", "merge", "survey_surveys"], "alias": "survey_surveys", "checksum": {"name": "sha256", "checksum": "63d6644da9dbc178f1588f4796b48fd0b417c99b10139f6100c6626ff0202802"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.133922, "relation_name": "`teamdata-291012`.`inter`.`survey_surveys`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_survey_surveys\" -%}   \n{%- set target_table = \"inter.survey_surveys\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/survey_surveys.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_survey_surveys` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_survey_surveys` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_survey_surveys` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_survey_surveys` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_offers": {"database": "teamdata-291012", "schema": "inter", "name": "sub_offers", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_offers.sql", "original_file_path": "models/dwh/inter/merge/sub_offers.sql", "unique_id": "model.warehouse.sub_offers", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_offers"], "alias": "sub_offers", "checksum": {"name": "sha256", "checksum": "c173a54d321c7134036b9cde87ad169e14495e2bd2d3a8d84478d8e06cd080e0"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.140495, "relation_name": "`teamdata-291012`.`inter`.`sub_offers`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_offers\" -%}   \n{%- set target_table = \"inter.sub_offers\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_offers.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_sub_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_offers` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.raf_reward_type": {"database": "teamdata-291012", "schema": "inter", "name": "raf_reward_type", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/raf_reward_type.sql", "original_file_path": "models/dwh/inter/merge/raf_reward_type.sql", "unique_id": "model.warehouse.raf_reward_type", "fqn": ["warehouse", "dwh", "inter", "merge", "raf_reward_type"], "alias": "raf_reward_type", "checksum": {"name": "sha256", "checksum": "8f00f36410db536513476ba7ef7dddae3a67b6748b01e0e3b626a7d529a87f6c"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.14703, "relation_name": "`teamdata-291012`.`inter`.`raf_reward_type`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_raf_reward_type\" -%}   \n{%- set target_table = \"inter.raf_reward_type\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/raf_reward_type.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_raf_reward_type` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_raf_reward_type` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_raf_reward_type` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_raf_reward_type` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.partial_box_paid": {"database": "teamdata-291012", "schema": "inter", "name": "partial_box_paid", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/partial_box_paid.sql", "original_file_path": "models/dwh/inter/merge/partial_box_paid.sql", "unique_id": "model.warehouse.partial_box_paid", "fqn": ["warehouse", "dwh", "inter", "merge", "partial_box_paid"], "alias": "partial_box_paid", "checksum": {"name": "sha256", "checksum": "6e1c959b8725b4923fcbd991b6eb722b97b18617d9c2e390004783f51947ebdd"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "Table des ventes partielles de box", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "warehouse://models/dwh/inter/table/schema.yml", "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.821456, "relation_name": "`teamdata-291012`.`inter`.`partial_box_paid`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_partial_box_paid\" -%}   \n{%- set target_table = \"inter.partial_box_paid\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/partial_box_paid.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_partial_box_paid` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_partial_box_paid` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_partial_box_paid` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_partial_box_paid` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["dw_country_code", "sub_id"], "time_spine": null}, "model.warehouse.boxes": {"database": "teamdata-291012", "schema": "inter", "name": "boxes", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/boxes.sql", "original_file_path": "models/dwh/inter/merge/boxes.sql", "unique_id": "model.warehouse.boxes", "fqn": ["warehouse", "dwh", "inter", "merge", "boxes"], "alias": "boxes", "checksum": {"name": "sha256", "checksum": "8e1a343c8b5599bdf8963869aca6eead752c1dc7bc2673187309600df9c35e95"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.1599731, "relation_name": "`teamdata-291012`.`inter`.`boxes`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_boxes\" -%}   \n{%- set target_table = \"inter.boxes\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id),\n     DATE_SUB(LEAD(shipping_date) OVER (ORDER BY date), INTERVAL 1 DAY) AS closing_date\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id),\n     DATE_SUB(LEAD(shipping_date) OVER (ORDER BY date), INTERVAL 1 DAY) AS closing_date\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/boxes.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id),\n     DATE_SUB(LEAD(shipping_date) OVER (ORDER BY date), INTERVAL 1 DAY) AS closing_date\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_boxes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id),\n     DATE_SUB(LEAD(shipping_date) OVER (ORDER BY date), INTERVAL 1 DAY) AS closing_date\n  FROM `teamdata-291012.prod_de.wp_jb_boxes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id),\n     DATE_SUB(LEAD(shipping_date) OVER (ORDER BY date), INTERVAL 1 DAY) AS closing_date\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_boxes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id),\n     DATE_SUB(LEAD(shipping_date) OVER (ORDER BY date), INTERVAL 1 DAY) AS closing_date\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_boxes` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_history": {"database": "teamdata-291012", "schema": "inter", "name": "sub_history", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_history.sql", "original_file_path": "models/dwh/inter/merge/sub_history.sql", "unique_id": "model.warehouse.sub_history", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_history"], "alias": "sub_history", "checksum": {"name": "sha256", "checksum": "8f70024fe98ada4ad365ed80fb090f73ed4bf059ce62f04f205b55e85227dcda"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.1736991, "relation_name": "`teamdata-291012`.`inter`.`sub_history`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_history\" -%}   \n{%- set target_table = \"inter.sub_history\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_history.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_sub_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_history` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.order_detail_sub_options": {"database": "teamdata-291012", "schema": "inter", "name": "order_detail_sub_options", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/order_detail_sub_options.sql", "original_file_path": "models/dwh/inter/merge/order_detail_sub_options.sql", "unique_id": "model.warehouse.order_detail_sub_options", "fqn": ["warehouse", "dwh", "inter", "merge", "order_detail_sub_options"], "alias": "order_detail_sub_options", "checksum": {"name": "sha256", "checksum": "30ef076d2bd186916cdadd3fad177b28f50b678c9dc02569f2ba726b8c913e6d"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.1803699, "relation_name": "`teamdata-291012`.`inter`.`order_detail_sub_options`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_order_detail_sub_options\" -%}   \n{%- set target_table = \"inter.order_detail_sub_options\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/order_detail_sub_options.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_order_detail_sub_options` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_order_detail_sub_options` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_order_detail_sub_options` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_order_detail_sub_options` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.user_campaign": {"database": "teamdata-291012", "schema": "inter", "name": "user_campaign", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/user_campaign.sql", "original_file_path": "models/dwh/inter/merge/user_campaign.sql", "unique_id": "model.warehouse.user_campaign", "fqn": ["warehouse", "dwh", "inter", "merge", "user_campaign"], "alias": "user_campaign", "checksum": {"name": "sha256", "checksum": "e5b2dd6f8f9169c3e8212e53ec218c4e93f42525e96f0089175c7eddc582133e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.186908, "relation_name": "`teamdata-291012`.`inter`.`user_campaign`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_user_campaign\" -%}   \n{%- set target_table = \"inter.user_campaign\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/user_campaign.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_user_campaign` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_user_campaign` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_user_campaign` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_user_campaign` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.saved_cart": {"database": "teamdata-291012", "schema": "inter", "name": "saved_cart", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/saved_cart.sql", "original_file_path": "models/dwh/inter/merge/saved_cart.sql", "unique_id": "model.warehouse.saved_cart", "fqn": ["warehouse", "dwh", "inter", "merge", "saved_cart"], "alias": "saved_cart", "checksum": {"name": "sha256", "checksum": "32184f24db6d79d0313d560375d3133c70225cdd5ceefa5db8d012d154a20ee1"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.19343, "relation_name": "`teamdata-291012`.`inter`.`saved_cart`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_saved_cart\" -%}   \n{%- set target_table = \"inter.saved_cart\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/saved_cart.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_saved_cart` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_saved_cart` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_saved_cart` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_saved_cart` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sub_suspend_survey_question_answer": {"database": "teamdata-291012", "schema": "inter", "name": "sub_suspend_survey_question_answer", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/sub_suspend_survey_question_answer.sql", "original_file_path": "models/dwh/inter/merge/sub_suspend_survey_question_answer.sql", "unique_id": "model.warehouse.sub_suspend_survey_question_answer", "fqn": ["warehouse", "dwh", "inter", "merge", "sub_suspend_survey_question_answer"], "alias": "sub_suspend_survey_question_answer", "checksum": {"name": "sha256", "checksum": "3c59a99acb199421596f5e2ee4a0c2883e7af959bd379160f2b5a11cda14870e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.200574, "relation_name": "`teamdata-291012`.`inter`.`sub_suspend_survey_question_answer`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_sub_suspend_survey_question_answer\" -%}   \n{%- set target_table = \"inter.sub_suspend_survey_question_answer\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, question_answer_id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      question_answer_id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(question_answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(question_answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/sub_suspend_survey_question_answer.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(question_answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_sub_suspend_survey_question_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(question_answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.prod_de.wp_jb_sub_suspend_survey_question_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(question_answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_es.wp_jb_sub_suspend_survey_question_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(question_answer_id AS INT64) AS id,\n    b.* \n  FROM `teamdata-291012.bdd_prod_it.wp_jb_sub_suspend_survey_question_answer` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.raf": {"database": "teamdata-291012", "schema": "inter", "name": "raf", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/raf.sql", "original_file_path": "models/dwh/inter/merge/raf.sql", "unique_id": "model.warehouse.raf", "fqn": ["warehouse", "dwh", "inter", "merge", "raf"], "alias": "raf", "checksum": {"name": "sha256", "checksum": "e04013436da568b03687d6118df901689012a0384ab0f1e0bc2744d6ae7af1c4"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.206941, "relation_name": "`teamdata-291012`.`inter`.`raf`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_raf\" -%}   \n{%- set target_table = \"inter.raf\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/raf.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_raf` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_raf` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_raf` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_raf` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.coupons": {"database": "teamdata-291012", "schema": "inter", "name": "coupons", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/coupons.sql", "original_file_path": "models/dwh/inter/merge/coupons.sql", "unique_id": "model.warehouse.coupons", "fqn": ["warehouse", "dwh", "inter", "merge", "coupons"], "alias": "coupons", "checksum": {"name": "sha256", "checksum": "3070e6f962025a33a77c815f4075952c6b1a06b082e63b4d65571ee4d6c48c06"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.213409, "relation_name": "`teamdata-291012`.`inter`.`coupons`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_coupons\" -%}   \n{%- set target_table = \"inter.coupons\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/coupons.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_coupons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_coupons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_coupons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_coupons` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.survey_answer_meanings": {"database": "teamdata-291012", "schema": "inter", "name": "survey_answer_meanings", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/survey_answer_meanings.sql", "original_file_path": "models/dwh/inter/merge/survey_answer_meanings.sql", "unique_id": "model.warehouse.survey_answer_meanings", "fqn": ["warehouse", "dwh", "inter", "merge", "survey_answer_meanings"], "alias": "survey_answer_meanings", "checksum": {"name": "sha256", "checksum": "abaf66c7db5abf05df761f8d57486bfb8cb91ff780a86ce51596eee461c4de4c"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.219948, "relation_name": "`teamdata-291012`.`inter`.`survey_answer_meanings`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_survey_answer_meanings\" -%}   \n{%- set target_table = \"inter.survey_answer_meanings\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/survey_answer_meanings.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_survey_answer_meanings` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_survey_answer_meanings` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_survey_answer_meanings` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_survey_answer_meanings` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.product_codification": {"database": "teamdata-291012", "schema": "inter", "name": "product_codification", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/product_codification.sql", "original_file_path": "models/dwh/inter/table/product_codification.sql", "unique_id": "model.warehouse.product_codification", "fqn": ["warehouse", "dwh", "inter", "table", "product_codification"], "alias": "product_codification", "checksum": {"name": "sha256", "checksum": "c771cd4659d715b6449c89af0936bb72241479e99f32dca9aa7a63ab5bc60a9d"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.226679, "relation_name": "`teamdata-291012`.`inter`.`product_codification`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_product_codification')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_product_codification')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_product_codification')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_product_codification')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_product_codification` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_product_codification` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_product_codification` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_product_codification` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/product_codification.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_product_codification` t\nWHERE true\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_product_codification` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_product_codification` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_product_codification` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.purchase_orders": {"database": "teamdata-291012", "schema": "inter", "name": "purchase_orders", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/purchase_orders.sql", "original_file_path": "models/dwh/inter/table/purchase_orders.sql", "unique_id": "model.warehouse.purchase_orders", "fqn": ["warehouse", "dwh", "inter", "table", "purchase_orders"], "alias": "purchase_orders", "checksum": {"name": "sha256", "checksum": "551e952242495c2fd48d36b6cab7cda92ce535a3c8422bddcbf955398bd8402b"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.240032, "relation_name": "`teamdata-291012`.`inter`.`purchase_orders`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_purchase_orders')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_purchase_orders')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_purchase_orders')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_purchase_orders')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_purchase_orders` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_purchase_orders` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_purchase_orders` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_purchase_orders` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/purchase_orders.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_purchase_orders` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_purchase_orders` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_purchase_orders` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_purchase_orders` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.user_mailing_list": {"database": "teamdata-291012", "schema": "inter", "name": "user_mailing_list", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/user_mailing_list.sql", "original_file_path": "models/dwh/inter/table/user_mailing_list.sql", "unique_id": "model.warehouse.user_mailing_list", "fqn": ["warehouse", "dwh", "inter", "table", "user_mailing_list"], "alias": "user_mailing_list", "checksum": {"name": "sha256", "checksum": "1f5e3d68e521de9607725c700d3d3c514a0b4dfea686de2c9324b5ee6cee310d"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.2526221, "relation_name": "`teamdata-291012`.`inter`.`user_mailing_list`", "raw_code": "{{ config(\n    partition_by={\n      \"field\": \"_airbyte_extracted_at\", \n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n--- partie pays\n\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_jb_user_mailing_list` b\n\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/user_mailing_list.sql", "compiled": true, "compiled_code": "--- partie pays\nSELECT \n  'FR' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_jb_user_mailing_list` b\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_jb_user_mailing_list` b\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_jb_user_mailing_list` b\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_jb_user_mailing_list` b\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.da_eu_countries": {"database": "teamdata-291012", "schema": "inter", "name": "da_eu_countries", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/da_eu_countries.sql", "original_file_path": "models/dwh/inter/table/da_eu_countries.sql", "unique_id": "model.warehouse.da_eu_countries", "fqn": ["warehouse", "dwh", "inter", "table", "da_eu_countries"], "alias": "da_eu_countries", "checksum": {"name": "sha256", "checksum": "753a1ab289816b46fda0f3f1bd2beafb6531099b7f9de30707f9ddae7dc1b9f6"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.2565792, "relation_name": "`teamdata-291012`.`inter`.`da_eu_countries`", "raw_code": "{{ config(\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n--- partie pays\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  country_code, country_name\nFROM `teamdata-291012.{{ country.dataset }}.da_eu_countries` b\n\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/da_eu_countries.sql", "compiled": true, "compiled_code": "--- partie pays\nSELECT \n  'FR' as dw_country_code,\n  country_code, country_name\nFROM `teamdata-291012.bdd_prod_fr.da_eu_countries` b\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  country_code, country_name\nFROM `teamdata-291012.prod_de.da_eu_countries` b\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  country_code, country_name\nFROM `teamdata-291012.bdd_prod_es.da_eu_countries` b\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  country_code, country_name\nFROM `teamdata-291012.bdd_prod_it.da_eu_countries` b\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.mini_byob_reexp": {"database": "teamdata-291012", "schema": "inter", "name": "mini_byob_reexp", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/mini_byob_reexp.sql", "original_file_path": "models/dwh/inter/table/mini_byob_reexp.sql", "unique_id": "model.warehouse.mini_byob_reexp", "fqn": ["warehouse", "dwh", "inter", "table", "mini_byob_reexp"], "alias": "mini_byob_reexp", "checksum": {"name": "sha256", "checksum": "1ec43fb71c41cbb823d19a9676ffb22ac857a76889ff419362f1c9ca796a7a72"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.260475, "relation_name": "`teamdata-291012`.`inter`.`mini_byob_reexp`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_mini_byob_reexp')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_mini_byob_reexp')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_mini_byob_reexp')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_mini_byob_reexp')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_mini_byob_reexp` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_mini_byob_reexp` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_mini_byob_reexp` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_mini_byob_reexp` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/mini_byob_reexp.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_mini_byob_reexp` t\nWHERE true\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_mini_byob_reexp` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_mini_byob_reexp` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_mini_byob_reexp` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.survey_question_categories": {"database": "teamdata-291012", "schema": "inter", "name": "survey_question_categories", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/survey_question_categories.sql", "original_file_path": "models/dwh/inter/table/survey_question_categories.sql", "unique_id": "model.warehouse.survey_question_categories", "fqn": ["warehouse", "dwh", "inter", "table", "survey_question_categories"], "alias": "survey_question_categories", "checksum": {"name": "sha256", "checksum": "e4af945952c0139b3ea584409911052a604a26fceb84338c84a126bed643f8e4"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.273639, "relation_name": "`teamdata-291012`.`inter`.`survey_question_categories`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_survey_question_categories')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_survey_question_categories')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_survey_question_categories')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_survey_question_categories')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_survey_question_categories` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_survey_question_categories` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_survey_question_categories` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_survey_question_categories` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/survey_question_categories.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_survey_question_categories` t\nWHERE true\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_survey_question_categories` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_survey_question_categories` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_survey_question_categories` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.order_status": {"database": "teamdata-291012", "schema": "inter", "name": "order_status", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/order_status.sql", "original_file_path": "models/dwh/inter/table/order_status.sql", "unique_id": "model.warehouse.order_status", "fqn": ["warehouse", "dwh", "inter", "table", "order_status"], "alias": "order_status", "checksum": {"name": "sha256", "checksum": "86798bd14d3f163260a72975a20acb87305d090b4136d8fc3efdcfe14eba9d3f"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.2870731, "relation_name": "`teamdata-291012`.`inter`.`order_status`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_order_status')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_order_status')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_order_status')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_order_status')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_order_status` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_order_status` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_order_status` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_order_status` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/order_status.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_order_status` t\nWHERE true\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_order_status` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_order_status` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_order_status` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.customers_carts": {"database": "teamdata-291012", "schema": "user", "name": "customers_carts", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/customers_carts.sql", "original_file_path": "models/dwh/inter/table/customers_carts.sql", "unique_id": "model.warehouse.customers_carts", "fqn": ["warehouse", "dwh", "inter", "table", "customers_carts"], "alias": "customers_carts", "checksum": {"name": "sha256", "checksum": "fd48222fa629f369642c1d1aac79aa5d1b6059fad3ff10fb8d8a5e05f438f343"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.300158, "relation_name": "`teamdata-291012`.`user`.`customers_carts`", "raw_code": "SELECT c.dw_country_code,cart_id,c.created_at created_utc ,datetime(cd.created_at,'Europe/Paris') as date,concat(c.dw_country_code,'_',user_id) as user_key ,\ncd.product_id, c.status_id,p.brand_full_name,p.ht_sale_price,p.product_nice_name,p.thumb_url,pro.price,pro.attr_special_sub_price,pro.attr_special_price,\ncurrent_datetime('Europe/Paris') as current_datetime,\ntimestamp(c.created_at,\"Europe/Paris\") created_cart_timestamp,\ncase \n\nwhen datetime_diff(current_datetime('Europe/Paris'), datetime(c.created_at), hour)>1  and c.status_id in (1,2) then true else false end as  is_abandonned,\ndatetime_diff(current_datetime('Europe/Paris'), datetime(c.created_at), hour) as cart_age_hours,\ndatetime_diff(current_datetime('Europe/Paris'), datetime(c.created_at), minute) as cart_age_minutes,\nsum(cd.qty) as nb_items,\ncase when datetime_diff(current_datetime(), c.created_at, hour)<48 then true else false end as winback_possible\nFROM `teamdata-291012.inter.saved_cart` c\nleft join {{ ref('saved_cart_details') }} cd on c.id=cd.cart_id and c.dw_country_code=cd.dw_country_code\nleft join {{ ref('catalog') }} p on p.product_id=cd.product_id and p.dw_country_code=cd.dw_country_code\nleft join {{ ref('products') }} pro on pro.id=cd.product_id and pro.dw_country_code=cd.dw_country_code\nwhere 1=1\n\ngroup by all\n--having cart_age_hours < 1000\n-- having  user_key='FR_626757'\norder by date desc\n--LIMIT 1000", "language": "sql", "refs": [{"name": "saved_cart_details", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.saved_cart_details", "model.warehouse.catalog", "model.warehouse.products"]}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/customers_carts.sql", "compiled": true, "compiled_code": "SELECT c.dw_country_code,cart_id,c.created_at created_utc ,datetime(cd.created_at,'Europe/Paris') as date,concat(c.dw_country_code,'_',user_id) as user_key ,\ncd.product_id, c.status_id,p.brand_full_name,p.ht_sale_price,p.product_nice_name,p.thumb_url,pro.price,pro.attr_special_sub_price,pro.attr_special_price,\ncurrent_datetime('Europe/Paris') as current_datetime,\ntimestamp(c.created_at,\"Europe/Paris\") created_cart_timestamp,\ncase \n\nwhen datetime_diff(current_datetime('Europe/Paris'), datetime(c.created_at), hour)>1  and c.status_id in (1,2) then true else false end as  is_abandonned,\ndatetime_diff(current_datetime('Europe/Paris'), datetime(c.created_at), hour) as cart_age_hours,\ndatetime_diff(current_datetime('Europe/Paris'), datetime(c.created_at), minute) as cart_age_minutes,\nsum(cd.qty) as nb_items,\ncase when datetime_diff(current_datetime(), c.created_at, hour)<48 then true else false end as winback_possible\nFROM `teamdata-291012.inter.saved_cart` c\nleft join `teamdata-291012`.`inter`.`saved_cart_details` cd on c.id=cd.cart_id and c.dw_country_code=cd.dw_country_code\nleft join `teamdata-291012`.`product`.`catalog` p on p.product_id=cd.product_id and p.dw_country_code=cd.dw_country_code\nleft join `teamdata-291012`.`inter`.`products` pro on pro.id=cd.product_id and pro.dw_country_code=cd.dw_country_code\nwhere 1=1\n\ngroup by all\n--having cart_age_hours < 1000\n-- having  user_key='FR_626757'\norder by date desc\n--LIMIT 1000", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.da_box_acquisition_detail": {"database": "teamdata-291012", "schema": "inter", "name": "da_box_acquisition_detail", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/da_box_acquisition_detail.sql", "original_file_path": "models/dwh/inter/table/da_box_acquisition_detail.sql", "unique_id": "model.warehouse.da_box_acquisition_detail", "fqn": ["warehouse", "dwh", "inter", "table", "da_box_acquisition_detail"], "alias": "da_box_acquisition_detail", "checksum": {"name": "sha256", "checksum": "31c1ce8f123c00e4a7a8251e6d41ebc658625d23bf8dee2a9d2dac667af99b00"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.301746, "relation_name": "`teamdata-291012`.`inter`.`da_box_acquisition_detail`", "raw_code": "{{ config(\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n--- partie pays\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  VIP,box_id,modified,sent_on_oc,total_churn,sold_and_free,gift_activation,\n  free_rapat_bureau,new_subs_after_oc,new_subs_before_oc,\n  forthcoming_to_come,reactivations_after_oc, reactivations_before_oc,forthcoming_already_paid,churn_monthly_suspendable\nFROM `teamdata-291012.{{ country.dataset }}.da_box_acquisition_detail` b\n\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/da_box_acquisition_detail.sql", "compiled": true, "compiled_code": "--- partie pays\nSELECT \n  'FR' as dw_country_code,\n  VIP,box_id,modified,sent_on_oc,total_churn,sold_and_free,gift_activation,\n  free_rapat_bureau,new_subs_after_oc,new_subs_before_oc,\n  forthcoming_to_come,reactivations_after_oc, reactivations_before_oc,forthcoming_already_paid,churn_monthly_suspendable\nFROM `teamdata-291012.bdd_prod_fr.da_box_acquisition_detail` b\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  VIP,box_id,modified,sent_on_oc,total_churn,sold_and_free,gift_activation,\n  free_rapat_bureau,new_subs_after_oc,new_subs_before_oc,\n  forthcoming_to_come,reactivations_after_oc, reactivations_before_oc,forthcoming_already_paid,churn_monthly_suspendable\nFROM `teamdata-291012.prod_de.da_box_acquisition_detail` b\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  VIP,box_id,modified,sent_on_oc,total_churn,sold_and_free,gift_activation,\n  free_rapat_bureau,new_subs_after_oc,new_subs_before_oc,\n  forthcoming_to_come,reactivations_after_oc, reactivations_before_oc,forthcoming_already_paid,churn_monthly_suspendable\nFROM `teamdata-291012.bdd_prod_es.da_box_acquisition_detail` b\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  VIP,box_id,modified,sent_on_oc,total_churn,sold_and_free,gift_activation,\n  free_rapat_bureau,new_subs_after_oc,new_subs_before_oc,\n  forthcoming_to_come,reactivations_after_oc, reactivations_before_oc,forthcoming_already_paid,churn_monthly_suspendable\nFROM `teamdata-291012.bdd_prod_it.da_box_acquisition_detail` b\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.da_monthly_sub_baseline": {"database": "teamdata-291012", "schema": "inter", "name": "da_monthly_sub_baseline", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/da_monthly_sub_baseline.sql", "original_file_path": "models/dwh/inter/table/da_monthly_sub_baseline.sql", "unique_id": "model.warehouse.da_monthly_sub_baseline", "fqn": ["warehouse", "dwh", "inter", "table", "da_monthly_sub_baseline"], "alias": "da_monthly_sub_baseline", "checksum": {"name": "sha256", "checksum": "c24c89545e8ecef931151e6349db78d0755456833e2d17da50f8f8191d13e25e"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.306564, "relation_name": "`teamdata-291012`.`inter`.`da_monthly_sub_baseline`", "raw_code": "{{ config(\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n--- partie pays\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  b.month,box_id,nb_sub,nb_forthcoming_already_paid,\n  nb_forthcoming_payment_to_come\nFROM `teamdata-291012.{{ country.dataset }}.da_monthly_sub_baseline` b\n\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/da_monthly_sub_baseline.sql", "compiled": true, "compiled_code": "--- partie pays\nSELECT \n  'FR' as dw_country_code,\n  b.month,box_id,nb_sub,nb_forthcoming_already_paid,\n  nb_forthcoming_payment_to_come\nFROM `teamdata-291012.bdd_prod_fr.da_monthly_sub_baseline` b\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  b.month,box_id,nb_sub,nb_forthcoming_already_paid,\n  nb_forthcoming_payment_to_come\nFROM `teamdata-291012.prod_de.da_monthly_sub_baseline` b\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  b.month,box_id,nb_sub,nb_forthcoming_already_paid,\n  nb_forthcoming_payment_to_come\nFROM `teamdata-291012.bdd_prod_es.da_monthly_sub_baseline` b\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  b.month,box_id,nb_sub,nb_forthcoming_already_paid,\n  nb_forthcoming_payment_to_come\nFROM `teamdata-291012.bdd_prod_it.da_monthly_sub_baseline` b\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.expected_inbound_details": {"database": "teamdata-291012", "schema": "inter", "name": "expected_inbound_details", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/expected_inbound_details.sql", "original_file_path": "models/dwh/inter/table/expected_inbound_details.sql", "unique_id": "model.warehouse.expected_inbound_details", "fqn": ["warehouse", "dwh", "inter", "table", "expected_inbound_details"], "alias": "expected_inbound_details", "checksum": {"name": "sha256", "checksum": "9d32d2d0700911ddb323d847510e1d9cd25d370bd9652311a3a709081d1de76d"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_expected_inbound_details', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "incremental_strategy": "merge", "unique_key": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_expected_inbound_details', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995464.310559, "relation_name": "`teamdata-291012`.`inter`.`expected_inbound_details`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_expected_inbound_details\" -%}   \n{%- set target_table = \"inter.expected_inbound_details\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n  post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL \" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/expected_inbound_details.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_expected_inbound_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL \n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_expected_inbound_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL \n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_expected_inbound_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL \n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_expected_inbound_details` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.invoice_credit_notes": {"database": "teamdata-291012", "schema": "inter", "name": "invoice_credit_notes", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/invoice_credit_notes.sql", "original_file_path": "models/dwh/inter/table/invoice_credit_notes.sql", "unique_id": "model.warehouse.invoice_credit_notes", "fqn": ["warehouse", "dwh", "inter", "table", "invoice_credit_notes"], "alias": "invoice_credit_notes", "checksum": {"name": "sha256", "checksum": "4d1734d96a9f7f3565f69b94f5bd771c86332c89584a687b52db61c0b41fb30b"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.317239, "relation_name": "`teamdata-291012`.`inter`.`invoice_credit_notes`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_invoice_credit_notes')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_invoice_credit_notes')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_invoice_credit_notes')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_invoice_credit_notes')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_invoice_credit_notes` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_invoice_credit_notes` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_invoice_credit_notes` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_invoice_credit_notes` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/invoice_credit_notes.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_invoice_credit_notes` t\nWHERE true\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_invoice_credit_notes` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_invoice_credit_notes` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_invoice_credit_notes` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.boxes_by_day": {"database": "teamdata-291012", "schema": "inter", "name": "boxes_by_day", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/boxes_by_day.sql", "original_file_path": "models/dwh/inter/table/boxes_by_day.sql", "unique_id": "model.warehouse.boxes_by_day", "fqn": ["warehouse", "dwh", "inter", "table", "boxes_by_day"], "alias": "boxes_by_day", "checksum": {"name": "sha256", "checksum": "c4481997ea4fed0d27ed182c20005443e1cb471a7a06387c7b908e4b877e01ec"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.330135, "relation_name": "`teamdata-291012`.`inter`.`boxes_by_day`", "raw_code": "with debut as (\n  select  id, dw_country_code,\n  date,\n  min(shipping_date) as first,\n  LEAD(min(shipping_date)-1) OVER(ORDER BY dw_country_code,id) as last\n   from {{ ref('boxes') }}\ngroup by 1,2,3\norder by id \n)\n\n\nsELECT  *  FROM UNNEST(\n  GENERATE_DATE_ARRAY('2011-01-01','2030-12-31')\n  \n  )as d\n\n  inner join debut on d >=debut.first  and d<=debut.last\n -- where id=143 and dw_country_code='FR'\norder by d asc", "language": "sql", "refs": [{"name": "boxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.boxes"]}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/boxes_by_day.sql", "compiled": true, "compiled_code": "with debut as (\n  select  id, dw_country_code,\n  date,\n  min(shipping_date) as first,\n  LEAD(min(shipping_date)-1) OVER(ORDER BY dw_country_code,id) as last\n   from `teamdata-291012`.`inter`.`boxes`\ngroup by 1,2,3\norder by id \n)\n\n\nsELECT  *  FROM UNNEST(\n  GENERATE_DATE_ARRAY('2011-01-01','2030-12-31')\n  \n  )as d\n\n  inner join debut on d >=debut.first  and d<=debut.last\n -- where id=143 and dw_country_code='FR'\norder by d asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.brands": {"database": "teamdata-291012", "schema": "inter", "name": "brands", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/brands.sql", "original_file_path": "models/dwh/inter/table/brands.sql", "unique_id": "model.warehouse.brands", "fqn": ["warehouse", "dwh", "inter", "table", "brands"], "alias": "brands", "checksum": {"name": "sha256", "checksum": "6110ef8047fca3cf05ab4e42d9e59503ac15fc3585580bd5ce39bf2342bdced5"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "incremental_strategy": "merge", "unique_key": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.3316119, "relation_name": "`teamdata-291012`.`inter`.`brands`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_brands\" -%}   \n{%- set target_table = \"inter.brands\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/brands.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_brands` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_brands` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_brands` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_brands` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.terms": {"database": "teamdata-291012", "schema": "inter", "name": "terms", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/terms.sql", "original_file_path": "models/dwh/inter/table/terms.sql", "unique_id": "model.warehouse.terms", "fqn": ["warehouse", "dwh", "inter", "table", "terms"], "alias": "terms", "checksum": {"name": "sha256", "checksum": "cd62095ffa178ad6d515ccad4abf2e8e3f64a121be8b5b68a6a78803ad1ffe70"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.33842, "relation_name": "`teamdata-291012`.`inter`.`terms`", "raw_code": "{{ config(\n    partition_by={\n      \"field\": \"_airbyte_extracted_at\", \n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n--- partie pays\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  b.*\nFROM `teamdata-291012.{{ country.dataset }}.wp_terms` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n{% if is_incremental() %}\n  AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR)\n{% endif %}\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/terms.sql", "compiled": true, "compiled_code": "--- partie pays\nSELECT \n  'FR' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_terms` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  b.*\nFROM `teamdata-291012.prod_de.wp_terms` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_es.wp_terms` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_it.wp_terms` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.expected_inbounds": {"database": "teamdata-291012", "schema": "inter", "name": "expected_inbounds", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/expected_inbounds.sql", "original_file_path": "models/dwh/inter/table/expected_inbounds.sql", "unique_id": "model.warehouse.expected_inbounds", "fqn": ["warehouse", "dwh", "inter", "table", "expected_inbounds"], "alias": "expected_inbounds", "checksum": {"name": "sha256", "checksum": "6849e6e09eb75891c2efefbe8c5d62a51901cf62fe6307c52d73430c59d90f19"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.344013, "relation_name": "`teamdata-291012`.`inter`.`expected_inbounds`", "raw_code": "{{ config(\n   materialized='table'\n) }}\n\n\n{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_expected_inbounds')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_expected_inbounds')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_expected_inbounds')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_expected_inbounds')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_expected_inbounds` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_expected_inbounds` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_expected_inbounds` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_expected_inbounds` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/expected_inbounds.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_expected_inbounds` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_expected_inbounds` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_expected_inbounds` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_expected_inbounds` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sample_product_link": {"database": "teamdata-291012", "schema": "inter", "name": "sample_product_link", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/sample_product_link.sql", "original_file_path": "models/dwh/inter/table/sample_product_link.sql", "unique_id": "model.warehouse.sample_product_link", "fqn": ["warehouse", "dwh", "inter", "table", "sample_product_link"], "alias": "sample_product_link", "checksum": {"name": "sha256", "checksum": "f2322675c63d7c689e11cc51861490202fd43e0b29a8f0f02880024c4651031c"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "created_at": 1759995464.3571498, "relation_name": "`teamdata-291012`.`inter`.`sample_product_link`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"sample_product_link\" -%}   \n{%- set target_table = \"inter.sample_product_link\" -%}   \n\n{{ config(\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"}\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n\n\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/sample_product_link.sql", "compiled": true, "compiled_code": "\n  SELECT\n    'FR' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.bdd_prod_fr.sample_product_link` AS b\n\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.prod_de.sample_product_link` AS b\n\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.bdd_prod_es.sample_product_link` AS b\n\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.bdd_prod_it.sample_product_link` AS b\n\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.tva_product": {"database": "teamdata-291012", "schema": "inter", "name": "tva_product", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/tva_product.sql", "original_file_path": "models/dwh/inter/table/tva_product.sql", "unique_id": "model.warehouse.tva_product", "fqn": ["warehouse", "dwh", "inter", "table", "tva_product"], "alias": "tva_product", "checksum": {"name": "sha256", "checksum": "ab8bad8592b7c12d588f5db0ae34206f330abd9f289ff91ec3ad60d31fccd13c"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.3619032, "relation_name": "`teamdata-291012`.`inter`.`tva_product`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_tva_product')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_tva_product')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_tva_product')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_tva_product')) -%}\n\nSELECT 'FR' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_fr.wp_jb_tva_product` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\nAND category='normal'\ngroup by all\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_de.wp_jb_tva_product` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\nAND category='normal'\ngroup by all\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_es.wp_jb_tva_product` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\nAND category='normal'\ngroup by all\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_it.wp_jb_tva_product` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\nAND category='normal'\ngroup by all", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/tva_product.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_fr.wp_jb_tva_product` t\nWHERE true\nAND category='normal'\ngroup by all\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_de.wp_jb_tva_product` t\nWHERE true\nAND category='normal'\ngroup by all\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_es.wp_jb_tva_product` t\nWHERE true\nAND category='normal'\ngroup by all\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\ncountry_code,category,max(taux) taux\nFROM `bdd_prod_it.wp_jb_tva_product` t\nWHERE true\nAND category='normal'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.byob_product_link": {"database": "teamdata-291012", "schema": "inter", "name": "byob_product_link", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/byob_product_link.sql", "original_file_path": "models/dwh/inter/table/byob_product_link.sql", "unique_id": "model.warehouse.byob_product_link", "fqn": ["warehouse", "dwh", "inter", "table", "byob_product_link"], "alias": "byob_product_link", "checksum": {"name": "sha256", "checksum": "4c6f2589743cc7e322f0484ffe24ca96af8bfb95107dadfc55626a5f036dbf88"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "created_at": 1759995464.368119, "relation_name": "`teamdata-291012`.`inter`.`byob_product_link`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_byob_product_link\" -%}   \n{%- set target_table = \"inter.byob_product_link\" -%}   \n{%- set countries = var('survey_countries') -%}\n{{ config(\n\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"}\n) }}\n\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/byob_product_link.sql", "compiled": true, "compiled_code": "\n\n  \n  SELECT\n    'FR' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_byob_product_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.prod_de.wp_jb_byob_product_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.bdd_prod_es.wp_jb_byob_product_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    b.* \n  FROM `teamdata-291012.bdd_prod_it.wp_jb_byob_product_link` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.range_of_age": {"database": "teamdata-291012", "schema": "inter", "name": "range_of_age", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/range_of_age.sql", "original_file_path": "models/dwh/inter/table/range_of_age.sql", "unique_id": "model.warehouse.range_of_age", "fqn": ["warehouse", "dwh", "inter", "table", "range_of_age"], "alias": "range_of_age", "checksum": {"name": "sha256", "checksum": "085105e1b41979fffd5bdf98ea92b3d50197935fa0e281da9719b03486dc8ce8"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "incremental_strategy": "merge", "unique_key": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.372417, "relation_name": "`teamdata-291012`.`inter`.`range_of_age`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_range_of_age\" -%}   \n{%- set target_table = \"inter.range_of_age\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/range_of_age.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_range_of_age` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_range_of_age` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_range_of_age` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_range_of_age` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.da_box_shipped_detail": {"database": "teamdata-291012", "schema": "inter", "name": "da_box_shipped_detail", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/da_box_shipped_detail.sql", "original_file_path": "models/dwh/inter/table/da_box_shipped_detail.sql", "unique_id": "model.warehouse.da_box_shipped_detail", "fqn": ["warehouse", "dwh", "inter", "table", "da_box_shipped_detail"], "alias": "da_box_shipped_detail", "checksum": {"name": "sha256", "checksum": "b61b19ca3a6a8967a027369f0db4dd6b182b57b5d3750dfa6a9f101eaca56b85"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.3800251, "relation_name": "`teamdata-291012`.`inter`.`da_box_shipped_detail`", "raw_code": "{{ config(\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n--- partie pays\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  free,box_id,yearly,monthly,modified,gift_1month,gift_3months,gift_6months,reexpedition,\n  gift_12months,sold_and_free,sold_not_paid,monthly_committed,monthly_uncommitted\nFROM `teamdata-291012.{{ country.dataset }}.da_box_shipped_detail` b\n\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/da_box_shipped_detail.sql", "compiled": true, "compiled_code": "--- partie pays\nSELECT \n  'FR' as dw_country_code,\n  free,box_id,yearly,monthly,modified,gift_1month,gift_3months,gift_6months,reexpedition,\n  gift_12months,sold_and_free,sold_not_paid,monthly_committed,monthly_uncommitted\nFROM `teamdata-291012.bdd_prod_fr.da_box_shipped_detail` b\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  free,box_id,yearly,monthly,modified,gift_1month,gift_3months,gift_6months,reexpedition,\n  gift_12months,sold_and_free,sold_not_paid,monthly_committed,monthly_uncommitted\nFROM `teamdata-291012.prod_de.da_box_shipped_detail` b\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  free,box_id,yearly,monthly,modified,gift_1month,gift_3months,gift_6months,reexpedition,\n  gift_12months,sold_and_free,sold_not_paid,monthly_committed,monthly_uncommitted\nFROM `teamdata-291012.bdd_prod_es.da_box_shipped_detail` b\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  free,box_id,yearly,monthly,modified,gift_1month,gift_3months,gift_6months,reexpedition,\n  gift_12months,sold_and_free,sold_not_paid,monthly_committed,monthly_uncommitted\nFROM `teamdata-291012.bdd_prod_it.da_box_shipped_detail` b\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.term_relationships": {"database": "teamdata-291012", "schema": "inter", "name": "term_relationships", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/term_relationships.sql", "original_file_path": "models/dwh/inter/table/term_relationships.sql", "unique_id": "model.warehouse.term_relationships", "fqn": ["warehouse", "dwh", "inter", "table", "term_relationships"], "alias": "term_relationships", "checksum": {"name": "sha256", "checksum": "6513b88be68f94a1d4b66817495c88a0f425d5ad36399985c66ebae2484cb2a6"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.3838952, "relation_name": "`teamdata-291012`.`inter`.`term_relationships`", "raw_code": "{{ config(\n    partition_by={\n      \"field\": \"_airbyte_extracted_at\", \n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  b.*\nFROM `teamdata-291012.{{ country.dataset }}.wp_term_relationships` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n{% if is_incremental() %}\n  AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR)\n{% endif %}\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/term_relationships.sql", "compiled": true, "compiled_code": "\nSELECT \n  'FR' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_term_relationships` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  b.*\nFROM `teamdata-291012.prod_de.wp_term_relationships` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_es.wp_term_relationships` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_it.wp_term_relationships` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.term_taxonomy": {"database": "teamdata-291012", "schema": "inter", "name": "term_taxonomy", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/table/term_taxonomy.sql", "original_file_path": "models/dwh/inter/table/term_taxonomy.sql", "unique_id": "model.warehouse.term_taxonomy", "fqn": ["warehouse", "dwh", "inter", "table", "term_taxonomy"], "alias": "term_taxonomy", "checksum": {"name": "sha256", "checksum": "2296e8600316070d3956ae5d82dcb50d59dd0ebe5c9fec60395367ac65ca358d"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.38814, "relation_name": "`teamdata-291012`.`inter`.`term_taxonomy`", "raw_code": "{{ config(\n    partition_by={\n      \"field\": \"_airbyte_extracted_at\", \n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by=[\"dw_country_code\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n\n\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  b.*\nFROM `teamdata-291012.{{ country.dataset }}.wp_term_taxonomy` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n{% if is_incremental() %}\n  AND `_airbyte_extracted_at` >= timestamp_SUB(CURRENT_timestamp(), INTERVAL 2 HOUR)\n{% endif %}\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/term_taxonomy.sql", "compiled": true, "compiled_code": "\nSELECT \n  'FR' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_fr.wp_term_taxonomy` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  b.*\nFROM `teamdata-291012.prod_de.wp_term_taxonomy` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_es.wp_term_taxonomy` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  b.*\nFROM `teamdata-291012.bdd_prod_it.wp_term_taxonomy` b\nWHERE `_ab_cdc_deleted_at` IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_mono": {"database": "teamdata-291012", "schema": "sales", "name": "box_mono", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/box_mono.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/box_mono.sql", "unique_id": "model.warehouse.box_mono", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "box_mono"], "alias": "box_mono", "checksum": {"name": "sha256", "checksum": "b1fd97c66cd32e33037b8b36e29f984f5080c8904609806c8fea84277eb10773"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.3924701, "relation_name": "`teamdata-291012`.`sales`.`box_mono`", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n  \n  SELECT dw_country_code, box_id as mono_box_id, coffret_id as mono_coffret_id,max(component_brand_name) as mono_brand\n  FROM\n  (\n  SELECT kd.dw_country_code, kd.box_id, kd.coffret_id, kd.box_date,  kd.component_brand_id, kd.component_brand_name, count(*) AS nb_distinct_brands\n  FROM product.kit_details kd\n  WHERE kd.component_brand_name NOT LIKE '%lissim%'\n  AND kd.box_year >= 2018\n  GROUP BY kd.box_id, kd.coffret_id, kd.box_date, kd.component_brand_id, kd.dw_country_code, kd.component_brand_name\n  HAVING nb_distinct_brands >3\n  ) t\n  GROUP BY dw_country_code, box_id, coffret_id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/box_mono.sql", "compiled": true, "compiled_code": "\n  \n  SELECT dw_country_code, box_id as mono_box_id, coffret_id as mono_coffret_id,max(component_brand_name) as mono_brand\n  FROM\n  (\n  SELECT kd.dw_country_code, kd.box_id, kd.coffret_id, kd.box_date,  kd.component_brand_id, kd.component_brand_name, count(*) AS nb_distinct_brands\n  FROM product.kit_details kd\n  WHERE kd.component_brand_name NOT LIKE '%lissim%'\n  AND kd.box_year >= 2018\n  GROUP BY kd.box_id, kd.coffret_id, kd.box_date, kd.component_brand_id, kd.dw_country_code, kd.component_brand_name\n  HAVING nb_distinct_brands >3\n  ) t\n  GROUP BY dw_country_code, box_id, coffret_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.consent": {"database": "teamdata-291012", "schema": "inter", "name": "consent", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/consent.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/consent.sql", "unique_id": "model.warehouse.consent", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "consent"], "alias": "consent", "checksum": {"name": "sha256", "checksum": "c31ba003856c0f9406f5a2fe8a5a07097d5b9d119452fee8f165cfb4269dcb58"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.393985, "relation_name": "`teamdata-291012`.`inter`.`consent`", "raw_code": "{{ config(\n   materialized='view'\n) }}\n\nSELECT c.*,name \nFROM {{ ref('user_consent') }} c\ninner join {{ ref('consent_topic') }} ct using(consent_topic_id,dw_country_code)", "language": "sql", "refs": [{"name": "user_consent", "package": null, "version": null}, {"name": "consent_topic", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.user_consent", "model.warehouse.consent_topic"]}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/consent.sql", "compiled": true, "compiled_code": "\n\nSELECT c.*,name \nFROM `teamdata-291012`.`inter`.`user_consent` c\ninner join `teamdata-291012`.`inter`.`consent_topic` ct using(consent_topic_id,dw_country_code)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.reception_details": {"database": "teamdata-291012", "schema": "inter", "name": "reception_details", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/reception_details.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/reception_details.sql", "unique_id": "model.warehouse.reception_details", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "reception_details"], "alias": "reception_details", "checksum": {"name": "sha256", "checksum": "c1976efc66dc4b3b407212e92a6a2b3b95baf70b3b80d0841a175cda4ee5e79a"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.3956978, "relation_name": "`teamdata-291012`.`inter`.`reception_details`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_reception_details')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_reception_details')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_reception_details')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_reception_details')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_reception_details` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_reception_details` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_reception_details` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_reception_details` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/reception_details.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_reception_details` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_reception_details` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_reception_details` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_reception_details` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.gift_cards": {"database": "teamdata-291012", "schema": "inter", "name": "gift_cards", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/gift_cards.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/gift_cards.sql", "unique_id": "model.warehouse.gift_cards", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "gift_cards"], "alias": "gift_cards", "checksum": {"name": "sha256", "checksum": "95bb7b5da10681bb4795e377f5051bac501936d003666b697cfd33353b2d66b8"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360, "incremental_strategy": "merge", "unique_key": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.408983, "relation_name": "`teamdata-291012`.`inter`.`gift_cards`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_gift_cards\" -%}   \n{%- set target_table = \"inter.gift_cards\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/gift_cards.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_gift_cards` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_gift_cards` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_gift_cards` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_gift_cards` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.options": {"database": "teamdata-291012", "schema": "inter", "name": "options", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/options.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/options.sql", "unique_id": "model.warehouse.options", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "options"], "alias": "options", "checksum": {"name": "sha256", "checksum": "bdc93663c6b08c81a663711be10a1b6f0398a98001369565ad3498cb27bb98af"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.4155881, "relation_name": "`teamdata-291012`.`inter`.`options`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_options')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_options')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_options')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_options')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_options` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_options` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_options` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_options` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/options.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_options` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_options` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_options` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_options` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.warehouse": {"database": "teamdata-291012", "schema": "inter", "name": "warehouse", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/warehouse.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/warehouse.sql", "unique_id": "model.warehouse.warehouse", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "warehouse"], "alias": "warehouse", "checksum": {"name": "sha256", "checksum": "86942ea039e16aa901b9a22d3cf135c3656ff443adf0108b72c168a9cd8900c8"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.428386, "relation_name": "`teamdata-291012`.`inter`.`warehouse`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_warehouse')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_warehouse')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_warehouse')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_warehouse')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_warehouse` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_warehouse` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_warehouse` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_warehouse` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/warehouse.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_warehouse` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_warehouse` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_warehouse` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_warehouse` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.survey_results": {"database": "teamdata-291012", "schema": "inter", "name": "survey_results", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/survey_results.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/survey_results.sql", "unique_id": "model.warehouse.survey_results", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "survey_results"], "alias": "survey_results", "checksum": {"name": "sha256", "checksum": "cebd4c9d83f0f1c4692aa38bd11658409768b60efbe57b2587f5394c7f9d8a56"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.440882, "relation_name": "`teamdata-291012`.`inter`.`survey_results`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_survey_results')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_survey_results')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_survey_results')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_survey_results')) -%}\n\nSELECT 'FR' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_fr.wp_jb_survey_results` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_de.wp_jb_survey_results` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_es.wp_jb_survey_results` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_it.wp_jb_survey_results` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/survey_results.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_fr.wp_jb_survey_results` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_de.wp_jb_survey_results` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_es.wp_jb_survey_results` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\norder_detail_id, survey_id, sub_id, order_id, status, timestamp, id, datetime(updated_at)updated_at, user_id \nFROM `bdd_prod_it.wp_jb_survey_results` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.trackings": {"database": "teamdata-291012", "schema": "inter", "name": "trackings", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/trackings.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/trackings.sql", "unique_id": "model.warehouse.trackings", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "trackings"], "alias": "trackings", "checksum": {"name": "sha256", "checksum": "d9646e7313494a105d01a620dbc73b6b5cf2e400ddb1c8bf07ed32c49765ab39"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.4471319, "relation_name": "`teamdata-291012`.`inter`.`trackings`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_trackings')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_trackings')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_trackings')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_trackings')) -%}\n\nSELECT 'FR' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_fr.wp_jb_trackings` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_de.wp_jb_trackings` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_es.wp_jb_trackings` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_it.wp_jb_trackings` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/trackings.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_fr.wp_jb_trackings` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_de.wp_jb_trackings` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_es.wp_jb_trackings` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\n id,\n  order_id,\n  order_detail_id,\n  sub_id,\n  mini_reexp_id,\n  number,\n  type,\n  status,\n  SAFE_CAST(date AS STRING) AS date,\n  last_update,\n  description,\n  coffret_id,\n  insert_date,\n  created_at,\n  updated_at\nFROM `bdd_prod_it.wp_jb_trackings` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.consent_topic": {"database": "teamdata-291012", "schema": "inter", "name": "consent_topic", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/consent_topic.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/consent_topic.sql", "unique_id": "model.warehouse.consent_topic", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "consent_topic"], "alias": "consent_topic", "checksum": {"name": "sha256", "checksum": "f17f135d34ec80e79e36893495914387e878dbe7ddbdbf0d875433ceaa9beb21"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.452814, "relation_name": "`teamdata-291012`.`inter`.`consent_topic`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_consent_topic')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_consent_topic')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_consent_topic')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_consent_topic')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_consent_topic` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_consent_topic` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_consent_topic` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_consent_topic` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/consent_topic.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_consent_topic` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_consent_topic` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_consent_topic` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_consent_topic` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.survey_questions": {"database": "teamdata-291012", "schema": "inter", "name": "survey_questions", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/survey_questions.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/survey_questions.sql", "unique_id": "model.warehouse.survey_questions", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "survey_questions"], "alias": "survey_questions", "checksum": {"name": "sha256", "checksum": "2164b91ef2e21a753026ff298394108d37d62595bfb5e6d22b42badf647d6335"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.464981, "relation_name": "`teamdata-291012`.`inter`.`survey_questions`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_survey_questions')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_survey_questions')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_survey_questions')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_survey_questions')) -%}\n\n\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_survey_questions` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_survey_questions` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_survey_questions` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_survey_questions` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/survey_questions.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_survey_questions` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_survey_questions` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_survey_questions` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_survey_questions` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.kit": {"database": "teamdata-291012", "schema": "bdd_prod_sublissim", "name": "kit", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/kit.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/kit.sql", "unique_id": "model.warehouse.kit", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "kit"], "alias": "kit", "checksum": {"name": "sha256", "checksum": "cc75977846e0ae1a8050759f4a01ea4bd12fa27292b637e10d1795a974294d8b"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.477262, "relation_name": "`teamdata-291012`.`bdd_prod_sublissim`.`kit`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_sublissim', identifier='kit_raw')) -%}\n\nSELECT \nt.*\nFROM `bdd_prod_sublissim.kit_raw` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/kit.sql", "compiled": true, "compiled_code": "SELECT \nt.*\nFROM `bdd_prod_sublissim.kit_raw` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.ga_transactions": {"database": "teamdata-291012", "schema": "inter", "name": "ga_transactions", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/ga_transactions.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/ga_transactions.sql", "unique_id": "model.warehouse.ga_transactions", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "ga_transactions"], "alias": "ga_transactions", "checksum": {"name": "sha256", "checksum": "1a95336202acc1d6f0cdb996ace7dc1339dfdf59fa6be2445f650b8675a32f81"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.4815779, "relation_name": "`teamdata-291012`.`inter`.`ga_transactions`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='ga_transactions')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='ga_transactions')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='ga_transactions')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='ga_transactions')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.ga_transactions` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.ga_transactions` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.ga_transactions` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.ga_transactions` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/ga_transactions.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.ga_transactions` t\nWHERE true\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.ga_transactions` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.ga_transactions` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.ga_transactions` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.mini_reexp": {"database": "teamdata-291012", "schema": "inter", "name": "mini_reexp", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/mini_reexp.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/mini_reexp.sql", "unique_id": "model.warehouse.mini_reexp", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "mini_reexp"], "alias": "mini_reexp", "checksum": {"name": "sha256", "checksum": "89409e25085c46b2b298d369873a6453680b481bcd92066a318deaed7e9f97d3"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.4937642, "relation_name": "`teamdata-291012`.`inter`.`mini_reexp`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_mini_reexp')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_mini_reexp')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_mini_reexp')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_mini_reexp')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_mini_reexp` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_mini_reexp` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_mini_reexp` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_mini_reexp` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/mini_reexp.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_mini_reexp` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_mini_reexp` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_mini_reexp` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_mini_reexp` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.payment_profiles": {"database": "teamdata-291012", "schema": "inter", "name": "payment_profiles", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/payment_profiles.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/payment_profiles.sql", "unique_id": "model.warehouse.payment_profiles", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "payment_profiles"], "alias": "payment_profiles", "checksum": {"name": "sha256", "checksum": "b11facd88151a4929809e6945c74bff4620de607b8a03fb06779ec834e3a5303"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.505933, "relation_name": "`teamdata-291012`.`inter`.`payment_profiles`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_payment_profiles')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_payment_profiles')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_payment_profiles')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_payment_profiles')) -%}\n\nSELECT 'FR' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_fr.wp_jb_payment_profiles` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_de.wp_jb_payment_profiles` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_es.wp_jb_payment_profiles` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_it.wp_jb_payment_profiles` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/payment_profiles.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_fr.wp_jb_payment_profiles` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_de.wp_jb_payment_profiles` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_es.wp_jb_payment_profiles` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nid,\n  alias,\n  atos_alias,\n  recurring_reference,\n  user_id,\n  payment_gateway_id,\n  SAFE_CAST(card_validity AS STRING) AS card_validity,\n  card_number,\n  last_fail_reason_id,\n  flagged_for_update,\n  created,\n  updated,\n  remember,\n  card_holder_fullname,\n  first_psp_reference\nFROM `bdd_prod_it.wp_jb_payment_profiles` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.christmas_offer": {"database": "teamdata-291012", "schema": "inter", "name": "christmas_offer", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/christmas_offer.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/christmas_offer.sql", "unique_id": "model.warehouse.christmas_offer", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "christmas_offer"], "alias": "christmas_offer", "checksum": {"name": "sha256", "checksum": "d42789364aaab43e8f880e2f74bfac07ca88e5323f3f6558417d3a2f7c508c48"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.5116339, "relation_name": "`teamdata-291012`.`inter`.`christmas_offer`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_christmas_offer')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_christmas_offer')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_christmas_offer')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_christmas_offer')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_christmas_offer` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_christmas_offer` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_christmas_offer` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_christmas_offer` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/christmas_offer.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_christmas_offer` t\nWHERE true\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_christmas_offer` t\nWHERE true\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_christmas_offer` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_christmas_offer` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.lte_kits": {"database": "teamdata-291012", "schema": "inter", "name": "lte_kits", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/lte_kits.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/lte_kits.sql", "unique_id": "model.warehouse.lte_kits", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "lte_kits"], "alias": "lte_kits", "checksum": {"name": "sha256", "checksum": "71e171325f718ef112d42a7c9632732b558fea985d39f49d46433e5fdefa26c0"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.5245209, "relation_name": "`teamdata-291012`.`inter`.`lte_kits`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_lte_kits')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_lte_kits')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_lte_kits')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_lte_kits')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_lte_kits` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_lte_kits` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_lte_kits` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_lte_kits` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/lte_kits.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_lte_kits` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_lte_kits` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_lte_kits` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_lte_kits` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.optin": {"database": "teamdata-291012", "schema": "inter", "name": "optin", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/optin.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/optin.sql", "unique_id": "model.warehouse.optin", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "optin"], "alias": "optin", "checksum": {"name": "sha256", "checksum": "55d6f0d70d8d02d3a1c8fd86f6f4c1639208f89015dbfb90d09114f75bbbb6e0"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.536866, "relation_name": "`teamdata-291012`.`inter`.`optin`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_optin')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_optin')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_optin')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_optin')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_optin` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_optin` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_optin` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_optin` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/optin.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_optin` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_optin` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_optin` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_optin` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.gift_codes_generated": {"database": "teamdata-291012", "schema": "inter", "name": "gift_codes_generated", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/gift_codes_generated.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/gift_codes_generated.sql", "unique_id": "model.warehouse.gift_codes_generated", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "gift_codes_generated"], "alias": "gift_codes_generated", "checksum": {"name": "sha256", "checksum": "b15c259f3e99918bdceaa4968a6396a478a51c494311958cd2cf4cb931a95eaa"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360, "incremental_strategy": "merge", "unique_key": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"]}, "created_at": 1759995464.549176, "relation_name": "`teamdata-291012`.`inter`.`gift_codes_generated`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_gift_codes_generated\" -%}   \n{%- set target_table = \"inter.gift_codes_generated\" -%}   \n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"]\n) }}\n\n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{# ---------- POST HOOK : uniquement si la table existe d\u00e9j\u00e0 (vrai incr\u00e9mental) ---------- #}\n{% if is_incremental() %}\n  {%- set to_delete_sql -%}\n  DELETE FROM `teamdata-291012.{{ target_table }}`\n  WHERE STRUCT(dw_country_code, id) IN (\n    {%- for country in countries -%}\n    SELECT AS STRUCT\n      '{{ country.code }}' AS dw_country_code,\n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}  -- prune SOURCE uniquement\n      AND SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ \"UNION ALL\" if not loop.last }}\n    {%- endfor -%}\n  );\n  {%- endset -%}\n  {{ config(post_hook=[ to_delete_sql ]) }}\n{% endif %}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/gift_codes_generated.sql", "compiled": true, "compiled_code": "\n\n\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_gift_codes_generated` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_gift_codes_generated` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_gift_codes_generated` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_gift_codes_generated` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.b2c_exported_orders": {"database": "teamdata-291012", "schema": "inter", "name": "b2c_exported_orders", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/b2c_exported_orders.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/b2c_exported_orders.sql", "unique_id": "model.warehouse.b2c_exported_orders", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "b2c_exported_orders"], "alias": "b2c_exported_orders", "checksum": {"name": "sha256", "checksum": "d37a94cd1275ea13a192d1840a30e9eaa1617569c14cb4c6bbc8783e275b1b7f"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.5564969, "relation_name": "`teamdata-291012`.`inter`.`b2c_exported_orders`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_b2c_exported_orders')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_b2c_exported_orders')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_b2c_exported_orders')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_b2c_exported_orders')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_b2c_exported_orders` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_b2c_exported_orders` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_b2c_exported_orders` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_b2c_exported_orders` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/b2c_exported_orders.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_b2c_exported_orders` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_b2c_exported_orders` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_b2c_exported_orders` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_b2c_exported_orders` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.comments": {"database": "teamdata-291012", "schema": "inter", "name": "comments", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/comments.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/comments.sql", "unique_id": "model.warehouse.comments", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "comments"], "alias": "comments", "checksum": {"name": "sha256", "checksum": "c558d0cbb3e51a2967e69a6e9e3c8fe665fb8b1b2140780314d59da6ea0bb213"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.569403, "relation_name": "`teamdata-291012`.`inter`.`comments`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_comments')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_comments')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_comments')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_comments')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_comments` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_comments` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_comments` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_comments` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/comments.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_comments` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_comments` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_comments` t\nWHERE true\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n \n \n \n \n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_comments` t\nWHERE true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.cc_orders_status": {"database": "teamdata-291012", "schema": "inter", "name": "cc_orders_status", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/cc_orders_status.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/cc_orders_status.sql", "unique_id": "model.warehouse.cc_orders_status", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "cc_orders_status"], "alias": "cc_orders_status", "checksum": {"name": "sha256", "checksum": "85a2afbd82b74810aa21b74f12c3f5690eb9735751f7bc907a1ba0eb0ae82acf"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.582401, "relation_name": "`teamdata-291012`.`inter`.`cc_orders_status`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_cc_orders_status')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_cc_orders_status')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_cc_orders_status')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_cc_orders_status')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/cc_orders_status.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.reward_points_history": {"database": "teamdata-291012", "schema": "inter", "name": "reward_points_history", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/reward_points_history.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/reward_points_history.sql", "unique_id": "model.warehouse.reward_points_history", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "reward_points_history"], "alias": "reward_points_history", "checksum": {"name": "sha256", "checksum": "56f3642e037bddf8832fcdca7ebb00759501e803aedf9c0adcfaee2df0054b71"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.5955951, "relation_name": "`teamdata-291012`.`inter`.`reward_points_history`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_reward_points_history')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_reward_points_history')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_reward_points_history')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_reward_points_history')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_reward_points_history` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_reward_points_history` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_reward_points_history` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_reward_points_history` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/reward_points_history.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_reward_points_history` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_reward_points_history` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_reward_points_history` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_reward_points_history` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.orders_status": {"database": "teamdata-291012", "schema": "inter", "name": "orders_status", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/materialized_views/refresh_4h/orders_status.sql", "original_file_path": "models/dwh/inter/materialized_views/refresh_4h/orders_status.sql", "unique_id": "model.warehouse.orders_status", "fqn": ["warehouse", "dwh", "inter", "materialized_views", "refresh_4h", "orders_status"], "alias": "orders_status", "checksum": {"name": "sha256", "checksum": "85a2afbd82b74810aa21b74f12c3f5690eb9735751f7bc907a1ba0eb0ae82acf"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "refresh_interval_minutes": 360, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "materialized_view", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "enable_refresh": true, "max_staleness": "INTERVAL \"0:30:0\" HOUR TO SECOND", "refresh_interval_minutes": 360}, "created_at": 1759995464.608153, "relation_name": "`teamdata-291012`.`inter`.`orders_status`", "raw_code": "{%- set fr_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_fr', identifier='wp_jb_cc_orders_status')) -%}\n{%- set de_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_de', identifier='wp_jb_cc_orders_status')) -%}\n{%- set es_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_es', identifier='wp_jb_cc_orders_status')) -%}\n{%- set it_columns = adapter.get_columns_in_relation(api.Relation.create(schema='bdd_prod_it', identifier='wp_jb_cc_orders_status')) -%}\n\nSELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in fr_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in fr_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in fr_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in fr_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in fr_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in fr_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in fr_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_fr.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in fr_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in de_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in de_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in de_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in de_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in de_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in de_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in de_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_de.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in de_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in es_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in es_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in es_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in es_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in es_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in es_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in es_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_es.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in es_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}\n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n {% if '__deleted' in it_columns | map(attribute='name') %}__deleted,{% endif %}\n {% if '__ts_ms' in it_columns | map(attribute='name') %}__ts_ms,{% endif %}\n {% if '__transaction_order' in it_columns | map(attribute='name') %}__transaction_order,{% endif %}\n {% if '__transaction_id' in it_columns | map(attribute='name') %}__transaction_id,{% endif %}\n {% if '_rivery_river_id' in it_columns | map(attribute='name') %}_rivery_river_id,{% endif %}\n {% if '_rivery_run_id' in it_columns | map(attribute='name') %}_rivery_run_id,{% endif %}\n {% if '_rivery_last_update' in it_columns | map(attribute='name') %}_rivery_last_update{% endif %}\n) \nFROM `bdd_prod_it.wp_jb_cc_orders_status` t\nWHERE {% if '__deleted' in it_columns | map(attribute='name') %}(t.__deleted is null OR t.__deleted = false) {% else %}true{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/materialized_views/refresh_4h/orders_status.sql", "compiled": true, "compiled_code": "SELECT 'FR' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_fr.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'DE' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_de.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'ES' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_es.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) \n\nUNION ALL\n\nSELECT 'IT' AS dw_country_code,\nt.* EXCEPT(\n __deleted,\n __ts_ms,\n __transaction_order,\n __transaction_id,\n _rivery_river_id,\n _rivery_run_id,\n _rivery_last_update\n) \nFROM `bdd_prod_it.wp_jb_cc_orders_status` t\nWHERE (t.__deleted is null OR t.__deleted = false) ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.live_expenses": {"database": "teamdata-291012", "schema": "marketing", "name": "live_expenses", "resource_type": "model", "package_name": "warehouse", "path": "dwh/marketing/live_expenses.sql", "original_file_path": "models/dwh/marketing/live_expenses.sql", "unique_id": "model.warehouse.live_expenses", "fqn": ["warehouse", "dwh", "marketing", "live_expenses"], "alias": "live_expenses", "checksum": {"name": "sha256", "checksum": "4dabc0616f47bc844f15b75076d6a266013b3513d59edb4d86945f4cf19fcb16"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.620644, "relation_name": "`teamdata-291012`.`marketing`.`live_expenses`", "raw_code": "WITH  \nawin_transactions AS (\n  SELECT \n    DATETIME_ADD(cr.transactiondate, INTERVAL 2 HOUR) as transaction_date, \n    REGEXP_EXTRACT(ac.accountname, r'([A-Z]{2})') as country_code,\n    REGEXP_EXTRACT(tr.orderref, r'Order(\\d+)') as order_id,\n    cr.transactionpartscommissiongroupname,\n    cr.transactionpartscommissiongroupcode,\n    CASE \n      WHEN transactionpartscommissiongroupcode = \"CALENDRIER\" THEN \"EXCLUSIVE\"\n      WHEN transactionpartscommissiongroupcode = \"DEFAULT\" THEN \"BOX\"\n      WHEN transactionpartscommissiongroupcode = \"BOX\" THEN \"BOX\"\n      WHEN transactionpartscommissiongroupcode = \"SHOP\" THEN \"SHOP\"\n      WHEN transactionpartscommissiongroupcode = \"EXCLUSIVE\" THEN \"EXCLUSIVE\"\n      WHEN transactionpartscommissiongroupcode IS NULL THEN \"BOX\" -- for special operations not in clickref\n      ELSE \"BOX\" -- default is Box\n    END as group_code,\n    CASE\n      WHEN REGEXP_EXTRACT(ac.accountname, r'([A-Z]{2})') = \"FR\" THEN 1.18\n      WHEN REGEXP_EXTRACT(ac.accountname, r'([A-Z]{2})') = \"DE\" THEN 1.30\n      ELSE 1.18\n    END as markup,\n    cr.transactionpartscommissionamount,\n    cr.transactionpartsamount,\n    tr.commissionamount,\n    CASE \n      WHEN cr.transactionpartscommissiongroupname IS NULL THEN tr.commissionamount\n      ELSE cr.transactionpartscommissionamount\n    END as commission\n  FROM `teamdata-291012.pipe.awin_combined_transactions` tr \n  LEFT JOIN `teamdata-291012.pipe.awin_combined_clickrefs` cr ON cr.id = tr.id\n  JOIN `teamdata-291012.pipe.awin_accounts` as ac ON ac.accountid = tr.advertiserid\n  ORDER BY cr.transactiondate DESC\n),\ncd  AS\n(\nSELECT cd.country, cd.campaign_name, MAX(cd.levier) AS levier, case when MAX(cd.cat1)  ='R\u00e9seaux Sociaux' then 'RESEAUX SOCIAUX' else upper(MAX(cd.cat1)) end AS cat1, MAX(cd.cat2) AS cat2, MAX(cd.cat3) AS cat3 \n  FROM `marketing.campaign_details` cd where campaign_name not like '%_old%'\n  GROUP BY cd.country, cd.campaign_name \n)\n\n\n-- META marketing OPEX\n\nSELECT DATE(dma.date_start) as d, dma.campaign_name AS campaign_name,'FR' AS country,\nSUM(dma.impressions) AS impression,\nSUM(dma.clicks) AS clic,\nSUM(dma.spend) AS spent,\nCOALESCE(cd.levier,'FACEBOOK / INSTAGRAM') AS levier,\nCOALESCE(cd.cat1,'RESEAUX SOCIAUX') AS cat1,\nCOALESCE(cd.cat2, \n  CASE WHEN dma.campaign_name LIKE '%BOX%' THEN 'BOX'\n       WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n       WHEN dma.campaign_name LIKE '%SHOP%' THEN 'SHOP' ELSE NULL END) AS cat2,\nCOALESCE(cd.cat3, \nCASE WHEN dma.campaign_name LIKE '%RTG%' THEN 'RTG'\n     WHEN dma.campaign_name LIKE '%BOX%' THEN 'ACQUIS'\n     WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n     WHEN dma.campaign_name LIKE '%SHOP%' THEN 'ACQUIS' ELSE NULL END) AS cat3\nFROM  `teamdata-291012.fb_fr.ads_insights` dma \nLEFT JOIN cd ON cd.campaign_name = dma.campaign_name AND cd.country = 'FR'\nGROUP BY d, dma.campaign_name,cd.levier,cd.cat1,cd.cat2,cd.cat3\nHAVING impression > 0 OR clic > 0 OR spent > 0\n\nUNION ALL\n\nSELECT DATE(dma.date_start) as d, dma.campaign_name,'ES',\nSUM(dma.impressions) AS impression,\nSUM(dma.clicks) AS clic,\nSUM(dma.spend) AS spent,\nCOALESCE(cd.levier,'FACEBOOK / INSTAGRAM') AS levier,\nCOALESCE(cd.cat1,'RESEAUX SOCIAUX') AS cat1,\nCOALESCE(cd.cat2, \n  CASE WHEN dma.campaign_name LIKE '%BOX%' THEN 'BOX'\n       WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n       WHEN dma.campaign_name LIKE '%SHOP%' THEN 'SHOP' ELSE 'BOX' END) AS cat2,\nCOALESCE(cd.cat3, \nCASE WHEN dma.campaign_name LIKE '%RTG%' THEN 'RTG'\n     WHEN dma.campaign_name LIKE '%BOX%' THEN 'ACQUIS'\n     WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n     WHEN dma.campaign_name LIKE '%SHOP%' THEN 'ACQUIS' ELSE 'ACQUIS' END) AS cat3\nFROM  `teamdata-291012.fb_es.ads_insights` dma \ninner JOIN  cd ON cd.campaign_name = dma.campaign_name AND cd.country = 'ES'\nGROUP BY d, dma.campaign_name,cd.levier,cd.cat1,cd.cat2,cd.cat3\nHAVING impression > 0 OR clic > 0 OR spent > 0\n\nUNION ALL\n\nSELECT DATE(dma.date_start) as d, dma.campaign_name,'DE',\nSUM(dma.impressions) AS impression,\nSUM(dma.clicks) AS clic,\nSUM(dma.spend) AS spent,\nCOALESCE(cd.levier,'FACEBOOK / INSTAGRAM') AS levier,\nCOALESCE(cd.cat1,'RESEAUX SOCIAUX') AS cat1,\nCOALESCE(cd.cat2, \n  CASE WHEN dma.campaign_name LIKE '%BOX%' THEN 'BOX'\n       WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n       WHEN dma.campaign_name LIKE '%SHOP%' THEN 'SHOP' ELSE 'BOX' END) AS cat2,\nCOALESCE(cd.cat3, \nCASE WHEN dma.campaign_name LIKE '%RTG%' THEN 'RTG'\n     WHEN dma.campaign_name LIKE '%BOX%' THEN 'ACQUIS'\n     WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n     WHEN dma.campaign_name LIKE '%SHOP%' THEN 'ACQUIS' ELSE 'ACQUIS' END) AS cat3\nFROM  `teamdata-291012.fb_de_eu.ads_insights` dma \ninner JOIN  cd ON cd.campaign_name = dma.campaign_name AND cd.country = 'DE'\nGROUP BY d, dma.campaign_name,cd.levier,cd.cat1,cd.cat2,cd.cat3\nHAVING impression > 0 OR clic > 0 OR spent > 0\n\nUNION ALL\n\n-- Marketing OPEX - Awin \nSELECT \n  \n   DATE(transaction_date) AS d,\n  concat('AWIN ', group_code) AS campaign_name,\n  country_code,\n  NULL AS impression,\n  NULL AS clic,\n  ROUND(SUM(commission * markup),4) as spent,\n  concat('AWIN ', group_code) AS levier,\n  'AFFILIATION' as cat1,\n  group_code  as cat2,\n  'ACQUIS' as cat3 \nFROM awin_transactions\nWHERE commission * markup > 0\nGROUP BY d, country_code, levier, cat1, cat2, cat3\n\nUNION ALL\n\n\n-- google ads expenses\nSELECT\ncs.segments_date as d,\nc.Campaign_Name AS campaign_name,\n  COALESCE(REGEXP_EXTRACT(cu.customer_descriptive_name, r'Blissim (\\w+)'),cu.customer_descriptive_name) AS country,\n  SUM(cs.metrics_impressions) AS impressions,\n  SUM(cs.metrics_clicks) AS clics,\n  (SUM(cs.metrics_cost_micros) / 1000000) AS spent,\n  'Google',\n  cd.cat1,\n  cd.cat2,\n  cd.cat3\n  \nFROM (\n  SELECT customer_id, campaign_id,\n  case when campaign_id in (97499006,20677581094,21088391199,17854460874) then min( campaign_name) \n  else max( campaign_name) end as campaign_name \n  FROM googleads.p_ads_Campaign_3790578098\n  GROUP BY campaign_id, customer_id\n    ) c\nJOIN (\n  SELECT cu.customer_id, cu.customer_descriptive_name \n  FROM `googleads.p_ads_Customer_3790578098` cu \n  GROUP BY cu.customer_id, cu.customer_descriptive_name\n  ) cu ON cu.customer_id = c.customer_id\nLEFT JOIN `googleads.p_ads_CampaignBasicStats_3790578098` cs ON c.Campaign_id = cs.Campaign_id\nINNER JOIN  cd ON cd.campaign_name = c.campaign_name\nWHERE cs.metrics_cost_micros > 0\nAND cu.customer_descriptive_name LIKE '%Blissim%'\nGROUP BY cs.segments_date,c.Campaign_Name, country, cd.cat1, cd.cat2, cd.cat3, cs.campaign_id\n\nUNION ALL\n\n-- TikTok Live Expenses\nSELECT DATE(ad.stat_time_day) AS d, ad.campaign_name, LEFT(TRIM(ad.campaign_name), 2) AS country, SUM(ad.impressions) AS impressions, SUM(ad.clicks) AS clicks, SUM(ad.spend) AS spent,\nCOALESCE(cd.levier,'TIKTOK') AS levier, COALESCE(cd.cat1,  'RESEAUX SOCIAUX') AS cat1, COALESCE(cd.cat2,'BOX') AS cat2, COALESCE(cd.cat3,'ACQUIS') AS cat3\nFROM `tik_tok.ad_insights` ad\nLEFT JOIN cd ON cd.country = LEFT(TRIM(ad.campaign_name), 2) AND cd.campaign_name = ad.campaign_name\nGROUP BY ad.stat_time_day, DATE(ad.stat_time_day) , ad.campaign_name, cd.levier, cd.cat1, cd.cat2, cd.cat3\n\n\n\nUNION ALL\n\n-- Snapchat Live Expenses\n\nSELECT DATE(asd.start_time) AS d ,'FR - SNAP - BOX - RETARGETING'AS campaign_name,case when id='2b45026e-25fe-4948-b594-db0bb563b04e' then 'FR' when id='d3f9a490-7a93-4aa8-814c-8b3ad8f81898' then 'DE' end AS country,0 AS impressions,0  AS clicks ,\nSUM(asd.spend/1000000) AS spent,\n'SNAPCHAT' AS levier, 'RESEAUX SOCIAUX' AS cat1, 'BOX' AS cat2, 'ACQUIS'AS cat3\nFROM `teamdata-291012.snapchat.ad_account_stats_daily` asd\ngroup by 1,2,3,4,5\n\n  /*SELECT DATE(csd.start_time) AS d, c.name AS campaign_name, LEFT(TRIM(c.name), 2) AS country, SUM(csd.impressions) AS impressions, SUM(csd.conversion_ad_click) AS clicks,   SUM(csd.spend/1000000) AS spent, \nCOALESCE(cd.levier,'SNAPCHAT') AS levier, COALESCE(cd.cat1,  'RESEAUX SOCIAUX') AS cat1, COALESCE(cd.cat2,'BOX') AS cat2, COALESCE(cd.cat3,'ACQUIS') AS cat3\nFROM `snapchat.campaign_stats_daily` csd\nJOIN `snapchat.campaigns` c ON c.id = csd.id\nLEFT JOIN cd ON cd.country = LEFT(TRIM(c.name), 2) AND cd.campaign_name = c.name\nWHERE csd.spend > 0\nGROUP BY c.name, d, c.name, cd.levier, cd.cat1, cd.cat2, cd.cat3*/\n\n  \n\nORDER BY d", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/marketing/live_expenses.sql", "compiled": true, "compiled_code": "WITH  \nawin_transactions AS (\n  SELECT \n    DATETIME_ADD(cr.transactiondate, INTERVAL 2 HOUR) as transaction_date, \n    REGEXP_EXTRACT(ac.accountname, r'([A-Z]{2})') as country_code,\n    REGEXP_EXTRACT(tr.orderref, r'Order(\\d+)') as order_id,\n    cr.transactionpartscommissiongroupname,\n    cr.transactionpartscommissiongroupcode,\n    CASE \n      WHEN transactionpartscommissiongroupcode = \"CALENDRIER\" THEN \"EXCLUSIVE\"\n      WHEN transactionpartscommissiongroupcode = \"DEFAULT\" THEN \"BOX\"\n      WHEN transactionpartscommissiongroupcode = \"BOX\" THEN \"BOX\"\n      WHEN transactionpartscommissiongroupcode = \"SHOP\" THEN \"SHOP\"\n      WHEN transactionpartscommissiongroupcode = \"EXCLUSIVE\" THEN \"EXCLUSIVE\"\n      WHEN transactionpartscommissiongroupcode IS NULL THEN \"BOX\" -- for special operations not in clickref\n      ELSE \"BOX\" -- default is Box\n    END as group_code,\n    CASE\n      WHEN REGEXP_EXTRACT(ac.accountname, r'([A-Z]{2})') = \"FR\" THEN 1.18\n      WHEN REGEXP_EXTRACT(ac.accountname, r'([A-Z]{2})') = \"DE\" THEN 1.30\n      ELSE 1.18\n    END as markup,\n    cr.transactionpartscommissionamount,\n    cr.transactionpartsamount,\n    tr.commissionamount,\n    CASE \n      WHEN cr.transactionpartscommissiongroupname IS NULL THEN tr.commissionamount\n      ELSE cr.transactionpartscommissionamount\n    END as commission\n  FROM `teamdata-291012.pipe.awin_combined_transactions` tr \n  LEFT JOIN `teamdata-291012.pipe.awin_combined_clickrefs` cr ON cr.id = tr.id\n  JOIN `teamdata-291012.pipe.awin_accounts` as ac ON ac.accountid = tr.advertiserid\n  ORDER BY cr.transactiondate DESC\n),\ncd  AS\n(\nSELECT cd.country, cd.campaign_name, MAX(cd.levier) AS levier, case when MAX(cd.cat1)  ='R\u00e9seaux Sociaux' then 'RESEAUX SOCIAUX' else upper(MAX(cd.cat1)) end AS cat1, MAX(cd.cat2) AS cat2, MAX(cd.cat3) AS cat3 \n  FROM `marketing.campaign_details` cd where campaign_name not like '%_old%'\n  GROUP BY cd.country, cd.campaign_name \n)\n\n\n-- META marketing OPEX\n\nSELECT DATE(dma.date_start) as d, dma.campaign_name AS campaign_name,'FR' AS country,\nSUM(dma.impressions) AS impression,\nSUM(dma.clicks) AS clic,\nSUM(dma.spend) AS spent,\nCOALESCE(cd.levier,'FACEBOOK / INSTAGRAM') AS levier,\nCOALESCE(cd.cat1,'RESEAUX SOCIAUX') AS cat1,\nCOALESCE(cd.cat2, \n  CASE WHEN dma.campaign_name LIKE '%BOX%' THEN 'BOX'\n       WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n       WHEN dma.campaign_name LIKE '%SHOP%' THEN 'SHOP' ELSE NULL END) AS cat2,\nCOALESCE(cd.cat3, \nCASE WHEN dma.campaign_name LIKE '%RTG%' THEN 'RTG'\n     WHEN dma.campaign_name LIKE '%BOX%' THEN 'ACQUIS'\n     WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n     WHEN dma.campaign_name LIKE '%SHOP%' THEN 'ACQUIS' ELSE NULL END) AS cat3\nFROM  `teamdata-291012.fb_fr.ads_insights` dma \nLEFT JOIN cd ON cd.campaign_name = dma.campaign_name AND cd.country = 'FR'\nGROUP BY d, dma.campaign_name,cd.levier,cd.cat1,cd.cat2,cd.cat3\nHAVING impression > 0 OR clic > 0 OR spent > 0\n\nUNION ALL\n\nSELECT DATE(dma.date_start) as d, dma.campaign_name,'ES',\nSUM(dma.impressions) AS impression,\nSUM(dma.clicks) AS clic,\nSUM(dma.spend) AS spent,\nCOALESCE(cd.levier,'FACEBOOK / INSTAGRAM') AS levier,\nCOALESCE(cd.cat1,'RESEAUX SOCIAUX') AS cat1,\nCOALESCE(cd.cat2, \n  CASE WHEN dma.campaign_name LIKE '%BOX%' THEN 'BOX'\n       WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n       WHEN dma.campaign_name LIKE '%SHOP%' THEN 'SHOP' ELSE 'BOX' END) AS cat2,\nCOALESCE(cd.cat3, \nCASE WHEN dma.campaign_name LIKE '%RTG%' THEN 'RTG'\n     WHEN dma.campaign_name LIKE '%BOX%' THEN 'ACQUIS'\n     WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n     WHEN dma.campaign_name LIKE '%SHOP%' THEN 'ACQUIS' ELSE 'ACQUIS' END) AS cat3\nFROM  `teamdata-291012.fb_es.ads_insights` dma \ninner JOIN  cd ON cd.campaign_name = dma.campaign_name AND cd.country = 'ES'\nGROUP BY d, dma.campaign_name,cd.levier,cd.cat1,cd.cat2,cd.cat3\nHAVING impression > 0 OR clic > 0 OR spent > 0\n\nUNION ALL\n\nSELECT DATE(dma.date_start) as d, dma.campaign_name,'DE',\nSUM(dma.impressions) AS impression,\nSUM(dma.clicks) AS clic,\nSUM(dma.spend) AS spent,\nCOALESCE(cd.levier,'FACEBOOK / INSTAGRAM') AS levier,\nCOALESCE(cd.cat1,'RESEAUX SOCIAUX') AS cat1,\nCOALESCE(cd.cat2, \n  CASE WHEN dma.campaign_name LIKE '%BOX%' THEN 'BOX'\n       WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n       WHEN dma.campaign_name LIKE '%SHOP%' THEN 'SHOP' ELSE 'BOX' END) AS cat2,\nCOALESCE(cd.cat3, \nCASE WHEN dma.campaign_name LIKE '%RTG%' THEN 'RTG'\n     WHEN dma.campaign_name LIKE '%BOX%' THEN 'ACQUIS'\n     WHEN dma.campaign_name LIKE '%BRANDING%' THEN 'BRANDING'\n     WHEN dma.campaign_name LIKE '%SHOP%' THEN 'ACQUIS' ELSE 'ACQUIS' END) AS cat3\nFROM  `teamdata-291012.fb_de_eu.ads_insights` dma \ninner JOIN  cd ON cd.campaign_name = dma.campaign_name AND cd.country = 'DE'\nGROUP BY d, dma.campaign_name,cd.levier,cd.cat1,cd.cat2,cd.cat3\nHAVING impression > 0 OR clic > 0 OR spent > 0\n\nUNION ALL\n\n-- Marketing OPEX - Awin \nSELECT \n  \n   DATE(transaction_date) AS d,\n  concat('AWIN ', group_code) AS campaign_name,\n  country_code,\n  NULL AS impression,\n  NULL AS clic,\n  ROUND(SUM(commission * markup),4) as spent,\n  concat('AWIN ', group_code) AS levier,\n  'AFFILIATION' as cat1,\n  group_code  as cat2,\n  'ACQUIS' as cat3 \nFROM awin_transactions\nWHERE commission * markup > 0\nGROUP BY d, country_code, levier, cat1, cat2, cat3\n\nUNION ALL\n\n\n-- google ads expenses\nSELECT\ncs.segments_date as d,\nc.Campaign_Name AS campaign_name,\n  COALESCE(REGEXP_EXTRACT(cu.customer_descriptive_name, r'Blissim (\\w+)'),cu.customer_descriptive_name) AS country,\n  SUM(cs.metrics_impressions) AS impressions,\n  SUM(cs.metrics_clicks) AS clics,\n  (SUM(cs.metrics_cost_micros) / 1000000) AS spent,\n  'Google',\n  cd.cat1,\n  cd.cat2,\n  cd.cat3\n  \nFROM (\n  SELECT customer_id, campaign_id,\n  case when campaign_id in (97499006,20677581094,21088391199,17854460874) then min( campaign_name) \n  else max( campaign_name) end as campaign_name \n  FROM googleads.p_ads_Campaign_3790578098\n  GROUP BY campaign_id, customer_id\n    ) c\nJOIN (\n  SELECT cu.customer_id, cu.customer_descriptive_name \n  FROM `googleads.p_ads_Customer_3790578098` cu \n  GROUP BY cu.customer_id, cu.customer_descriptive_name\n  ) cu ON cu.customer_id = c.customer_id\nLEFT JOIN `googleads.p_ads_CampaignBasicStats_3790578098` cs ON c.Campaign_id = cs.Campaign_id\nINNER JOIN  cd ON cd.campaign_name = c.campaign_name\nWHERE cs.metrics_cost_micros > 0\nAND cu.customer_descriptive_name LIKE '%Blissim%'\nGROUP BY cs.segments_date,c.Campaign_Name, country, cd.cat1, cd.cat2, cd.cat3, cs.campaign_id\n\nUNION ALL\n\n-- TikTok Live Expenses\nSELECT DATE(ad.stat_time_day) AS d, ad.campaign_name, LEFT(TRIM(ad.campaign_name), 2) AS country, SUM(ad.impressions) AS impressions, SUM(ad.clicks) AS clicks, SUM(ad.spend) AS spent,\nCOALESCE(cd.levier,'TIKTOK') AS levier, COALESCE(cd.cat1,  'RESEAUX SOCIAUX') AS cat1, COALESCE(cd.cat2,'BOX') AS cat2, COALESCE(cd.cat3,'ACQUIS') AS cat3\nFROM `tik_tok.ad_insights` ad\nLEFT JOIN cd ON cd.country = LEFT(TRIM(ad.campaign_name), 2) AND cd.campaign_name = ad.campaign_name\nGROUP BY ad.stat_time_day, DATE(ad.stat_time_day) , ad.campaign_name, cd.levier, cd.cat1, cd.cat2, cd.cat3\n\n\n\nUNION ALL\n\n-- Snapchat Live Expenses\n\nSELECT DATE(asd.start_time) AS d ,'FR - SNAP - BOX - RETARGETING'AS campaign_name,case when id='2b45026e-25fe-4948-b594-db0bb563b04e' then 'FR' when id='d3f9a490-7a93-4aa8-814c-8b3ad8f81898' then 'DE' end AS country,0 AS impressions,0  AS clicks ,\nSUM(asd.spend/1000000) AS spent,\n'SNAPCHAT' AS levier, 'RESEAUX SOCIAUX' AS cat1, 'BOX' AS cat2, 'ACQUIS'AS cat3\nFROM `teamdata-291012.snapchat.ad_account_stats_daily` asd\ngroup by 1,2,3,4,5\n\n  /*SELECT DATE(csd.start_time) AS d, c.name AS campaign_name, LEFT(TRIM(c.name), 2) AS country, SUM(csd.impressions) AS impressions, SUM(csd.conversion_ad_click) AS clicks,   SUM(csd.spend/1000000) AS spent, \nCOALESCE(cd.levier,'SNAPCHAT') AS levier, COALESCE(cd.cat1,  'RESEAUX SOCIAUX') AS cat1, COALESCE(cd.cat2,'BOX') AS cat2, COALESCE(cd.cat3,'ACQUIS') AS cat3\nFROM `snapchat.campaign_stats_daily` csd\nJOIN `snapchat.campaigns` c ON c.id = csd.id\nLEFT JOIN cd ON cd.country = LEFT(TRIM(c.name), 2) AND cd.campaign_name = c.name\nWHERE csd.spend > 0\nGROUP BY c.name, d, c.name, cd.levier, cd.cat1, cd.cat2, cd.cat3*/\n\n  \n\nORDER BY d", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shipping_costs": {"database": "teamdata-291012", "schema": "ops", "name": "shipping_costs", "resource_type": "model", "package_name": "warehouse", "path": "dwh/ops/shipping_costs.sql", "original_file_path": "models/dwh/ops/shipping_costs.sql", "unique_id": "model.warehouse.shipping_costs", "fqn": ["warehouse", "dwh", "ops", "shipping_costs"], "alias": "shipping_costs", "checksum": {"name": "sha256", "checksum": "6ad9d411138685d7c1b2a26f9046155a7c8b876954bbd9d113dc7fbf60d4abc1"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.622011, "relation_name": "`teamdata-291012`.`ops`.`shipping_costs`", "raw_code": "WITH base_data AS (\n  SELECT shipping_mode_id, price_ht AS price, min_weight, max_weight, date_start, price_daily_ht AS price_daily, shipping_taxes_rate\n  FROM `update_table.shipping_costs`\n  WHERE shipping_mode_id IS NOT NULL\n),\nall_shipping_date_prices AS (\n  SELECT shipping_mode_id, date_start, max(shipping_taxes_rate) AS shipping_taxes_rate\n  FROM base_data\n  GROUP BY shipping_mode_id, date_start\n),\ndate_end_table AS (\n  SELECT shipping_mode_id,\n         date_start,\n         DATE_SUB(LEAD(date_start) OVER (PARTITION BY shipping_mode_id ORDER BY date_start), INTERVAL 1 DAY) AS date_end,\n         shipping_taxes_rate\n  FROM all_shipping_date_prices\n)\n\nSELECT bd.shipping_mode_id, max(bd.price) price, bd.min_weight, bd.max_weight, max(bd.price_daily) price_daily,  bd.date_start,\ndet.date_end, max(COALESCE(det.shipping_taxes_rate,lc.price)) AS shipping_taxes_rate\nFROM base_data bd\nLEFT JOIN date_end_table det USING(shipping_mode_id, date_start)\nLEFT JOIN {{ ref('logistics_costs') }} lc ON lc.name = 'shipping_taxes_rate' AND lc.date_start<= bd.date_start AND (lc.date_end >= bd.date_start OR lc.date_end IS NULL)\ngroup by all", "language": "sql", "refs": [{"name": "logistics_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.logistics_costs"]}, "compiled_path": "target/compiled/warehouse/models/dwh/ops/shipping_costs.sql", "compiled": true, "compiled_code": "WITH base_data AS (\n  SELECT shipping_mode_id, price_ht AS price, min_weight, max_weight, date_start, price_daily_ht AS price_daily, shipping_taxes_rate\n  FROM `update_table.shipping_costs`\n  WHERE shipping_mode_id IS NOT NULL\n),\nall_shipping_date_prices AS (\n  SELECT shipping_mode_id, date_start, max(shipping_taxes_rate) AS shipping_taxes_rate\n  FROM base_data\n  GROUP BY shipping_mode_id, date_start\n),\ndate_end_table AS (\n  SELECT shipping_mode_id,\n         date_start,\n         DATE_SUB(LEAD(date_start) OVER (PARTITION BY shipping_mode_id ORDER BY date_start), INTERVAL 1 DAY) AS date_end,\n         shipping_taxes_rate\n  FROM all_shipping_date_prices\n)\n\nSELECT bd.shipping_mode_id, max(bd.price) price, bd.min_weight, bd.max_weight, max(bd.price_daily) price_daily,  bd.date_start,\ndet.date_end, max(COALESCE(det.shipping_taxes_rate,lc.price)) AS shipping_taxes_rate\nFROM base_data bd\nLEFT JOIN date_end_table det USING(shipping_mode_id, date_start)\nLEFT JOIN `teamdata-291012`.`ops`.`logistics_costs` lc ON lc.name = 'shipping_taxes_rate' AND lc.date_start<= bd.date_start AND (lc.date_end >= bd.date_start OR lc.date_end IS NULL)\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.logistics_costs": {"database": "teamdata-291012", "schema": "ops", "name": "logistics_costs", "resource_type": "model", "package_name": "warehouse", "path": "dwh/ops/logistics_costs.sql", "original_file_path": "models/dwh/ops/logistics_costs.sql", "unique_id": "model.warehouse.logistics_costs", "fqn": ["warehouse", "dwh", "ops", "logistics_costs"], "alias": "logistics_costs", "checksum": {"name": "sha256", "checksum": "a4004f9b5e3c5da77044c1c0f9f402018343b0edf8fda3e7774d411c10f48ca6"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.6233, "relation_name": "`teamdata-291012`.`ops`.`logistics_costs`", "raw_code": "SELECT name, price,\n       date_start,\n       DATE_SUB(LEAD(date_start) OVER (PARTITION BY name ORDER BY date_start), INTERVAL 1 DAY) AS date_end\nFROM `update_table.logistics_costs`\nWHERE name IS NOT NULL", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/ops/logistics_costs.sql", "compiled": true, "compiled_code": "SELECT name, price,\n       date_start,\n       DATE_SUB(LEAD(date_start) OVER (PARTITION BY name ORDER BY date_start), INTERVAL 1 DAY) AS date_end\nFROM `update_table.logistics_costs`\nWHERE name IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.monthly_rank_brands": {"database": "teamdata-291012", "schema": "blissim_analytics", "name": "monthly_rank_brands", "resource_type": "model", "package_name": "warehouse", "path": "dwh/blissim_analytics/monthly_rank_brands.sql", "original_file_path": "models/dwh/blissim_analytics/monthly_rank_brands.sql", "unique_id": "model.warehouse.monthly_rank_brands", "fqn": ["warehouse", "dwh", "blissim_analytics", "monthly_rank_brands"], "alias": "monthly_rank_brands", "checksum": {"name": "sha256", "checksum": "cd29f31f20316fb09664146cd7d95f0fd314921e3e172d8eee179011ba385539"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.624615, "relation_name": "`teamdata-291012`.`blissim_analytics`.`monthly_rank_brands`", "raw_code": "WITH eligible_planning_categories AS (\n  SELECT * EXCEPT(ratio_sell_out)\n  FROM (\n    SELECT brand_id,\n           planning_category_1,\n           SAFE_DIVIDE(sell_out, SUM(sell_out) OVER (PARTITION BY brand_id)) AS ratio_sell_out\n    FROM (\n      SELECT brand_id,\n             planning_category_1,\n             SUM(sell_out) AS sell_out\n      FROM {{ ref('shop_sales') }} ss\n      INNER JOIN {{ ref('products') }} p ON ss.dw_country_code = p.dw_country_code AND ss.product_id = p.id\n      WHERE planning_category_1 IS NOT NULL\n      AND ss.order_date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n      AND ss.order_status = 'Valid\u00e9e'\n      GROUP BY brand_id, planning_category_1\n    )\n  )\n  WHERE ratio_sell_out >= 0.05\n),\ncompetitor_brands AS (\n  SELECT DISTINCT t1.brand_id AS brand_id_1, t2.brand_id AS brand_id_2\n  FROM eligible_planning_categories t1\n  INNER JOIN eligible_planning_categories t2 USING(planning_category_1)\n),\nsell_out_by_brand_date AS (\n  SELECT brand_id,\n         DATE_TRUNC(order_date, MONTH) AS date,\n         SUM(sell_out) AS sell_out\n  FROM {{ ref('shop_sales') }} ss\n  INNER JOIN {{ ref('products') }} p ON ss.dw_country_code = p.dw_country_code AND ss.product_id = p.id\n  INNER JOIN eligible_planning_categories epc USING(brand_id, planning_category_1)\n  WHERE planning_category_1 IS NOT NULL\n  AND ss.order_date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n  AND ss.order_status = 'Valid\u00e9e'\n  GROUP BY brand_id, date\n)\nSELECT * EXCEPT(brand_comp)\nFROM (\n  SELECT date, brand_id, brand_comp, ROW_NUMBER() OVER (PARTITION BY date, brand_id ORDER BY sell_out_comp DESC) AS rang\n  FROM (\n    SELECT t1.brand_id, t1.date, t2.brand_id AS brand_comp, t2.sell_out AS sell_out_comp\n    FROM sell_out_by_brand_date t1\n    INNER JOIN competitor_brands cb ON t1.brand_id = cb.brand_id_1\n    INNER JOIN sell_out_by_brand_date t2 ON t1.date = t2.date AND t2.brand_id = cb.brand_id_2\n  )\n)\nWHERE brand_id = brand_comp", "language": "sql", "refs": [{"name": "shop_sales", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.shop_sales", "model.warehouse.products"]}, "compiled_path": "target/compiled/warehouse/models/dwh/blissim_analytics/monthly_rank_brands.sql", "compiled": true, "compiled_code": "WITH eligible_planning_categories AS (\n  SELECT * EXCEPT(ratio_sell_out)\n  FROM (\n    SELECT brand_id,\n           planning_category_1,\n           SAFE_DIVIDE(sell_out, SUM(sell_out) OVER (PARTITION BY brand_id)) AS ratio_sell_out\n    FROM (\n      SELECT brand_id,\n             planning_category_1,\n             SUM(sell_out) AS sell_out\n      FROM `teamdata-291012`.`sales`.`shop_sales` ss\n      INNER JOIN `teamdata-291012`.`inter`.`products` p ON ss.dw_country_code = p.dw_country_code AND ss.product_id = p.id\n      WHERE planning_category_1 IS NOT NULL\n      AND ss.order_date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n      AND ss.order_status = 'Valid\u00e9e'\n      GROUP BY brand_id, planning_category_1\n    )\n  )\n  WHERE ratio_sell_out >= 0.05\n),\ncompetitor_brands AS (\n  SELECT DISTINCT t1.brand_id AS brand_id_1, t2.brand_id AS brand_id_2\n  FROM eligible_planning_categories t1\n  INNER JOIN eligible_planning_categories t2 USING(planning_category_1)\n),\nsell_out_by_brand_date AS (\n  SELECT brand_id,\n         DATE_TRUNC(order_date, MONTH) AS date,\n         SUM(sell_out) AS sell_out\n  FROM `teamdata-291012`.`sales`.`shop_sales` ss\n  INNER JOIN `teamdata-291012`.`inter`.`products` p ON ss.dw_country_code = p.dw_country_code AND ss.product_id = p.id\n  INNER JOIN eligible_planning_categories epc USING(brand_id, planning_category_1)\n  WHERE planning_category_1 IS NOT NULL\n  AND ss.order_date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n  AND ss.order_status = 'Valid\u00e9e'\n  GROUP BY brand_id, date\n)\nSELECT * EXCEPT(brand_comp)\nFROM (\n  SELECT date, brand_id, brand_comp, ROW_NUMBER() OVER (PARTITION BY date, brand_id ORDER BY sell_out_comp DESC) AS rang\n  FROM (\n    SELECT t1.brand_id, t1.date, t2.brand_id AS brand_comp, t2.sell_out AS sell_out_comp\n    FROM sell_out_by_brand_date t1\n    INNER JOIN competitor_brands cb ON t1.brand_id = cb.brand_id_1\n    INNER JOIN sell_out_by_brand_date t2 ON t1.date = t2.date AND t2.brand_id = cb.brand_id_2\n  )\n)\nWHERE brand_id = brand_comp", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_choose": {"database": "teamdata-291012", "schema": "allocation", "name": "box_choose", "resource_type": "model", "package_name": "warehouse", "path": "dwh/allocation/box_choose.sql", "original_file_path": "models/dwh/allocation/box_choose.sql", "unique_id": "model.warehouse.box_choose", "fqn": ["warehouse", "dwh", "allocation", "box_choose"], "alias": "box_choose", "checksum": {"name": "sha256", "checksum": "ea198c41a1a95130fde0457c68bce3a52db778e94ef5d89ccd36f53a8a7d5ae5"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.6261928, "relation_name": "`teamdata-291012`.`allocation`.`box_choose`", "raw_code": "SELECT\n  bs.dw_country_code AS dw_country_code ,\n  bs.box_id,\n  b.date,\n  bs.year,  \n  bs.month,\n  COALESCE(ch.choice_name, 'no choice') AS choice,\n bs.user_id, bs.sub_id,\n -- STATUT SUB\n bs.acquis_status_lvl1,\n  bs.acquis_status_lvl2,\n   -- INFOS CHOOSE\n   cf.name as form_name,\n   ch.choice_date,\n  CASE WHEN MAX(ch.user_id) IS NOT NULL THEN 1 ELSE 0 END AS choose,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 0 THEN 1 ELSE NULL END as choose_live_1st_day,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 1 THEN 1 ELSE NULL END as choose_live_2nd_day,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 2 THEN 1 ELSE NULL END as choose_live_3rd_day,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 3 THEN 1 ELSE NULL END as choose_live_4th_day,\n  b.nme_start_date,\nb.nme_end_date\n  FROM {{ ref('box_sales') }} as bs\n -- JOIN inter.orders o ON o.id = bs.order_id AND o.dw_country_code = bs.dw_country_code\n -- JOIN inter.order_detail_sub s ON s.id = bs.sub_id AND s.dw_country_code = bs.dw_country_code\n  JOIN {{ ref('boxes') }} b ON b.id = bs.box_id AND b.dw_country_code = bs.dw_country_code\n  LEFT JOIN  {{ ref('choose_forms') }} cf ON cf.box_id = b.id and cf.dw_country_code = b.dw_country_code\n  LEFT JOIN\n  (\n    SELECT user_id, box_id, cc.choice_name, cu.dw_country_code, cu.status_id, cu.created_at as choice_date, cf.name as form_name\n    FROM {{ ref('choose_users') }} cu\n    JOIN {{ ref('choose_forms') }} cf ON cf.id = cu.form_id AND cf.dw_country_code = cu.dw_country_code\n    JOIN {{ ref('choose_choices') }} cc ON cc.id = cu.choice_id AND cc.dw_country_code = cu.dw_country_code\n\n    GROUP BY user_id, box_id, cc.choice_name, cu.dw_country_code, cu.status_id, cu.created_at, cf.name\n  ) ch ON ch.user_id = bs.user_id AND ch.box_id = bs.box_id AND ch.dw_country_code = bs.dw_country_code AND ch.status_id IN ( 1,2)\n  -- WHERE bs.year = 2024 AND bs.month =6 AND bs.dw_country_code=\"FR\"\n  GROUP BY bs.box_id, bs.year, bs.month,b.date, ch.choice_name, bs.dw_country_code, bs.user_id, ch.choice_date,  b.nme_start_date, b.nme_end_date,cf.name,  bs.acquis_status_lvl1, bs.sub_id,\n  bs.acquis_status_lvl2", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "choose_forms", "package": null, "version": null}, {"name": "choose_users", "package": null, "version": null}, {"name": "choose_forms", "package": null, "version": null}, {"name": "choose_choices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_sales", "model.warehouse.boxes", "model.warehouse.choose_forms", "model.warehouse.choose_users", "model.warehouse.choose_choices"]}, "compiled_path": "target/compiled/warehouse/models/dwh/allocation/box_choose.sql", "compiled": true, "compiled_code": "SELECT\n  bs.dw_country_code AS dw_country_code ,\n  bs.box_id,\n  b.date,\n  bs.year,  \n  bs.month,\n  COALESCE(ch.choice_name, 'no choice') AS choice,\n bs.user_id, bs.sub_id,\n -- STATUT SUB\n bs.acquis_status_lvl1,\n  bs.acquis_status_lvl2,\n   -- INFOS CHOOSE\n   cf.name as form_name,\n   ch.choice_date,\n  CASE WHEN MAX(ch.user_id) IS NOT NULL THEN 1 ELSE 0 END AS choose,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 0 THEN 1 ELSE NULL END as choose_live_1st_day,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 1 THEN 1 ELSE NULL END as choose_live_2nd_day,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 2 THEN 1 ELSE NULL END as choose_live_3rd_day,\n  CASE WHEN DATE_DIFF(date(ch.choice_date),b.NME_start_date,DAY) = 3 THEN 1 ELSE NULL END as choose_live_4th_day,\n  b.nme_start_date,\nb.nme_end_date\n  FROM `teamdata-291012`.`sales`.`box_sales` as bs\n -- JOIN inter.orders o ON o.id = bs.order_id AND o.dw_country_code = bs.dw_country_code\n -- JOIN inter.order_detail_sub s ON s.id = bs.sub_id AND s.dw_country_code = bs.dw_country_code\n  JOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = bs.box_id AND b.dw_country_code = bs.dw_country_code\n  LEFT JOIN  `teamdata-291012`.`inter`.`choose_forms` cf ON cf.box_id = b.id and cf.dw_country_code = b.dw_country_code\n  LEFT JOIN\n  (\n    SELECT user_id, box_id, cc.choice_name, cu.dw_country_code, cu.status_id, cu.created_at as choice_date, cf.name as form_name\n    FROM `teamdata-291012`.`inter`.`choose_users` cu\n    JOIN `teamdata-291012`.`inter`.`choose_forms` cf ON cf.id = cu.form_id AND cf.dw_country_code = cu.dw_country_code\n    JOIN `teamdata-291012`.`inter`.`choose_choices` cc ON cc.id = cu.choice_id AND cc.dw_country_code = cu.dw_country_code\n\n    GROUP BY user_id, box_id, cc.choice_name, cu.dw_country_code, cu.status_id, cu.created_at, cf.name\n  ) ch ON ch.user_id = bs.user_id AND ch.box_id = bs.box_id AND ch.dw_country_code = bs.dw_country_code AND ch.status_id IN ( 1,2)\n  -- WHERE bs.year = 2024 AND bs.month =6 AND bs.dw_country_code=\"FR\"\n  GROUP BY bs.box_id, bs.year, bs.month,b.date, ch.choice_name, bs.dw_country_code, bs.user_id, ch.choice_date,  b.nme_start_date, b.nme_end_date,cf.name,  bs.acquis_status_lvl1, bs.sub_id,\n  bs.acquis_status_lvl2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.index_user_samples": {"database": "teamdata-291012", "schema": "allocation", "name": "index_user_samples", "resource_type": "model", "package_name": "warehouse", "path": "dwh/allocation/index_user_samples.sql", "original_file_path": "models/dwh/allocation/index_user_samples.sql", "unique_id": "model.warehouse.index_user_samples", "fqn": ["warehouse", "dwh", "allocation", "index_user_samples"], "alias": "index_user_samples", "checksum": {"name": "sha256", "checksum": "d863096fa804e3ba544d09a459829fac104ff427c6b1edaa95614dab6ee8c43c"}, "config": {"enabled": true, "alias": null, "schema": "dwh_schema", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "table", "region": "europe-west1", "schema": "dwh_schema", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null}, "created_at": 1759995464.627779, "relation_name": "`teamdata-291012`.`allocation`.`index_user_samples`", "raw_code": "SELECT k.dw_country_code, o.user_id, s.box_id, k.product_id as sample_id\nFROM {{ ref('kit_links') }} k\nJOIN {{ ref('products') }} pbox ON k.kit_id = pbox.ID AND pbox.dw_country_code = k.dw_country_code\nJOIN {{ ref('products') }} prod ON prod.id = k.product_id AND prod.dw_country_code = k.dw_country_code\nJOIN {{ ref('order_detail_sub') }} s ON s.box_id = pbox.box_id AND s.coffret_id = pbox.coffret_id AND s.dw_country_code = pbox.dw_country_code\nJOIN {{ ref('order_details') }} d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nJOIN {{ ref('orders') }} o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nGROUP BY k.dw_country_code, o.user_id, s.box_id, k.product_id", "language": "sql", "refs": [{"name": "kit_links", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.kit_links", "model.warehouse.products", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders"]}, "compiled_path": "target/compiled/warehouse/models/dwh/allocation/index_user_samples.sql", "compiled": true, "compiled_code": "SELECT k.dw_country_code, o.user_id, s.box_id, k.product_id as sample_id\nFROM `teamdata-291012`.`inter`.`kit_links` k\nJOIN `teamdata-291012`.`inter`.`products` pbox ON k.kit_id = pbox.ID AND pbox.dw_country_code = k.dw_country_code\nJOIN `teamdata-291012`.`inter`.`products` prod ON prod.id = k.product_id AND prod.dw_country_code = k.dw_country_code\nJOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.box_id = pbox.box_id AND s.coffret_id = pbox.coffret_id AND s.dw_country_code = pbox.dw_country_code\nJOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = s.order_detail_id AND d.dw_country_code = s.dw_country_code\nJOIN `teamdata-291012`.`inter`.`orders` o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nGROUP BY k.dw_country_code, o.user_id, s.box_id, k.product_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.crm_zapier": {"database": "normalised-417010", "schema": "crm", "name": "crm_zapier", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/1H/normalised/crm_zapier.sql", "original_file_path": "models/schedule/hourly/1H/normalised/crm_zapier.sql", "unique_id": "model.warehouse.crm_zapier", "fqn": ["warehouse", "schedule", "hourly", "1H", "normalised", "crm_zapier"], "alias": "crm_zapier", "checksum": {"name": "sha256", "checksum": "0d3aef0e09ade263bf7c1ca04b102ad777a59ce0013e415471a4912ac1508d0f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "zapier_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "incremental", "database": "normalised-417010", "unique_key": "zapier_id"}, "created_at": 1759995464.629269, "relation_name": "`normalised-417010`.`crm`.`crm_zapier`", "raw_code": "-- models/marts/zapier_new_campaigns.sql\n-- Version optimis\u00e9e pour Zapier avec ID num\u00e9rique stable\n\n{{ config(\n    materialized='incremental',\n    unique_key='zapier_id' \n) }}\n\nWITH new_campaigns AS (\n  SELECT \n    id as campaign_id_string,  -- ID original (string)\n    ABS(FARM_FINGERPRINT(id)) as zapier_id,  -- Hash BigQuery\n    name as campaign_name,\n    custom_country,\n    custom_typologie,\n    custom_contenu_communication,\n    custom_categorie_de_campagne,\n    custom_nouveaux_segments,  -- Virgule manquante ajout\u00e9e\n    status,\n    created,\n    'https://r.crm.blissim.com/tr/mr/fiRnTMX8D0CQWF4znjnHk_HElgODi-p6N2EI2eeqiYDICBc4uGw2U[\u2026]kB9js7OzblMRTdCBqO0NOTA178XkmBgBEz2olhkbLmlQ-e1FQ9PvIpnn0o2w' as url,\n    startDate as send_date,  -- Champ manquant pour le filtre incr\u00e9mental\n    'NEW' as zapier_status,\n    CURRENT_TIMESTAMP() as processed_at\n  FROM `teamdata-291012.cdpimagino.imaginoReplicatedCampaign`\n  \n\n  {% if is_incremental() %}\n    WHERE startdate >= (SELECT MAX(startdate) FROM {{ this }}) and startDate is not null\n  {% endif %}\n \n),\n\ncampaign_stats AS (\n  SELECT \n    m.activationId,\n    COUNT(DISTINCT m.address) as targeted,\n    COUNT(DISTINCT CASE WHEN m.status = 'delivered' THEN m.address END) as delivered,\n    COUNT(DISTINCT CASE WHEN m.status = 'softBounce' THEN m.address END) as soft_bounce,\n    COUNT(DISTINCT CASE WHEN m.status = 'hardBounce' THEN m.address END) as hard_bounce\n  FROM `teamdata-291012.cdpimagino.imaginoReplicatedMessage` m\n  WHERE DATE(m.eventDate) >= '2024-01-01'\n    {% if is_incremental() %}\n      -- Optimisation : ne calculer que pour les nouvelles campagnes\n      AND m.activationId IN (SELECT campaign_id_string FROM new_campaigns)\n    {% endif %}\n  GROUP BY m.activationId\n)\n\nSELECT \n  nc.*,  -- Virgule manquante ajout\u00e9e\n  -- Stats avec targeted\n  COALESCE(cs.targeted, 0) as targeted,\n  COALESCE(cs.delivered, 0) as delivered,\n  COALESCE(cs.soft_bounce, 0) as soft_bounce,\n  COALESCE(cs.hard_bounce, 0) as hard_bounce,\n  -- M\u00e9triques calcul\u00e9es\n  ROUND(\n    COALESCE(cs.delivered, 0) * 100.0 / NULLIF(COALESCE(cs.targeted, 0), 0), 2\n  ) as delivery_rate\nFROM new_campaigns nc\nLEFT JOIN campaign_stats cs ON cs.activationId = nc.campaign_id_string\n\n-- Optionnel : filtrer les campagnes avec au moins quelques contacts\n-- WHERE COALESCE(cs.targeted, 0) > 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/1H/normalised/crm_zapier.sql", "compiled": true, "compiled_code": "-- models/marts/zapier_new_campaigns.sql\n-- Version optimis\u00e9e pour Zapier avec ID num\u00e9rique stable\n\n\n\nWITH new_campaigns AS (\n  SELECT \n    id as campaign_id_string,  -- ID original (string)\n    ABS(FARM_FINGERPRINT(id)) as zapier_id,  -- Hash BigQuery\n    name as campaign_name,\n    custom_country,\n    custom_typologie,\n    custom_contenu_communication,\n    custom_categorie_de_campagne,\n    custom_nouveaux_segments,  -- Virgule manquante ajout\u00e9e\n    status,\n    created,\n    'https://r.crm.blissim.com/tr/mr/fiRnTMX8D0CQWF4znjnHk_HElgODi-p6N2EI2eeqiYDICBc4uGw2U[\u2026]kB9js7OzblMRTdCBqO0NOTA178XkmBgBEz2olhkbLmlQ-e1FQ9PvIpnn0o2w' as url,\n    startDate as send_date,  -- Champ manquant pour le filtre incr\u00e9mental\n    'NEW' as zapier_status,\n    CURRENT_TIMESTAMP() as processed_at\n  FROM `teamdata-291012.cdpimagino.imaginoReplicatedCampaign`\n  \n\n  \n    WHERE startdate >= (SELECT MAX(startdate) FROM `normalised-417010`.`crm`.`crm_zapier`) and startDate is not null\n  \n \n),\n\ncampaign_stats AS (\n  SELECT \n    m.activationId,\n    COUNT(DISTINCT m.address) as targeted,\n    COUNT(DISTINCT CASE WHEN m.status = 'delivered' THEN m.address END) as delivered,\n    COUNT(DISTINCT CASE WHEN m.status = 'softBounce' THEN m.address END) as soft_bounce,\n    COUNT(DISTINCT CASE WHEN m.status = 'hardBounce' THEN m.address END) as hard_bounce\n  FROM `teamdata-291012.cdpimagino.imaginoReplicatedMessage` m\n  WHERE DATE(m.eventDate) >= '2024-01-01'\n    \n      -- Optimisation : ne calculer que pour les nouvelles campagnes\n      AND m.activationId IN (SELECT campaign_id_string FROM new_campaigns)\n    \n  GROUP BY m.activationId\n)\n\nSELECT \n  nc.*,  -- Virgule manquante ajout\u00e9e\n  -- Stats avec targeted\n  COALESCE(cs.targeted, 0) as targeted,\n  COALESCE(cs.delivered, 0) as delivered,\n  COALESCE(cs.soft_bounce, 0) as soft_bounce,\n  COALESCE(cs.hard_bounce, 0) as hard_bounce,\n  -- M\u00e9triques calcul\u00e9es\n  ROUND(\n    COALESCE(cs.delivered, 0) * 100.0 / NULLIF(COALESCE(cs.targeted, 0), 0), 2\n  ) as delivery_rate\nFROM new_campaigns nc\nLEFT JOIN campaign_stats cs ON cs.activationId = nc.campaign_id_string\n\n-- Optionnel : filtrer les campagnes avec au moins quelques contacts\n-- WHERE COALESCE(cs.targeted, 0) > 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.reviews_by_user": {"database": "normalised-417010", "schema": "reviews", "name": "reviews_by_user", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/1H/normalised/reviews_by_user.sql", "original_file_path": "models/schedule/hourly/1H/normalised/reviews_by_user.sql", "unique_id": "model.warehouse.reviews_by_user", "fqn": ["warehouse", "schedule", "hourly", "1H", "normalised", "reviews_by_user"], "alias": "reviews_by_user", "checksum": {"name": "sha256", "checksum": "1a8cc470dcf9ee88bb8d7b535c6b239224adea0dbae4195dd3af0a22d818a8dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "cluster_by": ["review_date", "dw_country_code", "brand_name"], "partition_by": {"data_type": "date", "field": "box_date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "box_date"}, "cluster_by": ["review_date", "dw_country_code", "brand_name"]}, "created_at": 1759995464.633229, "relation_name": "`normalised-417010`.`reviews`.`reviews_by_user`", "raw_code": "{{ config(\n    partition_by={\n    \"field\": \"box_date\",\n      \"data_type\": \"date\"\n    },\n    cluster_by=['review_date', 'dw_country_code', 'brand_name']\n) }}\n\n\nWITH catalog_filtered AS (\n  SELECT\n    ca.*,\n    ROW_NUMBER() OVER (PARTITION BY ca.sku ORDER BY \n      CASE \n        WHEN ca.product_post_id IS NOT NULL THEN 1 \n        WHEN ca.visible = 'catalog_and_search' THEN 2 \n        ELSE 3 \n      END\n    ) as row_num\n  FROM `teamdata-291012.product.catalog` ca\n -- where  sku='CAU-SOINCORPSTDV-JBX2205'\n\n)\nselect ifnull(s.dw_country_code,original_language) as dw_country_code,FORMAT_DATE('%Y-%m',bo.date) AS box_month,\nr.box_id as box_id,bo.date as box_date,date(r.created_at) review_date,r.id as review_id,ifnull(s.component_sku,ii.sku)as sku,iifz.sku as fz_sku,\nifnull(s.component_brand_name,b.name) as brand_name,ri.inventory_item_id,component_codification_lvl2,brand_lvl1,brand_lvl2,brand_lvl3,\nb.id as brand_id,r.ip,\ncategory_lvl_1,category_lvl_2,category_lvl_3,\nrimini.priority,\nifnull(s.ean,ii.ean)ean,\nifnull(s.product_name,ii.name)product_name,\nmax(product_nice_name) as product_nice_name,\nreplace(JSON_EXTRACT(trim(r.title), '$.FR'),'\"', '') as FR_title,\nreplace(JSON_EXTRACT(trim(r.comment), '$.FR'),'\"', '') as FR_comment,\nr.moderation_status,rating,\nconcat(c.dw_country_code,'_',c.user_id)as user_key,\nc.user_id,c.email,firstname,lastname,status,\ncase when sampled = 1 then true else false end as is_box,\ncount(distinct case when (status ='completed' and moderation_status ='validated') or ( status='done' and moderation_status='validated') then r.id end ) as nb_reviews,\ncast((SELECT value FROM UNNEST(tab) WHERE slug = 'efficiency' LIMIT 1)as int64) AS efficiency,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'texture' LIMIT 1) as int64) AS texture,\ncast((SELECT value FROM UNNEST(tab) WHERE slug = 'fragrance' LIMIT 1)as int64) AS fragrance,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'composition' LIMIT 1)as int64) AS composition,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'ease-of-use' LIMIT 1)as int64) AS ease_of_use,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'pigment' LIMIT 1)as int64) AS pigment,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'wear' LIMIT 1)as int64) AS wear,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'ease-of-application' LIMIT 1)as int64) AS ease_of_application,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'color-intensity' LIMIT 1)as int64) AS color_intensity,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'usefulness' LIMIT 1)as int64) AS usefulness,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'taste' LIMIT 1)as int64) AS taste,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'ease-of-intake' LIMIT 1)as int64) AS ease_of_intake,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'resulting-shade' LIMIT 1)as int64) AS resulting_shade,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'finish-on-hair' LIMIT 1)as int64) AS finish_on_hair,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'feeling-of-comfort' LIMIT 1)as int64) AS feeling_of_comfort,\ncast(  (SELECT value FROM UNNEST(tab) WHERE slug = 'finish-on-skin-eyes' LIMIT 1)as int64) AS finish_on_skin_eyes\nfrom `teamdata-291012.bdd_prod_sublissim.review` r\ninner join `teamdata-291012.bdd_prod_sublissim.review_author` ra on r.author_id=ra.id\ninner join `teamdata-291012.bdd_prod_sublissim.review_item` ri on ri.id=r.full_size_review_item_id\nleft join `teamdata-291012.bdd_prod_sublissim.review_item` rimini on rimini.id=r.review_item_id\nleft join `teamdata-291012.bdd_prod_sublissim.review_item` rifz on rifz.id=full_size_review_item_id\ninner join `teamdata-291012.bdd_prod_sublissim.inventory_item` ii on ii.id=rimini.inventory_item_id\ninner join `teamdata-291012.bdd_prod_sublissim.inventory_item` iifz on iifz.id=rifz.inventory_item_id\ninner join `normalised-417010.product.brands_enriched_table` b on b.brand_id=ii.brand_id and b.dw_country_code=r.original_language\nleft join `normalised-417010.box.sku_by_user_by_box` s on s.user_id=ra.external_id and s.box_id>=10 and component_sku=ii.sku and component_codification_lvl2 = 'Product' and s.dw_country_code=r.original_language\nleft join `teamdata-291012.inter.boxes` bo on bo.id=r.box_id and bo.dw_country_code=r.original_language\nleft join (select user_id,email,firstname,lastname,dw_country_code from `teamdata-291012.user.customers`)c on c.user_id=ra.external_id and r.original_language=c.dw_country_code\nleft join catalog_filtered ca on ca.sku=ii.sku and ca.dw_country_code=s.dw_country_code and ca.row_num = 1\nLEFT JOIN (SELECT  review_id,ARRAY_AGG(STRUCT(slug, value)) AS tab \nFROM  `teamdata-291012.bdd_prod_sublissim.review_additional_response` rar\nLEFT JOIN `teamdata-291012.bdd_prod_sublissim.review_additional_field` raf ON raf.id = rar.additional_field_id\nGROUP BY \nreview_id\n) subquery on r.id = subquery.review_id\n\nwhere (s.box_id <= (select id from `teamdata-291012.inter.boxes` where shipping_status_id=2 and dw_country_code='FR') or s.box_id is null)\nAND DATE(r.created_at) >= DATE_ADD(ifnull(DATE(bo.date),'2000-01-01'), INTERVAL -8 DAY) \n\n\ngroup by all", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/1H/normalised/reviews_by_user.sql", "compiled": true, "compiled_code": "\n\n\nWITH catalog_filtered AS (\n  SELECT\n    ca.*,\n    ROW_NUMBER() OVER (PARTITION BY ca.sku ORDER BY \n      CASE \n        WHEN ca.product_post_id IS NOT NULL THEN 1 \n        WHEN ca.visible = 'catalog_and_search' THEN 2 \n        ELSE 3 \n      END\n    ) as row_num\n  FROM `teamdata-291012.product.catalog` ca\n -- where  sku='CAU-SOINCORPSTDV-JBX2205'\n\n)\nselect ifnull(s.dw_country_code,original_language) as dw_country_code,FORMAT_DATE('%Y-%m',bo.date) AS box_month,\nr.box_id as box_id,bo.date as box_date,date(r.created_at) review_date,r.id as review_id,ifnull(s.component_sku,ii.sku)as sku,iifz.sku as fz_sku,\nifnull(s.component_brand_name,b.name) as brand_name,ri.inventory_item_id,component_codification_lvl2,brand_lvl1,brand_lvl2,brand_lvl3,\nb.id as brand_id,r.ip,\ncategory_lvl_1,category_lvl_2,category_lvl_3,\nrimini.priority,\nifnull(s.ean,ii.ean)ean,\nifnull(s.product_name,ii.name)product_name,\nmax(product_nice_name) as product_nice_name,\nreplace(JSON_EXTRACT(trim(r.title), '$.FR'),'\"', '') as FR_title,\nreplace(JSON_EXTRACT(trim(r.comment), '$.FR'),'\"', '') as FR_comment,\nr.moderation_status,rating,\nconcat(c.dw_country_code,'_',c.user_id)as user_key,\nc.user_id,c.email,firstname,lastname,status,\ncase when sampled = 1 then true else false end as is_box,\ncount(distinct case when (status ='completed' and moderation_status ='validated') or ( status='done' and moderation_status='validated') then r.id end ) as nb_reviews,\ncast((SELECT value FROM UNNEST(tab) WHERE slug = 'efficiency' LIMIT 1)as int64) AS efficiency,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'texture' LIMIT 1) as int64) AS texture,\ncast((SELECT value FROM UNNEST(tab) WHERE slug = 'fragrance' LIMIT 1)as int64) AS fragrance,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'composition' LIMIT 1)as int64) AS composition,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'ease-of-use' LIMIT 1)as int64) AS ease_of_use,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'pigment' LIMIT 1)as int64) AS pigment,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'wear' LIMIT 1)as int64) AS wear,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'ease-of-application' LIMIT 1)as int64) AS ease_of_application,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'color-intensity' LIMIT 1)as int64) AS color_intensity,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'usefulness' LIMIT 1)as int64) AS usefulness,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'taste' LIMIT 1)as int64) AS taste,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'ease-of-intake' LIMIT 1)as int64) AS ease_of_intake,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'resulting-shade' LIMIT 1)as int64) AS resulting_shade,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'finish-on-hair' LIMIT 1)as int64) AS finish_on_hair,\ncast( (SELECT value FROM UNNEST(tab) WHERE slug = 'feeling-of-comfort' LIMIT 1)as int64) AS feeling_of_comfort,\ncast(  (SELECT value FROM UNNEST(tab) WHERE slug = 'finish-on-skin-eyes' LIMIT 1)as int64) AS finish_on_skin_eyes\nfrom `teamdata-291012.bdd_prod_sublissim.review` r\ninner join `teamdata-291012.bdd_prod_sublissim.review_author` ra on r.author_id=ra.id\ninner join `teamdata-291012.bdd_prod_sublissim.review_item` ri on ri.id=r.full_size_review_item_id\nleft join `teamdata-291012.bdd_prod_sublissim.review_item` rimini on rimini.id=r.review_item_id\nleft join `teamdata-291012.bdd_prod_sublissim.review_item` rifz on rifz.id=full_size_review_item_id\ninner join `teamdata-291012.bdd_prod_sublissim.inventory_item` ii on ii.id=rimini.inventory_item_id\ninner join `teamdata-291012.bdd_prod_sublissim.inventory_item` iifz on iifz.id=rifz.inventory_item_id\ninner join `normalised-417010.product.brands_enriched_table` b on b.brand_id=ii.brand_id and b.dw_country_code=r.original_language\nleft join `normalised-417010.box.sku_by_user_by_box` s on s.user_id=ra.external_id and s.box_id>=10 and component_sku=ii.sku and component_codification_lvl2 = 'Product' and s.dw_country_code=r.original_language\nleft join `teamdata-291012.inter.boxes` bo on bo.id=r.box_id and bo.dw_country_code=r.original_language\nleft join (select user_id,email,firstname,lastname,dw_country_code from `teamdata-291012.user.customers`)c on c.user_id=ra.external_id and r.original_language=c.dw_country_code\nleft join catalog_filtered ca on ca.sku=ii.sku and ca.dw_country_code=s.dw_country_code and ca.row_num = 1\nLEFT JOIN (SELECT  review_id,ARRAY_AGG(STRUCT(slug, value)) AS tab \nFROM  `teamdata-291012.bdd_prod_sublissim.review_additional_response` rar\nLEFT JOIN `teamdata-291012.bdd_prod_sublissim.review_additional_field` raf ON raf.id = rar.additional_field_id\nGROUP BY \nreview_id\n) subquery on r.id = subquery.review_id\n\nwhere (s.box_id <= (select id from `teamdata-291012.inter.boxes` where shipping_status_id=2 and dw_country_code='FR') or s.box_id is null)\nAND DATE(r.created_at) >= DATE_ADD(ifnull(DATE(bo.date),'2000-01-01'), INTERVAL -8 DAY) \n\n\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.flag_materialized": {"database": "teamdata-291012", "schema": "catalog", "name": "flag_materialized", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/1H/teamdata/flag_materialized.sql", "original_file_path": "models/schedule/hourly/1H/teamdata/flag_materialized.sql", "unique_id": "model.warehouse.flag_materialized", "fqn": ["warehouse", "schedule", "hourly", "1H", "teamdata", "flag_materialized"], "alias": "flag_materialized", "checksum": {"name": "sha256", "checksum": "db9a6196106da07e17022eae3ace295850ce34e293affb2b01a52a7bc38f586c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.6347039, "relation_name": "`teamdata-291012`.`catalog`.`flag_materialized`", "raw_code": "SELECT * FROM `teamdata-291012.catalog.flag`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/1H/teamdata/flag_materialized.sql", "compiled": true, "compiled_code": "SELECT * FROM `teamdata-291012.catalog.flag`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.export_pnl_live_materialized": {"database": "teamdata-291012", "schema": "pnl", "name": "export_pnl_live_materialized", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/1H/teamdata/export_pnl_live_materialized.sql", "original_file_path": "models/schedule/hourly/1H/teamdata/export_pnl_live_materialized.sql", "unique_id": "model.warehouse.export_pnl_live_materialized", "fqn": ["warehouse", "schedule", "hourly", "1H", "teamdata", "export_pnl_live_materialized"], "alias": "export_pnl_live_materialized", "checksum": {"name": "sha256", "checksum": "0093fad564936c5598aa75b7191bcaf12beecaccd003c92eb9dcaa217a4ab487"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.63659, "relation_name": "`teamdata-291012`.`pnl`.`export_pnl_live_materialized`", "raw_code": "SELECT * FROM `teamdata-291012.pnl.export_pnl_live` where period is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/1H/teamdata/export_pnl_live_materialized.sql", "compiled": true, "compiled_code": "SELECT * FROM `teamdata-291012.pnl.export_pnl_live` where period is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.work_orders_materialized": {"database": "teamdata-291012", "schema": "catalog", "name": "work_orders_materialized", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/1H/teamdata/work_orders_materialized.sql", "original_file_path": "models/schedule/hourly/1H/teamdata/work_orders_materialized.sql", "unique_id": "model.warehouse.work_orders_materialized", "fqn": ["warehouse", "schedule", "hourly", "1H", "teamdata", "work_orders_materialized"], "alias": "work_orders_materialized", "checksum": {"name": "sha256", "checksum": "40c262b17a325f1b52dcbed44e3703f927e49c90b310e3fe1b92c614615d8d78"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.637899, "relation_name": "`teamdata-291012`.`catalog`.`work_orders_materialized`", "raw_code": "SELECT * FROM `teamdata-291012.catalog.work_orders`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/1H/teamdata/work_orders_materialized.sql", "compiled": true, "compiled_code": "SELECT * FROM `teamdata-291012.catalog.work_orders`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.pom_seasonality_table": {"database": "teamdata-291012", "schema": "ops", "name": "pom_seasonality_table", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/1H/teamdata/pom_seasonality_table.sql", "original_file_path": "models/schedule/hourly/1H/teamdata/pom_seasonality_table.sql", "unique_id": "model.warehouse.pom_seasonality_table", "fqn": ["warehouse", "schedule", "hourly", "1H", "teamdata", "pom_seasonality_table"], "alias": "pom_seasonality_table", "checksum": {"name": "sha256", "checksum": "261eb91c1578b6b7aadc4c2bbe7f4af8fe0fe225bbe96924ba534fe98a91c302"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.639198, "relation_name": "`teamdata-291012`.`ops`.`pom_seasonality_table`", "raw_code": "SELECT * FROM `teamdata-291012.ops.pom_seasonality`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/1H/teamdata/pom_seasonality_table.sql", "compiled": true, "compiled_code": "SELECT * FROM `teamdata-291012.ops.pom_seasonality`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.projects_materialized": {"database": "teamdata-291012", "schema": "catalog", "name": "projects_materialized", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/1H/teamdata/projects_materialized.sql", "original_file_path": "models/schedule/hourly/1H/teamdata/projects_materialized.sql", "unique_id": "model.warehouse.projects_materialized", "fqn": ["warehouse", "schedule", "hourly", "1H", "teamdata", "projects_materialized"], "alias": "projects_materialized", "checksum": {"name": "sha256", "checksum": "8277963f7183167a901e7002b8ef5fa607bab6f62918b6c436589405397f87bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.6405, "relation_name": "`teamdata-291012`.`catalog`.`projects_materialized`", "raw_code": "SELECT * FROM `teamdata-291012.catalog.projects`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/1H/teamdata/projects_materialized.sql", "compiled": true, "compiled_code": "SELECT * FROM `teamdata-291012.catalog.projects`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.surveillance_incremental": {"database": "teamdata-291012", "schema": "alerting", "name": "surveillance_incremental", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/2H/surveillance_incremental.sql", "original_file_path": "models/schedule/hourly/2H/surveillance_incremental.sql", "unique_id": "model.warehouse.surveillance_incremental", "fqn": ["warehouse", "schedule", "hourly", "2H", "surveillance_incremental"], "alias": "surveillance_incremental", "checksum": {"name": "sha256", "checksum": "cb614415b09196807605f82a87466e6ea9f1b1c1e68b35b7f89f304c19c547fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "partition_by": {"field": "creation_time", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "incremental", "partition_by": {"field": "creation_time", "data_type": "timestamp", "granularity": "day"}}, "created_at": 1759995464.641779, "relation_name": "`teamdata-291012`.`alerting`.`surveillance_incremental`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            'field': 'creation_time',\n            'data_type': 'timestamp',\n            'granularity': 'day'\n        }\n    )\n}}\n\nSELECT \n    user_email,\n    destination_table.table_id,\n    query,\n    creation_time,\n    sum(total_bytes_billed) as total_bytes_billed,\n    (SUM(total_bytes_billed) / 1099511627776) * 6.5 as Go_billed\nFROM region-europe-west1.INFORMATION_SCHEMA.JOBS\nWHERE \n    {% if is_incremental() %}\n        -- Dans un run incr\u00e9mental, prendre les donn\u00e9es depuis le dernier run\n        creation_time > (SELECT max(creation_time) FROM {{ this }})\n    {% else %}\n        -- Dans un run complet, garder votre logique initiale de 4 mois\n        date_diff(current_date(), date(creation_time), month) < 4\n    {% endif %}\nGROUP BY 1, 2, 3, 4", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/2H/surveillance_incremental.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    user_email,\n    destination_table.table_id,\n    query,\n    creation_time,\n    sum(total_bytes_billed) as total_bytes_billed,\n    (SUM(total_bytes_billed) / 1099511627776) * 6.5 as Go_billed\nFROM region-europe-west1.INFORMATION_SCHEMA.JOBS\nWHERE \n    \n        -- Dans un run incr\u00e9mental, prendre les donn\u00e9es depuis le dernier run\n        creation_time > (SELECT max(creation_time) FROM `teamdata-291012`.`alerting`.`surveillance_incremental`)\n    \nGROUP BY 1, 2, 3, 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.user_consent_details": {"database": "teamdata-291012", "schema": "user", "name": "user_consent_details", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/2H/user_consent_details.sql", "original_file_path": "models/schedule/hourly/2H/user_consent_details.sql", "unique_id": "model.warehouse.user_consent_details", "fqn": ["warehouse", "schedule", "hourly", "2H", "user_consent_details"], "alias": "user_consent_details", "checksum": {"name": "sha256", "checksum": "e3d5f497a844a9f8f6a016e11b317f7d2cdf19157d9f967b7fc4b2135611a6ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.645301, "relation_name": "`teamdata-291012`.`user`.`user_consent_details`", "raw_code": "WITH LatestEmails AS (\n  SELECT\n    user_id,\n    dw_country_code,\n    user_email\n  FROM (\n    SELECT\n      user_id,\n      dw_country_code,\n      user_email,\n      ROW_NUMBER() OVER(PARTITION BY user_id, dw_country_code ORDER BY updated_at DESC) as rn\n    FROM {{ ref('user_consent') }}\n    -- test multi WHERE user_id = 2327271 AND dw_country_code = 'DE'\n  )\n  WHERE rn = 1\n),\n\nConsentStatus AS (\n  SELECT \n    user_id,\n    dw_country_code,\n    max(case when t.name='email' and consent_status then true else false end) AS consent_email,\n    max(case when t.name='sms' and consent_status then true else false end) AS consent_sms,\n    max(case when t.name='whatsapp' and consent_status then true else false end) AS consent_whatsapp,\n    max(case when t.name='partner_sharing' and consent_status then true else false end) AS consent_partner_sharing,\n    max(case when t.name='beauty_profile' and consent_status then true else false end) AS consent_beauty_profile\n  FROM {{ ref('user_consent') }} c\n  LEFT JOIN {{ ref('consent_topic') }} t USING (consent_topic_id, dw_country_code)\n \n  GROUP BY user_id, dw_country_code\n)\n\nSELECT\n  e.user_id,\n  e.user_email,\n  e.dw_country_code,\n  c.consent_email,\n  c.consent_sms,\n  c.consent_whatsapp,\n  c.consent_partner_sharing,\n  c.consent_beauty_profile\nFROM LatestEmails e\nJOIN ConsentStatus c USING (user_id, dw_country_code)", "language": "sql", "refs": [{"name": "user_consent", "package": null, "version": null}, {"name": "user_consent", "package": null, "version": null}, {"name": "consent_topic", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.user_consent", "model.warehouse.consent_topic"]}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/2H/user_consent_details.sql", "compiled": true, "compiled_code": "WITH LatestEmails AS (\n  SELECT\n    user_id,\n    dw_country_code,\n    user_email\n  FROM (\n    SELECT\n      user_id,\n      dw_country_code,\n      user_email,\n      ROW_NUMBER() OVER(PARTITION BY user_id, dw_country_code ORDER BY updated_at DESC) as rn\n    FROM `teamdata-291012`.`inter`.`user_consent`\n    -- test multi WHERE user_id = 2327271 AND dw_country_code = 'DE'\n  )\n  WHERE rn = 1\n),\n\nConsentStatus AS (\n  SELECT \n    user_id,\n    dw_country_code,\n    max(case when t.name='email' and consent_status then true else false end) AS consent_email,\n    max(case when t.name='sms' and consent_status then true else false end) AS consent_sms,\n    max(case when t.name='whatsapp' and consent_status then true else false end) AS consent_whatsapp,\n    max(case when t.name='partner_sharing' and consent_status then true else false end) AS consent_partner_sharing,\n    max(case when t.name='beauty_profile' and consent_status then true else false end) AS consent_beauty_profile\n  FROM `teamdata-291012`.`inter`.`user_consent` c\n  LEFT JOIN `teamdata-291012`.`inter`.`consent_topic` t USING (consent_topic_id, dw_country_code)\n \n  GROUP BY user_id, dw_country_code\n)\n\nSELECT\n  e.user_id,\n  e.user_email,\n  e.dw_country_code,\n  c.consent_email,\n  c.consent_sms,\n  c.consent_whatsapp,\n  c.consent_partner_sharing,\n  c.consent_beauty_profile\nFROM LatestEmails e\nJOIN ConsentStatus c USING (user_id, dw_country_code)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Export_Acquisition_Daily": {"database": "normalised-417010", "schema": "marketing", "name": "Export_Acquisition_Daily", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/4H/normalised/Export_Acquisition_Daily.sql", "original_file_path": "models/schedule/hourly/4H/normalised/Export_Acquisition_Daily.sql", "unique_id": "model.warehouse.Export_Acquisition_Daily", "fqn": ["warehouse", "schedule", "hourly", "4H", "normalised", "Export_Acquisition_Daily"], "alias": "Export_Acquisition_Daily", "checksum": {"name": "sha256", "checksum": "f04e330440d1ef5222db507ee1e6976a64d2c5a07e3f8908fbf3331717be07d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "cluster_by": ["dw_country_code"], "partition_by": {"data_type": "date", "field": "payment_date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "payment_date"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.6467142, "relation_name": "`normalised-417010`.`marketing`.`Export_Acquisition_Daily`", "raw_code": "{{\n  config(\n    materialized='table',\n    partition_by={\n      \"field\": \"payment_date\",\n      \"data_type\": \"date\"\n    },\n    cluster_by=[\"dw_country_code\"]\n  )\n}}\n\nselect dw_country_code,payment_date,date as month, acquis_status_lvl2,shipping_Date as first_day,count(distinct sub_id)nb_subs from sales.box_sales bs\njoin inter.boxes using(dw_country_code,date)\nwhere acquis_status_lvl1='ACQUISITION'\nand payment_status='paid'\nand payment_Date >='2022-01-01'\nand diff_current_box<=0\ngroup by all", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/4H/normalised/Export_Acquisition_Daily.sql", "compiled": true, "compiled_code": "\n\nselect dw_country_code,payment_date,date as month, acquis_status_lvl2,shipping_Date as first_day,count(distinct sub_id)nb_subs from sales.box_sales bs\njoin inter.boxes using(dw_country_code,date)\nwhere acquis_status_lvl1='ACQUISITION'\nand payment_status='paid'\nand payment_Date >='2022-01-01'\nand diff_current_box<=0\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Export_GWS_LIVE": {"database": "normalised-417010", "schema": "marketing", "name": "Export_GWS_LIVE", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/4H/normalised/Export_GWS_LIVE.sql", "original_file_path": "models/schedule/hourly/4H/normalised/Export_GWS_LIVE.sql", "unique_id": "model.warehouse.Export_GWS_LIVE", "fqn": ["warehouse", "schedule", "hourly", "4H", "normalised", "Export_GWS_LIVE"], "alias": "Export_GWS_LIVE", "checksum": {"name": "sha256", "checksum": "4378859a04d064380d8ee328ef4768be619e929326ca33606e8054ed9f530218"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "cluster_by": ["dw_country_code"], "partition_by": {"data_type": "date", "field": "date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "date"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.648125, "relation_name": "`normalised-417010`.`marketing`.`Export_GWS_LIVE`", "raw_code": "{{\n  config(\n    materialized='table',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\"\n    },\n    cluster_by=[\"dw_country_code\"]\n  )\n}}\n\nSELECT \n    bs.dw_country_code,\n    bs.date as month, \n    date(payment_date) as date,\n    round(sum(COALESCE(p.attr_discounted_purchase_price, p.attr_purchase_price)),1) as cost,\n    coupon,\n    'Discount' as type,\n    'BOX' as product_type,\n    'ACQUIZ' as acquis_type,\n    shipping_Date as first_day\nFROM sales.box_sales bs \nLEFT JOIN inter.coupons c \n    ON c.code = bs.coupon \n    AND c.dw_country_code = bs.dw_country_code \nLEFT JOIN inter.products p \n    ON c.discount_type = 'PRODUCT' \n    AND c.discount_amount = CAST(p.id AS STRING)\n    AND p.dw_country_code = c.dw_country_code\nJOIN inter.boxes b \n    ON b.dw_country_code = bs.dw_country_code \n    AND b.date = bs.date \nWHERE coupon is not null and bs.year>2021\nGROUP BY ALL \nHAVING cost > 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/4H/normalised/Export_GWS_LIVE.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    bs.dw_country_code,\n    bs.date as month, \n    date(payment_date) as date,\n    round(sum(COALESCE(p.attr_discounted_purchase_price, p.attr_purchase_price)),1) as cost,\n    coupon,\n    'Discount' as type,\n    'BOX' as product_type,\n    'ACQUIZ' as acquis_type,\n    shipping_Date as first_day\nFROM sales.box_sales bs \nLEFT JOIN inter.coupons c \n    ON c.code = bs.coupon \n    AND c.dw_country_code = bs.dw_country_code \nLEFT JOIN inter.products p \n    ON c.discount_type = 'PRODUCT' \n    AND c.discount_amount = CAST(p.id AS STRING)\n    AND p.dw_country_code = c.dw_country_code\nJOIN inter.boxes b \n    ON b.dw_country_code = bs.dw_country_code \n    AND b.date = bs.date \nWHERE coupon is not null and bs.year>2021\nGROUP BY ALL \nHAVING cost > 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Export_predictive_ltv_per_campaign": {"database": "normalised-417010", "schema": "marketing", "name": "Export_predictive_ltv_per_campaign", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/4H/normalised/Export_predictive_ltv_per_campaign.sql", "original_file_path": "models/schedule/hourly/4H/normalised/Export_predictive_ltv_per_campaign.sql", "unique_id": "model.warehouse.Export_predictive_ltv_per_campaign", "fqn": ["warehouse", "schedule", "hourly", "4H", "normalised", "Export_predictive_ltv_per_campaign"], "alias": "Export_predictive_ltv_per_campaign", "checksum": {"name": "sha256", "checksum": "689515368fe1d5a4f01af183145a83f954a2d54e5ac489466a6437726dcd2842"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "partition_by": {"data_type": "date", "field": "first_date_campaign"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "first_date_campaign"}}, "created_at": 1759995464.649647, "relation_name": "`normalised-417010`.`marketing`.`Export_predictive_ltv_per_campaign`", "raw_code": "{{\n  config(\n    materialized='table',\n    partition_by={\n      \"field\": \"first_date_campaign\",\n      \"data_type\": \"date\"\n    }\n  )\n}}\n\n\n\nSELECT avg(cast(round(l.predicted_ltv,0 ) as int64)) as predicted_ltv,c.user_id,t.*,min(date) as first_date_campaign\nFROM `teamdata-291012.funnel.funnel_data_fbclid_event_IDtransaction_ID` t \ninner join (select distinct user_id,dw_country_code,order_id from sales .box_sales where dw_country_code='FR' ) bs on cast(bs.order_id as string)=t.Transaction_ID___GA4__Google_Analytics\ninner join user.customers c on c.user_id=bs.user_id and c.dw_country_code=bs.dw_country_code\ninner join teamdata-291012.predictive_ltv.ltv l on l.user_id=bs.user_id and l.dw_country_code=bs.dw_country_code\nwhere Session_campaign___GA4__Google_Analytics<>'(not set)' -- and Session_campaign___GA4__Google_Analytics like 'ACQ%'\ngroup by all", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/4H/normalised/Export_predictive_ltv_per_campaign.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT avg(cast(round(l.predicted_ltv,0 ) as int64)) as predicted_ltv,c.user_id,t.*,min(date) as first_date_campaign\nFROM `teamdata-291012.funnel.funnel_data_fbclid_event_IDtransaction_ID` t \ninner join (select distinct user_id,dw_country_code,order_id from sales .box_sales where dw_country_code='FR' ) bs on cast(bs.order_id as string)=t.Transaction_ID___GA4__Google_Analytics\ninner join user.customers c on c.user_id=bs.user_id and c.dw_country_code=bs.dw_country_code\ninner join teamdata-291012.predictive_ltv.ltv l on l.user_id=bs.user_id and l.dw_country_code=bs.dw_country_code\nwhere Session_campaign___GA4__Google_Analytics<>'(not set)' -- and Session_campaign___GA4__Google_Analytics like 'ACQ%'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Export_Yearly_Live": {"database": "normalised-417010", "schema": "marketing", "name": "Export_Yearly_Live", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/4H/normalised/Export_Yearly_Live.sql", "original_file_path": "models/schedule/hourly/4H/normalised/Export_Yearly_Live.sql", "unique_id": "model.warehouse.Export_Yearly_Live", "fqn": ["warehouse", "schedule", "hourly", "4H", "normalised", "Export_Yearly_Live"], "alias": "Export_Yearly_Live", "checksum": {"name": "sha256", "checksum": "88f8bf20e55a5246867dda307c5d489cbc41af9e8b85c0b90eebabf08b8f8e7a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "cluster_by": ["dw_country_code"], "partition_by": {"data_type": "date", "field": "date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "date"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.6511722, "relation_name": "`normalised-417010`.`marketing`.`Export_Yearly_Live`", "raw_code": "{{\n  config(\n    materialized='table',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\"\n    },\n    cluster_by=[\"dw_country_code\"]\n  )\n}}\n\n\n\nSELECT \n       DATE(payment_date) AS date,shipping_Date as first_day,\n       b.date as month ,\n       bs.dw_country_code,'yearly' type ,'BOX' as product_type,'ACQUIZ' acquis_type,\n       SUM(discount) AS discount\nFROM sales.box_sales bs\njoin inter.boxes using(dw_country_code,date)\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=bs.dw_country_code\nWHERE yearly = 1\nAND bs.dw_country_code IN ('FR', 'DE')\nand year>2021\nAND sub_payment_status_id = 1\nGROUP BY 1,2,3,4,5,6", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/4H/normalised/Export_Yearly_Live.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT \n       DATE(payment_date) AS date,shipping_Date as first_day,\n       b.date as month ,\n       bs.dw_country_code,'yearly' type ,'BOX' as product_type,'ACQUIZ' acquis_type,\n       SUM(discount) AS discount\nFROM sales.box_sales bs\njoin inter.boxes using(dw_country_code,date)\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=bs.dw_country_code\nWHERE yearly = 1\nAND bs.dw_country_code IN ('FR', 'DE')\nand year>2021\nAND sub_payment_status_id = 1\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Export_Discount_Live": {"database": "normalised-417010", "schema": "marketing", "name": "Export_Discount_Live", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/4H/normalised/Export_Discount_Live.sql", "original_file_path": "models/schedule/hourly/4H/normalised/Export_Discount_Live.sql", "unique_id": "model.warehouse.Export_Discount_Live", "fqn": ["warehouse", "schedule", "hourly", "4H", "normalised", "Export_Discount_Live"], "alias": "Export_Discount_Live", "checksum": {"name": "sha256", "checksum": "d389645f4d9024702e835db250aef5856c42d4db6f884aaa6c291da1e0adf90f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "cluster_by": ["dw_country_code"], "partition_by": {"data_type": "date", "field": "date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "date"}, "cluster_by": ["dw_country_code"]}, "created_at": 1759995464.65261, "relation_name": "`normalised-417010`.`marketing`.`Export_Discount_Live`", "raw_code": "{{\n  config(\n    materialized='table',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\"\n    },\n    cluster_by=[\"dw_country_code\"]\n  )\n}}\n\nSELECT \n    bs.dw_country_code,\n    bs.date as month, \n    date(payment_date) as date,\n    round(sum(bs.discount),1) as cost,\n    case \n        when coupon is null and raffed=1 then 'RAF' \n        else coupon \n    end as coupon,\n    case \n        when yearly=1 then 'YEARLY'\n        when raffed=1 then 'RAF' \n        else 'DISCOUNT' \n    end as type,\n    'BOX' as product_type,\n    'ACQUIZ' as acquis_type,\n    shipping_Date as first_day \nFROM sales.box_sales bs \nLEFT JOIN inter.coupons c \n    ON c.code = bs.coupon \n    AND c.dw_country_code = bs.dw_country_code \nLEFT JOIN inter.products p \n    ON c.discount_type = 'PRODUCT' \n    AND c.discount_amount = CAST(p.id AS STRING)\n    AND p.dw_country_code = c.dw_country_code\nJOIN inter.boxes b \n    ON b.dw_country_code = bs.dw_country_code \n    AND b.date = bs.date \nWHERE diff_current_box <= 0 \n    AND (coupon is not null or raffed = 1) and bs.year>2021\nGROUP BY ALL \nHAVING cost > 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/4H/normalised/Export_Discount_Live.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    bs.dw_country_code,\n    bs.date as month, \n    date(payment_date) as date,\n    round(sum(bs.discount),1) as cost,\n    case \n        when coupon is null and raffed=1 then 'RAF' \n        else coupon \n    end as coupon,\n    case \n        when yearly=1 then 'YEARLY'\n        when raffed=1 then 'RAF' \n        else 'DISCOUNT' \n    end as type,\n    'BOX' as product_type,\n    'ACQUIZ' as acquis_type,\n    shipping_Date as first_day \nFROM sales.box_sales bs \nLEFT JOIN inter.coupons c \n    ON c.code = bs.coupon \n    AND c.dw_country_code = bs.dw_country_code \nLEFT JOIN inter.products p \n    ON c.discount_type = 'PRODUCT' \n    AND c.discount_amount = CAST(p.id AS STRING)\n    AND p.dw_country_code = c.dw_country_code\nJOIN inter.boxes b \n    ON b.dw_country_code = bs.dw_country_code \n    AND b.date = bs.date \nWHERE diff_current_box <= 0 \n    AND (coupon is not null or raffed = 1) and bs.year>2021\nGROUP BY ALL \nHAVING cost > 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Export_imagino_extract": {"database": "normalised-417010", "schema": "crm", "name": "Export_imagino_extract", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/4H/normalised/Export_imagino_extract.sql", "original_file_path": "models/schedule/hourly/4H/normalised/Export_imagino_extract.sql", "unique_id": "model.warehouse.Export_imagino_extract", "fqn": ["warehouse", "schedule", "hourly", "4H", "normalised", "Export_imagino_extract"], "alias": "Export_imagino_extract", "checksum": {"name": "sha256", "checksum": "e0bc8d59ed2716fcc150e433bd4d37b0f77d1e72f185925d841e27cced13cb42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "partition_by": {"data_type": "date", "field": "startdate"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "startdate"}}, "created_at": 1759995464.65402, "relation_name": "`normalised-417010`.`crm`.`Export_imagino_extract`", "raw_code": "{{\n  config(\n    materialized='table',\n    partition_by={\n      \"field\": \"startdate\",\n      \"data_type\": \"date\"\n    }\n  )\n}}\n\n\n\nWITH campaign_message_stats AS (\n SELECT \n   c.*,\n   count(distinct m.address) as targeted,\n   count(distinct case when m.status='delivered' then m.address end) as delivered,\n   count(distinct case when m.status='softBounce' then m.address end) as softBounce,\n   count(distinct case when m.status='hardBounce' then m.address end) as hardBounce\n FROM cdpimagino.imaginoreplicatedcampaign c  \n JOIN cdpimagino.imaginoreplicatedmessage m ON m.activationId = c.id\n WHERE DATE(m.eventDate) >= '2024-01-01'  -- Filtre partition\n GROUP BY ALL\n),\n\ncampaign_tracking_stats AS (\n SELECT \n   c.id as campaign_id,\n   count(distinct case when t.type='open' then t.address end) as open_uniques,\n   count(distinct case when t.type='click' then t.address end) as click_uniques,\n   count( case when t.type='click' then t.address end) as clicks,\n   count(distinct case when url like '%unsubscribe%' then t.address end ) as unsubscribes\n FROM cdpimagino.imaginoreplicatedcampaign c\n LEFT JOIN cdpimagino.imaginoreplicatedtracking t ON t.activationid = c.id\n WHERE DATE(t.eventDate) >= '2024-01-01'  -- Filtre partition\n GROUP BY c.id\n)\n\nSELECT \n    'IMAGINO' as source,\n    cms.* EXCEPT(startdate),\n    coalesce(date(startdate),date(created)) as startdate,\n    COALESCE(cts.open_uniques, 0) as open_uniques,\n    COALESCE(cts.click_uniques, 0) as click_uniques,\n    COALESCE(cts.clicks, 0) as clicks,\n    COALESCE(cts.unsubscribes, 0) as unsubscribes\n    \nFROM campaign_message_stats cms\nLEFT JOIN campaign_tracking_stats cts ON cts.campaign_id = cms.id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/4H/normalised/Export_imagino_extract.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH campaign_message_stats AS (\n SELECT \n   c.*,\n   count(distinct m.address) as targeted,\n   count(distinct case when m.status='delivered' then m.address end) as delivered,\n   count(distinct case when m.status='softBounce' then m.address end) as softBounce,\n   count(distinct case when m.status='hardBounce' then m.address end) as hardBounce\n FROM cdpimagino.imaginoreplicatedcampaign c  \n JOIN cdpimagino.imaginoreplicatedmessage m ON m.activationId = c.id\n WHERE DATE(m.eventDate) >= '2024-01-01'  -- Filtre partition\n GROUP BY ALL\n),\n\ncampaign_tracking_stats AS (\n SELECT \n   c.id as campaign_id,\n   count(distinct case when t.type='open' then t.address end) as open_uniques,\n   count(distinct case when t.type='click' then t.address end) as click_uniques,\n   count( case when t.type='click' then t.address end) as clicks,\n   count(distinct case when url like '%unsubscribe%' then t.address end ) as unsubscribes\n FROM cdpimagino.imaginoreplicatedcampaign c\n LEFT JOIN cdpimagino.imaginoreplicatedtracking t ON t.activationid = c.id\n WHERE DATE(t.eventDate) >= '2024-01-01'  -- Filtre partition\n GROUP BY c.id\n)\n\nSELECT \n    'IMAGINO' as source,\n    cms.* EXCEPT(startdate),\n    coalesce(date(startdate),date(created)) as startdate,\n    COALESCE(cts.open_uniques, 0) as open_uniques,\n    COALESCE(cts.click_uniques, 0) as click_uniques,\n    COALESCE(cts.clicks, 0) as clicks,\n    COALESCE(cts.unsubscribes, 0) as unsubscribes\n    \nFROM campaign_message_stats cms\nLEFT JOIN campaign_tracking_stats cts ON cts.campaign_id = cms.id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Export_predictive_ltv_per_campaign_agg": {"database": "normalised-417010", "schema": "marketing", "name": "Export_predictive_ltv_per_campaign_agg", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/4H/normalised/Export_predictive_ltv_per_campaign_agg.sql", "original_file_path": "models/schedule/hourly/4H/normalised/Export_predictive_ltv_per_campaign_agg.sql", "unique_id": "model.warehouse.Export_predictive_ltv_per_campaign_agg", "fqn": ["warehouse", "schedule", "hourly", "4H", "normalised", "Export_predictive_ltv_per_campaign_agg"], "alias": "Export_predictive_ltv_per_campaign_agg", "checksum": {"name": "sha256", "checksum": "918bebd7b5490e010e4a91f2652355906fe0c388ff8cf3001c622b6fcc178436"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "partition_by": {"data_type": "date", "field": "first_date_campaign"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "database": "normalised-417010", "partition_by": {"data_type": "date", "field": "first_date_campaign"}}, "created_at": 1759995464.655423, "relation_name": "`normalised-417010`.`marketing`.`Export_predictive_ltv_per_campaign_agg`", "raw_code": "{{\n  config(\n    materialized='table',\n    partition_by={\n      \"field\": \"first_date_campaign\",\n      \"data_type\": \"date\"\n    }\n  )\n}}\n\n\n\n\n\n-- LTV moyenne par mois d\u2019ouverture (calendrier FR) en utilisant first_date_campaign comme date d\u2019observation\nWITH ltv AS (\n  SELECT\n    Session_campaign___GA4__Google_Analytics AS campaign,\n    first_date_campaign,\n    -- conversion robuste vers DATE si la colonne est STRING/TIMESTAMP\n    COALESCE(\n      SAFE_CAST(first_date_campaign AS DATE),\n      DATE(SAFE_CAST(first_date_campaign AS TIMESTAMP))\n    ) AS observation_date,\n    predicted_ltv\n  FROM `normalised-417010.marketing.Export_predictive_ltv_per_campaign`\n  -- WHERE  Session_campaign___GA4__Google_Analytics = 'ACQUISITION BOX summer Choose ton sac CHURNEVER'\n),\n\nopenings AS (\n  SELECT\n    DATE(shipping_Date) AS opening_date,\n    LEAD(DATE(shipping_Date)) OVER (ORDER BY DATE(shipping_Date)) AS next_opening_date\n  FROM `teamdata-291012.inter.boxes`\n  WHERE dw_country_code = 'FR'\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY DATE(shipping_Date)) = 1  -- d\u00e9duplique les dates\n),\n\nbinned AS (\n  SELECT\n    l.campaign,\n    l.first_date_campaign,\n    l.predicted_ltv,\n    o.opening_date\n  FROM ltv l\n  JOIN openings o\n    ON l.observation_date >= o.opening_date\n   AND (o.next_opening_date IS NULL OR l.observation_date < o.next_opening_date)\n)\n\nSELECT\n  campaign,\n  DATE_TRUNC(opening_date, MONTH) AS month,     -- agr\u00e9gation au mois d\u2019ouverture\n  MIN(first_date_campaign)        AS first_date_campaign,  -- info de r\u00e9f\u00e9rence\n  AVG(predicted_ltv)              AS average_ltv                   \nFROM binned\ngroup by all", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/4H/normalised/Export_predictive_ltv_per_campaign_agg.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n-- LTV moyenne par mois d\u2019ouverture (calendrier FR) en utilisant first_date_campaign comme date d\u2019observation\nWITH ltv AS (\n  SELECT\n    Session_campaign___GA4__Google_Analytics AS campaign,\n    first_date_campaign,\n    -- conversion robuste vers DATE si la colonne est STRING/TIMESTAMP\n    COALESCE(\n      SAFE_CAST(first_date_campaign AS DATE),\n      DATE(SAFE_CAST(first_date_campaign AS TIMESTAMP))\n    ) AS observation_date,\n    predicted_ltv\n  FROM `normalised-417010.marketing.Export_predictive_ltv_per_campaign`\n  -- WHERE  Session_campaign___GA4__Google_Analytics = 'ACQUISITION BOX summer Choose ton sac CHURNEVER'\n),\n\nopenings AS (\n  SELECT\n    DATE(shipping_Date) AS opening_date,\n    LEAD(DATE(shipping_Date)) OVER (ORDER BY DATE(shipping_Date)) AS next_opening_date\n  FROM `teamdata-291012.inter.boxes`\n  WHERE dw_country_code = 'FR'\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY DATE(shipping_Date)) = 1  -- d\u00e9duplique les dates\n),\n\nbinned AS (\n  SELECT\n    l.campaign,\n    l.first_date_campaign,\n    l.predicted_ltv,\n    o.opening_date\n  FROM ltv l\n  JOIN openings o\n    ON l.observation_date >= o.opening_date\n   AND (o.next_opening_date IS NULL OR l.observation_date < o.next_opening_date)\n)\n\nSELECT\n  campaign,\n  DATE_TRUNC(opening_date, MONTH) AS month,     -- agr\u00e9gation au mois d\u2019ouverture\n  MIN(first_date_campaign)        AS first_date_campaign,  -- info de r\u00e9f\u00e9rence\n  AVG(predicted_ltv)              AS average_ltv                   \nFROM binned\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.pnl2": {"database": "teamdata-291012", "schema": "pnl", "name": "pnl2", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/30mn/teamdata/pnl2.sql", "original_file_path": "models/schedule/hourly/30mn/teamdata/pnl2.sql", "unique_id": "model.warehouse.pnl2", "fqn": ["warehouse", "schedule", "hourly", "30mn", "teamdata", "pnl2"], "alias": "pnl2", "checksum": {"name": "sha256", "checksum": "1996a2fc8f766d8fa32a42275616006c72dfd2247a7044ef9898568b48232793"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.65681, "relation_name": "`teamdata-291012`.`pnl`.`pnl2`", "raw_code": "WITH \n\n-- For work orders repartition \nsales as \n(\n  SELECT bs.dw_country_code, CAST(bs.date AS STRING) AS sku, 'BOX' AS product_codification, count(*) as qty\n  FROM {{ ref('box_sales') }} bs\n  WHERE 1=1\n  AND bs.payment_status = 'paid'\n  AND bs.box_id >= 112\n  GROUP BY bs.dw_country_code, bs.date\n\n  UNION ALL\n\n  SELECT ss.dw_country_code, c.sku, ss.product_codification, SUM(ss.quantity) AS qty \n  FROM {{ ref('shop_sales') }} as ss\n  JOIN {{ ref('catalog') }} c ON c.product_id = ss.product_id AND c.dw_country_code = ss.dw_country_code\n  WHERE ss.product_codification IN ('LTE', 'SPLENDIST', 'CALENDAR')\n  AND ss.order_date >= '2021-01-01'\n  GROUP BY ss.dw_country_code, ss.product_codification, c.sku\n),\n\ntotal_sales AS\n(\n  SELECT sku, sales.product_codification, SUM(qty) AS qty\n  FROM sales \n  GROUP BY sku, sales.product_codification\n),\n\nbox_produced as \n( \n  SELECT EXTRACT ( year  FROM p.start_date ) as year , \n  EXTRACT ( month FROM p.start_date) as month, \n  p.project_type as product_codification,\n  CASE WHEN p.project_type = 'BOX' THEN CAST(start_date AS STRING) ELSE wo.kit_sku END as sku,\n    SUM(wo.produced_quantity) AS produced_quantity\n  FROM catalog.work_orders_materialized wo\n  JOIN catalog.projects_materialized p ON p.project_full_name = wo.project_full_name\n  GROUP BY p.start_date, p.project_type, sku\n),\nrepart_qty AS\n(\n  SELECT bp.year, bp.month, bp.sku, COALESCE(sales.dw_country_code, 'FR') AS country,bp.product_codification, bp.produced_quantity, sales.qty, total_sales.qty,\n  ROUND(bp.produced_quantity* SAFE_DIVIDE(COALESCE(sales.qty,1), COALESCE(total_sales.qty,1)),0) AS qty_repart\n  FROM box_produced bp\n  LEFT JOIN sales ON sales.sku = bp.sku\n  LEFT JOIN total_sales ON total_sales.sku = sales.sku\n)\n\n-- sales online\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'GROSS REVENUE' as type, product_codification,  SUM(gross_revenue) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1 \n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- sales online - quantities\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, LOWER(CONCAT('qty-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  SUM(quantity) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n --  AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_status <> 'refund'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- cash Giftcards sold\nSELECT ss.dw_country_code, ss.year, ss.month, ss.store_code AS store, LOWER(CONCAT('cash-ht-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  SUM(net_revenue) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1 \nAND product_codification = 'GIFT' \nAND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification, ss.store_code\n\nUNION ALL\n\nSELECT ss.dw_country_code, ss.year, ss.month, ss.store_code AS store, LOWER(CONCAT('cash-ttc-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  SUM(net_revenue*(1+vat_rate/100)) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1 \nAND product_codification = 'GIFT'\nAND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type,\n ss.year, ss.month, product_codification, ss.store_code\n\nUNION ALL\n\n-- sales online - nb orders\n(SELECT ss.dw_country_code, ss.year, ss.month, 'METRIC' AS store, LOWER(CONCAT('orders-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  count(distinct ss.order_id) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n AND (  \n   product_codification NOT IN ('GIFT', 'LOYALTY COUPON') \n   OR (product_codification = 'GIFT' AND gift_card_type = 'PHYSICAL') \n     )\nAND ss.store_code <> 'Store'\nAND ss.order_status <> 'refund'\nAND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- nb orders for shipping and  cost\nSELECT dw_country_code,\n       year,\n       month, \n       'ONLINE',\n       'COGS LOG NB ORDERS',\n       CASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       count(*) AS nb_orders\nFROM {{ ref('shop_orders_margin') }}\nGROUP BY dw_country_code, year, month, product_codification\n\n\nUNION ALL\n\n-- sales store\n(SELECT ss.dw_country_code, ss.year, ss.month, 'Store Paris' AS store, 'GROSS REVENUE' as type, 'ALL',   SUM(gross_revenue) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code = 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month)\n\nUNION ALL\n\n--all discounts online\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'DISCOUNT' as type, product_codification,  SUM(total_discount) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- points discount online\nSELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'POINTS DISCOUNT' as type, product_codification,  SUM(points_discount) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification\n\nUNION ALL\n\n-- all discounts Store\n(SELECT ss.dw_country_code, ss.year, ss.month, 'Store Paris' AS store, 'DISCOUNT' as type, 'ALL',   SUM(total_discount) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code = 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month)\n\nUNION ALL\n\n-- shipping shop\n(\n  SELECT dw_country_code, year, month, 'ONLINE' AS store, 'SHIPPING SHOP' as type, 'ALL', SUM(order_total_shipping) as value\n  FROM (\n SELECT ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping\n  FROM {{ ref('shop_sales') }} ss\n  WHERE 1=1\n  AND ss.order_date >= '2021-01-01'\n  GROUP BY  ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping\n) t\n  GROUP BY dw_country_code, year, month\n)\n\nUNION ALL\n\n-- shipping shop -- NEW repartition pas utilis\u00e9e)\n(\n  SELECT dw_country_code, year, month, 'ONLINE' AS store, 'SHIPPING SHOP' as type, \n  CASE WHEN codification = 0 THEN 'ESHOP'\n     WHEN codification = 1 THEN 'ESHOP'\n     WHEN codification = 2 THEN 'LTE'\n     WHEN codification = 8 THEN 'SPLENDIST'\n     WHEN codification = 13 THEN 'CALENDAR'\n     ELSE 'ESHOP' END AS product_codification, \n  SUM(order_total_shipping) as value\n  FROM (\n SELECT ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping,\n    MAX(CASE \n           WHEN ss.product_codification = 'BYOB' THEN 1\n           WHEN ss.product_codification = 'LTE' THEN 2\n           WHEN ss.product_codification = 'SPLENDIST' THEN 8\n           WHEN ss.product_codification = 'CALENDAR' THEN 13\n           ELSE 0 END) AS codification\n  FROM {{ ref('shop_sales') }} ss\n  WHERE 1=1\n  AND ss.order_date >= '2021-01-01'\n  GROUP BY ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping\n) t\n  GROUP BY dw_country_code, year, month, product_codification\n)\n\n\n\nUNION ALL\n\n-- boxes shipped\n(SELECT bs.dw_country_code, bs.year, bs.month, 'METRIC' as store, LOWER(CONCAT('box-sold-', bs.dw_country_code)) as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, count(*) as value\nFROM {{ ref('box_sales') }} bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift)\n\nUNION ALL\n\n-- free boxes\n(SELECT bs.dw_country_code, bs.year, bs.month, 'METRIC' as store, LOWER(CONCAT('box-free-', bs.dw_country_code)) as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, count(*) as value\nFROM {{ ref('box_sales') }} bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.sub_payment_status_id = 8\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift)\n\nUNION ALL\n\n--boxes reexp\nSELECT bs.dw_country_code, bs.year, bs.month, 'METRIC' as store,  LOWER(CONCAT('box-reexp-', bs.dw_country_code)) as type, 'ALL' AS product_codification, count(distinct bs.sub_id) AS value\nFROM {{ ref('tags') }} ta\nJOIN {{ ref('box_sales') }} bs ON bs.sub_id = ta.link_id AND ta.type = 'SUB' AND ta.dw_country_code = bs.dw_country_code\nWHERE 1=1\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n\n\n\n-- All work orders (production of boxes, LTE, Splendist, Calendar) By country using sales for repartition\nSELECT country, year, month, 'METRIC' AS store, CONCAT(LOWER(product_codification),'-produced-', LOWER(country)) AS type, product_codification, SUM(qty_repart) AS value\nFROM repart_qty\nGROUP BY country, year, month, product_codification\n\n\nUNION ALL\n-- boxes dailies\n\n\nSELECT b.dw_country_code, extract(year from b.date) AS y, extract(month from b.date) as m, 'ONLINE' as store, 'NB DAILIES' AS type, 'ALL' AS product_codification, COUNT(DISTINCT ah.sub_id) AS value\nFROM {{ ref('allocation_history') }} ah\nJOIN {{ ref('order_detail_sub') }} s ON s.id = ah.sub_id AND s.dw_country_code = ah.dw_country_code\nJOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nWHERE ah.allocation_method = 'BATCH_ALLOCATION_DAILY'\nAND ah.date_alloc >= '2020-12-01'\nGROUP BY b.dw_country_code, y, m\n\n\nUNION ALL\n\n-- KPI box\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquis-new-new-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM {{ ref('box_sales') }}\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND acquis_status_lvl2 = 'NEW NEW'\nAND diff_current_box <= 0\nGROUP BY ALL\n\nUNION ALL\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquis-reactivation-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM {{ ref('box_sales') }}\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND acquis_status_lvl2 = 'REACTIVATION'\nAND diff_current_box <= 0\nGROUP BY ALL\n\n\nUNION ALL\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquis-gift-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM {{ ref('box_sales') }}\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND acquis_status_lvl2 = 'GIFT'\nAND diff_current_box <= 0\nGROUP BY ALL\n\nUNION ALL\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquisition-box-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM {{ ref('box_sales') }}\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND diff_current_box <= 0\nGROUP BY ALL\n\nUNION ALL\n\nSELECT dw_country_code, extract(year from next_month_date) as y, extract(month from next_month_date) as m, 'METRIC', \nconcat('churn-nb-',LOWER(dw_country_code)) as cat,\n'BOX',\nSUM(CASE WHEN bs.next_month_status = 'CHURN' THEN 1 ELSE 0 END) AS churn_nb\nFROM {{ ref('box_sales') }} as bs\nWHERE bs.diff_current_box <= 1\nGROUP BY dw_country_code, next_month_date\n\nUNION ALL\n\nSELECT dw_country_code, extract(year from next_month_date) as y, extract(month from next_month_date) as m, 'METRIC', \nconcat('churn-rate-',LOWER(dw_country_code)) as cat,\n'BOX',\nSUM(CASE WHEN bs.next_month_status = 'CHURN' THEN 1 ELSE 0 END)/count(*) AS churn_rate\nFROM {{ ref('box_sales') }} as bs\nWHERE bs.diff_current_box <= 1\nGROUP BY dw_country_code, next_month_date\n\n\nUNION ALL\n\n-- boxes gross revenue\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE' as store, 'BOXES GROSS REVENUE' as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, SUM(bs.total_product/(1+vat_rate/100))  as value\nFROM {{ ref('box_sales') }} bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift\n\nUNION ALL\n\n-- boxes discount\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE' as store, 'BOXES DISCOUNT' as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, SUM(bs.total_discount / (1+vat_rate/100))  as value\nFROM {{ ref('box_sales') }} bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift\n\n\nUNION ALL\n\n-- boxes shipping\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE' as store, 'SHIPPING BOX' as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, SUM(bs.total_shipping/(1+vat_rate/100))  as value\nFROM {{ ref('box_sales') }} bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift\n\nUNION ALL\n\n-- product_cost online\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'PRODUCT COSTS' as type, product_codification,  SUM(ss.euro_purchase_price*ss.quantity) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n-- AND ss.year >= 2020\n AND product_codification NOT IN ('GIFT', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_status <> 'refund'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- product_cost store Paris\n(SELECT ss.dw_country_code, ss.year, ss.month, 'Store Paris' AS store, 'PRODUCT COSTS' as type, product_codification,  SUM(ss.euro_purchase_price*ss.quantity) as value\nFROM {{ ref('shop_sales') }} ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code = 'Store'\n  AND ss.order_status <> 'refund'\n  AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- product_cost of shop reexp\nSELECT  dw_country_code, year, month, NULL AS store, 'REEXP - Products cost', product_codification, SUM(products_cost) AS costs\nFROM ops.shop_shipments\nWHERE first_reexp = 'reexp'\nAND year >= 2020\nGROUP BY dw_country_code, year, month, product_codification\n\nUNION ALL\n\n-- shipping cost of shop reexp\nSELECT  dw_country_code, year, month, NULL AS store, 'REEXP - Shipping cost', product_codification, SUM(shipping_cost) AS costs\nFROM ops.shop_shipments\nWHERE first_reexp = 'reexp'\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- picking cost of shop reexp\nSELECT  dw_country_code, year, month, NULL AS store, 'REEXP - Picking cost', product_codification, SUM(picking_cost) AS costs\nFROM ops.shop_shipments\nWHERE first_reexp = 'reexp'\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- product_cost of box reexp\nSELECT  dw_country_code, extract(year from shipping_date) as year, extract(month from shipping_date) as month, NULL AS store, concat(first_reexp,' - Products cost'), 'BOX', SUM(product_cost) AS costs\nFROM ops.box_shipments\nWHERE first_reexp IN ('reexp', 'reexp_mini')\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- shipping cost of box reexp\nSELECT  dw_country_code, extract(year from shipping_date) as year, extract(month from shipping_date) as month, NULL AS store, concat(first_reexp,' - Shipping cost'), 'BOX', SUM(shipping_cost) AS costs\nFROM ops.box_shipments\nWHERE first_reexp IN ('reexp', 'reexp_mini')\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- picking cost of box reexp\nSELECT  dw_country_code, extract(year from shipping_date) as year, extract(month from shipping_date) as month, NULL AS store, concat(first_reexp,' - Picking cost'), 'BOX', SUM(picking_cost) AS costs\nFROM ops.box_shipments\nWHERE first_reexp IN ('reexp', 'reexp_mini')\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- box shipped but refunded\nSELECT dw_country_code, extract(year from date) as year, extract(month from date) as month,NULL, 'REFUND BOX - Products cost','BOX', SUM(euro_purchase_price) AS box_cost\nFROM (\nSELECT bon.dw_country_code,s.id, b.date,  MAX(iic.euro_purchase_price) AS euro_purchase_price\nFROM {{ ref('b2c_order_notifications') }} bon\nJOIN {{ ref('order_detail_sub') }} s ON s.id = bon.sub_id AND s.dw_country_code = bon.dw_country_code\nJOIN {{ ref('products') }} p ON p.box_id = s.box_id AND p.coffret_id = s.coffret_id AND p.dw_country_code = s.dw_country_code\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = p.sku \nJOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN {{ ref('box_sales') }} bs ON bs.sub_id = bon.sub_id AND bon.dw_country_code = bs.dw_country_code\nWHERE bon.type = 5\nAND bon.sub_id > 0\nAND bon.reference NOT LIKE '%REEXP%'\nAND bs.sub_id IS NULL\nAND s.shipping_status_id = 8\nAND s.box_id >= 112\nGROUP BY ALL\n) t\nGROUP BY ALL\n\nUNION ALL\n\n\n-- Depreciation of product costs\nSELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'REVERSAL OF DEPRECIATION' as type, product_codification,  \nSUM((COALESCE(ss.euro_purchase_price, dd.purchase_price_before)-dd.purchase_price_depreciated)*ss.quantity) as value\nFROM {{ ref('shop_sales') }} ss\nJOIN {{ ref('catalog') }} c ON c.product_id = ss.product_id AND c.dw_country_code = ss.dw_country_code\nJOIN `ops.depreciation_detail` dd ON dd.sku = c.sku \nWHERE 1=1\nAND ss.order_date >= dd.date_start\n AND product_codification NOT IN ('GIFT', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_status <> 'refund'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification\n\nUNION ALL\n\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'REVERSAL OF DEPRECIATION', 'BOX', SUM((COALESCE(c.euro_purchase_price,dd.purchase_price_before)-dd.purchase_price_depreciated)*kl.quantity) as value\nFROM {{ ref('kit_links') }} kl\nJOIN {{ ref('products') }} p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN {{ ref('catalog') }} as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN {{ ref('boxes') }} b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN {{ ref('box_sales') }} bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nJOIN `ops.depreciation_detail` dd ON dd.sku = c.sku AND b.date >= dd.date_start\nWHERE 1=1\nAND c.product_codification_id = 30\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n-- opex & cogs (REAL)\n-- TODO : FRANCE ONLY\n/*\nSELECT \"FR\", extract(year FROM o.month) AS year,\n       extract(month FROM o.month) AS m,\n       'ONLINE',\n       o.type || ' - ' || CASE WHEN o.category = 'Packaging' THEN o.description ELSE o.category END AS type1,\n       CASE WHEN o.type = 'OPEX' OR o.product IS NULL THEN 'ALL' ELSE o.product END AS product_codification,\n       SUM(o.cost) AS value\nFROM bdd_prod_fr.da_cogs_total o\nWHERE o.description NOT LIKE '%Empty%box%'\nGROUP BY year, m, product_codification, type1\n\n\n UNION ALL\n*/\n\n-- avg shop order weight\n SELECT dw_country_code, year, month, NULL AS store, CONCAT(LOWER(product_codification),'-avg_order_weight-', LOWER(dw_country_code)), product_codification, avg(order_weight)\nFROM ops.shop_shipments\nGROUP BY dw_country_code, year, month, product_codification\n\nUNION ALL\n\n-- COGS shipping (theoretical)\nSELECT dw_country_code,\n       year,\n       month, \n       'ONLINE',\n       'COGS - SHIPPING COST',\n       CASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       SUM(shipping_cost) AS shipping_cost\nFROM {{ ref('shop_orders_margin') }}\nGROUP BY dw_country_code, year, month, product_codification\n\n\nUNION ALL\n\n-- COGS Picking Shop (theoretical)\nSELECT \n      dw_country_code,\n      year, \n       month, \n       'ONLINE',\n       'COGS - PICKING THEORICAL' as type,\n       CASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       SUM(order_picking) AS picking_cost\nFROM {{ ref('shop_orders_margin') }}\nGROUP BY dw_country_code, year, month, product_codification\n\nUNION ALL\n-- COGS Coop - from the MM save Pipe -- without acquisition box \nSELECT dw_country_code, extract(year from date) as y, extract(month from date) as m,  NULL, \nconcat('coop-save-pipe-wout_acquisbox-',LOWER(dw_country_code)) AS type, NULL, save_pipe_coop AS value\nFROM allocation.campaign_recap\nWHERE LOWER(project_name) NOT LIKE '%acqui%'\n\nUNION ALL\n\n-- COGS Coop - from the MM save Pipe --  acquisition box only\nSELECT dw_country_code, extract(year from date) as y, extract(month from date) as m,  NULL, \nconcat('coop-save-pipe-acquisbox-only-',LOWER(dw_country_code)) AS type, NULL, save_pipe_coop AS value\nFROM allocation.campaign_recap\nWHERE LOWER(project_name) LIKE '%acqui%'\n\nUNION ALL\n\n-- COGS Coop - from the MM save Pipe -- TOTAL with acquisition box \nSELECT dw_country_code, extract(year from date) as y, extract(month from date) as m,  NULL, \nconcat('coop-save-pipe-total-',LOWER(dw_country_code)) AS type, NULL, SAFE_DIVIDE(SUM(SAFE_DIVIDE(TOTAL_Sourced_Volume,nb_products_by_box)*save_pipe_coop),SUM(SAFE_DIVIDE(TOTAL_Sourced_Volume,nb_products_by_box))) AS value\nFROM allocation.campaign_recap\nGROUP BY dw_country_code, y, m\n\nUNION ALL\n\n-- COGS Coop - products cost for the box\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - Product cost', 'BOX', SUM(c.euro_purchase_price*kl.quantity) as total_purchase_prices\nFROM {{ ref('kit_links') }} kl\nJOIN {{ ref('products') }} p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN {{ ref('catalog') }} as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN {{ ref('boxes') }} b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN {{ ref('box_sales') }} bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.product_codification_id = 30\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\n\nUNION ALL\n\n-- COGS  - TOTAL products cost for the box - REEXP - coop + assembly + shipper + box included\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - TOTAL Product cost', 'BOX REEXP', SUM(COALESCE(c.euro_purchase_price,0)) as total_purchase_prices\nFROM {{ ref('box_sales') }} bs \nJOIN {{ ref('tags') }} t ON t.link_id = bs.sub_id AND t.dw_country_code = bs.dw_country_code AND t.type = 'SUB' AND t.value = 'reexp'\nJOIN {{ ref('products') }} p ON p.box_id = bs.box_id AND p.coffret_id = bs.coffret_id AND p.dw_country_code = bs.dw_country_code \nJOIN {{ ref('catalog') }} c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.sku NOT LIKE '%MENU%'\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n-- COGS Shipper - shipper cost for the box\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - Shipper estimated', 'BOX', SUM(c.euro_purchase_price*kl.quantity) as total_purchase_prices\nFROM {{ ref('kit_links') }} kl\nJOIN {{ ref('products') }} p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN {{ ref('catalog') }} as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN {{ ref('boxes') }} b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN {{ ref('box_sales') }} bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.product_codification_id = 33\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n-- COGS Empty Box -  Empty Box cost for the box\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - Empty boxes', 'BOX', SUM(c.euro_purchase_price*kl.quantity) as total_purchase_prices\nFROM {{ ref('kit_links') }} kl\nJOIN {{ ref('products') }} p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN {{ ref('catalog') }} as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN {{ ref('boxes') }} b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN {{ ref('box_sales') }} bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.product_codification_id = 31\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\n\nUNION ALL\n\n-- picking box theorical\nSELECT bs.dw_country_code,extract(year from bs.box_date), extract(month from bs.box_date), NULL, 'COGS - Picking BOX', bs.mono_multi, \nSUM(bs.picking_cost) AS picking_cost\n\nFROM ops.box_shipments bs\n\nGROUP BY bs.dw_country_code, bs.box_date, bs.mono_multi\n\nUNION ALL\n\n-- shipping box theorical\nSELECT bs.dw_country_code,extract(year from bs.box_date), extract(month from bs.box_date), NULL, 'COGS - shipping BOX', bs.first_reexp AS type,\nSUM(bs.shipping_cost) AS shipping_cost\n\nFROM ops.box_shipments bs\n\nGROUP BY bs.dw_country_code, bs.box_date, bs.first_reexp\n\nUNION ALL\n---- unit COGS BOX -----------\n\nSELECT bs.dw_country_code, bs.year, bs.month, bs.dw_country_code, \nconcat('unit-cogs-box-',CASE WHEN iic.logistic_category = 'product' THEN 'coop' WHEN logistic_category = 'consumable item' THEN 'shipper' ELSE iic.logistic_category END,'-',LOWER(bs.dw_country_code)), \nCONCAT('box-', CASE WHEN iic.logistic_category = 'product' THEN 'coop' WHEN logistic_category = 'consumable item' THEN 'shipper' ELSE iic.logistic_category END), \nSAFE_DIVIDE(SUM(iic.euro_purchase_price), COUNT(DISTINCT bs.sub_id)) as value\nFROM {{ ref('kit_details') }} kd\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = kd.component_sku\nJOIN {{ ref('box_sales') }} bs ON bs.box_id = kd.box_id AND bs.coffret_id = kd.coffret_id AND bs.dw_country_code = kd.dw_country_code\nWHERE 1=1\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, iic.logistic_category\n\n\n\nUNION ALL\n\n-- all exceptions (the source is in the P&L Live document)\n\nSELECT e.country_code, e.year, e.month, e.store, e.type, e.product_codification, e.value\nFROM `pnl.exceptions` e\n\nUNION ALL\n/*\n-- Box shipping details on a specific month -- TO DELETE WHEN NEXT QUERY IS OK\nSELECT s.dw_country_code,  \nextract(year from bon.event_date) as y,\nextract(month from bon.event_date) as m,\nCASE WHEN bon.reference LIKE '%REEXP-SUB%' THEN 'REEXP' ELSE 'SUB' END AS cat,\nCASE WHEN bon.reference LIKE '%REEXP-SUB%' THEN 'REEXP' \nELSE\n    CASE WHEN FORMAT_DATE('%Y-%m-%d',b.date) < FORMAT_DATE('%Y-%m-01',bon.event_date) THEN 'shipping M-1'\n         WHEN FORMAT_DATE('%Y-%m-%d',b.date) = FORMAT_DATE('%Y-%m-01',bon.event_date) THEN 'shipping M'\n         WHEN FORMAT_DATE('%Y-%m-%d',b.date) > FORMAT_DATE('%Y-%m-01',bon.event_date) THEN 'shipping M+1'\n    ELSE 'OTHER' \n    END\nEND AS cat2,\n'BOX' AS cat3,\ncount(*) AS value\nFROM {{ ref('b2c_order_notifications') }} bon\nJOIN {{ ref('order_detail_sub') }} s ON s.id = bon.sub_id AND s.dw_country_code = bon.dw_country_code\nJOIN {{ ref('boxes') }} b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nWHERE bon.type = 5\nAND (bon.reference LIKE '%SUB-%' OR bon.reference LIKE '%REEXP-SUB-%')\nGROUP BY s.dw_country_code, y, m, cat, cat2, cat3\n\nUNION ALL*/\n\n-- theorical box shipping details on a specific month\nSELECT bs.dw_country_code, bs.year, bs.month, NULL,first_reexp,\nconcat('box-shipping-', lower(bs.dw_country_code),'-', \nCASE \n  WHEN bs.first_reexp = 'reexp' THEN 'reexp' \n  WHEN bs.box_date < DATE_TRUNC(bs.shipping_date,month) THEN 'm-1'\n  WHEN bs.box_date = DATE_TRUNC(bs.shipping_date,month) THEN 'm'\n  WHEN bs.box_date > DATE_TRUNC(bs.shipping_date,month) THEN 'm+1'\nEND) as codif,\nSUM(bs.shipping_cost)\nFROM `teamdata-291012.ops.box_shipments` bs\nGROUP BY bs.dw_country_code, bs.year, bs.month, codif, first_reexp\n\nUNION ALL\n\n-- real invoices from invoice manager\n\nSELECT * \nFROM pnl.invoice_manager\n\nUNION ALL\n\n-- Marketing OPEX - From Grand Livre\nSELECT LEFT(analytic,2) AS country, extract(year from period) as y, extract(month from period) as m, NULL, analytic, 'GL', SUM(total) AS value\nFROM `pnl.gl_compact`\nWHERE -- analytic NOT LIKE 'FR65%'\n-- AND analytic NOT LIKE 'DE65%'\n-- AND \ncompany = 'BC'\n-- WHERE centre_analytic IN ('FR61100','FR61110','FR61120','FR61121','FR61130','FR61131','FR61140','FR61160','FR61170','DE61100','DE61110','DE61120','DE61130','DE61140','DE61150','DE61170','DE61180','ES61100','IT61100')\nGROUP BY analytic, y, m\n\nUNION ALL\n\n\n/*\nselect country,extract(year from d) year,extract(month from d)month ,'ONLINE' store,'CAC_LIVE'center,'BOX',round(sum(spent)/sum(total_this_year) ,1) as cac_LIVE\nfrom `marketing.Marketing_cac_live` \ngroup by country,year,month,store,center\n\n\n*/\n\n-- gift cards not used/expired\n  \n SELECT gc.dw_country_code, extract(year from gc.expiration_Date) AS y,extract(month from  gc.expiration_Date) AS m,\n'ONLINE', 'GIFT_CARDS_EXPIRED',\n  'BOX', \nSUM(gc.amount/(1+COALESCE(vat.taux,20)/100)) AS amount_ht\nFROM {{ ref('gift_cards') }} gc\nJOIN {{ ref('order_details') }} d ON d.id = gc.order_detail_id AND d.dw_country_code = gc.dw_country_code\nJOIN {{ ref('orders') }} o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nLEFT JOIN {{ ref('box_sales') }} as bs ON bs.dw_country_code = gc.dw_country_code AND bs.gift_card_id = gc.id\nLEFT JOIN bdd_prod_fr.wp_jb_tva_product vat ON vat.country_code = o.shipping_country  AND vat.category = 'normal'\nWHERE o.status_id IN (1,3)\nAND bs.user_id IS NULL\nAND DATE(gc.expiration_date) < current_date\nGROUP BY 1,2,3,4,5\n\n\nUNION ALL\n\n(\nSELECT \n\"0\", 0, 0, \"0\", \"CURRENT_TIMESTAMP\", \nCAST(FORMAT_TIMESTAMP('%F %T %Ez', CURRENT_TIMESTAMP(), 'Europe/Paris') as STRING), \n0\n)\n\nUNION ALL\n\n-- New marketing expenses with Funnel data\nSELECT CASE \n  WHEN Market = 'Germany' THEN 'DE' \n  WHEN Market = 'Spain' THEN 'ES'\n  WHEN Market = 'Italy' THEN 'IT'\n  ELSE 'FR' END AS country,\nextract(year from b.date) as y, \nExtract(month from b.date) AS m,\nUPPER(Campaign_type_) as store,\nUPPER(Channel) as type,\nUPPER(Product_type) as product_codification,\nSUM(cost) AS value\nFROM `teamdata-291012.funnel.funnel_data` d\ninner join inter.boxes b on d.date>=b.shipping_date AND  d.date <= b.closing_date\nAND case when market='France' then 'FR' when market='Spain' then 'ES' when market ='Germany' then 'DE'end=b.dw_country_code\nWHERE b.date >= '2023-01-01'\nGROUP BY country, y, m, store, type, product_codification\n\n\n\nUNION ALL\n\nSELECT 'FR', extract(year from month) AS y, extract(month from month) AS m, NULL AS store, 'ASILAGE', 'REVENUE', SUM(COALESCE(revenue,0))\nFROM teamdata-291012.Spreadsheet_synchro.asilage\nWHERE revenue IS NOT NULL\nGROUP BY ALL\n\nUNION ALL\n\nSELECT 'FR', extract(year from month) AS y, extract(month from month) AS m, NULL AS store, 'ASILAGE', 'COGS', SUM(COALESCE(cogs,0))\nFROM teamdata-291012.Spreadsheet_synchro.asilage\nWHERE revenue IS NOT NULL\nGROUP BY ALL", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_orders_margin", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "tags", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "allocation_history", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "b2c_order_notifications", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "shop_sales", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "kit_links", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "shop_orders_margin", "package": null, "version": null}, {"name": "shop_orders_margin", "package": null, "version": null}, {"name": "kit_links", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "tags", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "kit_links", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "kit_links", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "catalog", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "kit_details", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}, {"name": "b2c_order_notifications", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_sales", "model.warehouse.shop_sales", "model.warehouse.catalog", "model.warehouse.shop_orders_margin", "model.warehouse.tags", "model.warehouse.allocation_history", "model.warehouse.order_detail_sub", "model.warehouse.boxes", "model.warehouse.b2c_order_notifications", "model.warehouse.products", "model.warehouse.kit_links", "model.warehouse.kit_details", "model.warehouse.gift_cards", "model.warehouse.order_details", "model.warehouse.orders"]}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/30mn/teamdata/pnl2.sql", "compiled": true, "compiled_code": "WITH \n\n-- For work orders repartition \nsales as \n(\n  SELECT bs.dw_country_code, CAST(bs.date AS STRING) AS sku, 'BOX' AS product_codification, count(*) as qty\n  FROM `teamdata-291012`.`sales`.`box_sales` bs\n  WHERE 1=1\n  AND bs.payment_status = 'paid'\n  AND bs.box_id >= 112\n  GROUP BY bs.dw_country_code, bs.date\n\n  UNION ALL\n\n  SELECT ss.dw_country_code, c.sku, ss.product_codification, SUM(ss.quantity) AS qty \n  FROM `teamdata-291012`.`sales`.`shop_sales` as ss\n  JOIN `teamdata-291012`.`product`.`catalog` c ON c.product_id = ss.product_id AND c.dw_country_code = ss.dw_country_code\n  WHERE ss.product_codification IN ('LTE', 'SPLENDIST', 'CALENDAR')\n  AND ss.order_date >= '2021-01-01'\n  GROUP BY ss.dw_country_code, ss.product_codification, c.sku\n),\n\ntotal_sales AS\n(\n  SELECT sku, sales.product_codification, SUM(qty) AS qty\n  FROM sales \n  GROUP BY sku, sales.product_codification\n),\n\nbox_produced as \n( \n  SELECT EXTRACT ( year  FROM p.start_date ) as year , \n  EXTRACT ( month FROM p.start_date) as month, \n  p.project_type as product_codification,\n  CASE WHEN p.project_type = 'BOX' THEN CAST(start_date AS STRING) ELSE wo.kit_sku END as sku,\n    SUM(wo.produced_quantity) AS produced_quantity\n  FROM catalog.work_orders_materialized wo\n  JOIN catalog.projects_materialized p ON p.project_full_name = wo.project_full_name\n  GROUP BY p.start_date, p.project_type, sku\n),\nrepart_qty AS\n(\n  SELECT bp.year, bp.month, bp.sku, COALESCE(sales.dw_country_code, 'FR') AS country,bp.product_codification, bp.produced_quantity, sales.qty, total_sales.qty,\n  ROUND(bp.produced_quantity* SAFE_DIVIDE(COALESCE(sales.qty,1), COALESCE(total_sales.qty,1)),0) AS qty_repart\n  FROM box_produced bp\n  LEFT JOIN sales ON sales.sku = bp.sku\n  LEFT JOIN total_sales ON total_sales.sku = sales.sku\n)\n\n-- sales online\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'GROSS REVENUE' as type, product_codification,  SUM(gross_revenue) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1 \n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- sales online - quantities\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, LOWER(CONCAT('qty-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  SUM(quantity) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n --  AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_status <> 'refund'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- cash Giftcards sold\nSELECT ss.dw_country_code, ss.year, ss.month, ss.store_code AS store, LOWER(CONCAT('cash-ht-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  SUM(net_revenue) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1 \nAND product_codification = 'GIFT' \nAND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification, ss.store_code\n\nUNION ALL\n\nSELECT ss.dw_country_code, ss.year, ss.month, ss.store_code AS store, LOWER(CONCAT('cash-ttc-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  SUM(net_revenue*(1+vat_rate/100)) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1 \nAND product_codification = 'GIFT'\nAND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type,\n ss.year, ss.month, product_codification, ss.store_code\n\nUNION ALL\n\n-- sales online - nb orders\n(SELECT ss.dw_country_code, ss.year, ss.month, 'METRIC' AS store, LOWER(CONCAT('orders-',ss.dw_country_code,'-',product_codification)) as type, product_codification,  count(distinct ss.order_id) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n AND (  \n   product_codification NOT IN ('GIFT', 'LOYALTY COUPON') \n   OR (product_codification = 'GIFT' AND gift_card_type = 'PHYSICAL') \n     )\nAND ss.store_code <> 'Store'\nAND ss.order_status <> 'refund'\nAND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- nb orders for shipping and  cost\nSELECT dw_country_code,\n       year,\n       month, \n       'ONLINE',\n       'COGS LOG NB ORDERS',\n       CASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       count(*) AS nb_orders\nFROM `teamdata-291012`.`sales`.`shop_orders_margin`\nGROUP BY dw_country_code, year, month, product_codification\n\n\nUNION ALL\n\n-- sales store\n(SELECT ss.dw_country_code, ss.year, ss.month, 'Store Paris' AS store, 'GROSS REVENUE' as type, 'ALL',   SUM(gross_revenue) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code = 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month)\n\nUNION ALL\n\n--all discounts online\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'DISCOUNT' as type, product_codification,  SUM(total_discount) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- points discount online\nSELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'POINTS DISCOUNT' as type, product_codification,  SUM(points_discount) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification\n\nUNION ALL\n\n-- all discounts Store\n(SELECT ss.dw_country_code, ss.year, ss.month, 'Store Paris' AS store, 'DISCOUNT' as type, 'ALL',   SUM(total_discount) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code = 'Store'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month)\n\nUNION ALL\n\n-- shipping shop\n(\n  SELECT dw_country_code, year, month, 'ONLINE' AS store, 'SHIPPING SHOP' as type, 'ALL', SUM(order_total_shipping) as value\n  FROM (\n SELECT ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping\n  FROM `teamdata-291012`.`sales`.`shop_sales` ss\n  WHERE 1=1\n  AND ss.order_date >= '2021-01-01'\n  GROUP BY  ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping\n) t\n  GROUP BY dw_country_code, year, month\n)\n\nUNION ALL\n\n-- shipping shop -- NEW repartition pas utilis\u00e9e)\n(\n  SELECT dw_country_code, year, month, 'ONLINE' AS store, 'SHIPPING SHOP' as type, \n  CASE WHEN codification = 0 THEN 'ESHOP'\n     WHEN codification = 1 THEN 'ESHOP'\n     WHEN codification = 2 THEN 'LTE'\n     WHEN codification = 8 THEN 'SPLENDIST'\n     WHEN codification = 13 THEN 'CALENDAR'\n     ELSE 'ESHOP' END AS product_codification, \n  SUM(order_total_shipping) as value\n  FROM (\n SELECT ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping,\n    MAX(CASE \n           WHEN ss.product_codification = 'BYOB' THEN 1\n           WHEN ss.product_codification = 'LTE' THEN 2\n           WHEN ss.product_codification = 'SPLENDIST' THEN 8\n           WHEN ss.product_codification = 'CALENDAR' THEN 13\n           ELSE 0 END) AS codification\n  FROM `teamdata-291012`.`sales`.`shop_sales` ss\n  WHERE 1=1\n  AND ss.order_date >= '2021-01-01'\n  GROUP BY ss.dw_country_code, ss.year, ss.month, order_id, order_total_shipping\n) t\n  GROUP BY dw_country_code, year, month, product_codification\n)\n\n\n\nUNION ALL\n\n-- boxes shipped\n(SELECT bs.dw_country_code, bs.year, bs.month, 'METRIC' as store, LOWER(CONCAT('box-sold-', bs.dw_country_code)) as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, count(*) as value\nFROM `teamdata-291012`.`sales`.`box_sales` bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift)\n\nUNION ALL\n\n-- free boxes\n(SELECT bs.dw_country_code, bs.year, bs.month, 'METRIC' as store, LOWER(CONCAT('box-free-', bs.dw_country_code)) as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, count(*) as value\nFROM `teamdata-291012`.`sales`.`box_sales` bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.sub_payment_status_id = 8\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift)\n\nUNION ALL\n\n--boxes reexp\nSELECT bs.dw_country_code, bs.year, bs.month, 'METRIC' as store,  LOWER(CONCAT('box-reexp-', bs.dw_country_code)) as type, 'ALL' AS product_codification, count(distinct bs.sub_id) AS value\nFROM `teamdata-291012`.`inter`.`tags` ta\nJOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.sub_id = ta.link_id AND ta.type = 'SUB' AND ta.dw_country_code = bs.dw_country_code\nWHERE 1=1\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n\n\n\n-- All work orders (production of boxes, LTE, Splendist, Calendar) By country using sales for repartition\nSELECT country, year, month, 'METRIC' AS store, CONCAT(LOWER(product_codification),'-produced-', LOWER(country)) AS type, product_codification, SUM(qty_repart) AS value\nFROM repart_qty\nGROUP BY country, year, month, product_codification\n\n\nUNION ALL\n-- boxes dailies\n\n\nSELECT b.dw_country_code, extract(year from b.date) AS y, extract(month from b.date) as m, 'ONLINE' as store, 'NB DAILIES' AS type, 'ALL' AS product_codification, COUNT(DISTINCT ah.sub_id) AS value\nFROM `teamdata-291012`.`inter`.`allocation_history` ah\nJOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = ah.sub_id AND s.dw_country_code = ah.dw_country_code\nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nWHERE ah.allocation_method = 'BATCH_ALLOCATION_DAILY'\nAND ah.date_alloc >= '2020-12-01'\nGROUP BY b.dw_country_code, y, m\n\n\nUNION ALL\n\n-- KPI box\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquis-new-new-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM `teamdata-291012`.`sales`.`box_sales`\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND acquis_status_lvl2 = 'NEW NEW'\nAND diff_current_box <= 0\nGROUP BY ALL\n\nUNION ALL\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquis-reactivation-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM `teamdata-291012`.`sales`.`box_sales`\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND acquis_status_lvl2 = 'REACTIVATION'\nAND diff_current_box <= 0\nGROUP BY ALL\n\n\nUNION ALL\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquis-gift-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM `teamdata-291012`.`sales`.`box_sales`\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND acquis_status_lvl2 = 'GIFT'\nAND diff_current_box <= 0\nGROUP BY ALL\n\nUNION ALL\n\nSELECT dw_country_code, year, month, 'METRIC',\nconcat('acquisition-box-',LOWER(dw_country_code)) as cat,\n'BOX',\ncount(*)\nFROM `teamdata-291012`.`sales`.`box_sales`\nWHERE acquis_status_lvl1 = 'ACQUISITION'\nAND diff_current_box <= 0\nGROUP BY ALL\n\nUNION ALL\n\nSELECT dw_country_code, extract(year from next_month_date) as y, extract(month from next_month_date) as m, 'METRIC', \nconcat('churn-nb-',LOWER(dw_country_code)) as cat,\n'BOX',\nSUM(CASE WHEN bs.next_month_status = 'CHURN' THEN 1 ELSE 0 END) AS churn_nb\nFROM `teamdata-291012`.`sales`.`box_sales` as bs\nWHERE bs.diff_current_box <= 1\nGROUP BY dw_country_code, next_month_date\n\nUNION ALL\n\nSELECT dw_country_code, extract(year from next_month_date) as y, extract(month from next_month_date) as m, 'METRIC', \nconcat('churn-rate-',LOWER(dw_country_code)) as cat,\n'BOX',\nSUM(CASE WHEN bs.next_month_status = 'CHURN' THEN 1 ELSE 0 END)/count(*) AS churn_rate\nFROM `teamdata-291012`.`sales`.`box_sales` as bs\nWHERE bs.diff_current_box <= 1\nGROUP BY dw_country_code, next_month_date\n\n\nUNION ALL\n\n-- boxes gross revenue\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE' as store, 'BOXES GROSS REVENUE' as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, SUM(bs.total_product/(1+vat_rate/100))  as value\nFROM `teamdata-291012`.`sales`.`box_sales` bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift\n\nUNION ALL\n\n-- boxes discount\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE' as store, 'BOXES DISCOUNT' as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, SUM(bs.total_discount / (1+vat_rate/100))  as value\nFROM `teamdata-291012`.`sales`.`box_sales` bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift\n\n\nUNION ALL\n\n-- boxes shipping\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE' as store, 'SHIPPING BOX' as type, CASE WHEN bs.gift = 1 THEN 'GIFTCARD ACTIVATED' ELSE 'SELF' END AS product_codification, SUM(bs.total_shipping/(1+vat_rate/100))  as value\nFROM `teamdata-291012`.`sales`.`box_sales` bs\nWHERE 1=1\n AND bs.payment_status = 'paid'\n AND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, bs.gift\n\nUNION ALL\n\n-- product_cost online\n(SELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'PRODUCT COSTS' as type, product_codification,  SUM(ss.euro_purchase_price*ss.quantity) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n-- AND ss.year >= 2020\n AND product_codification NOT IN ('GIFT', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_status <> 'refund'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- product_cost store Paris\n(SELECT ss.dw_country_code, ss.year, ss.month, 'Store Paris' AS store, 'PRODUCT COSTS' as type, product_codification,  SUM(ss.euro_purchase_price*ss.quantity) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nWHERE 1=1\n AND product_codification NOT IN ('GIFT','LOYALTY', 'LOYALTY COUPON')\n AND ss.store_code = 'Store'\n  AND ss.order_status <> 'refund'\n  AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification)\n\nUNION ALL\n\n-- product_cost of shop reexp\nSELECT  dw_country_code, year, month, NULL AS store, 'REEXP - Products cost', product_codification, SUM(products_cost) AS costs\nFROM ops.shop_shipments\nWHERE first_reexp = 'reexp'\nAND year >= 2020\nGROUP BY dw_country_code, year, month, product_codification\n\nUNION ALL\n\n-- shipping cost of shop reexp\nSELECT  dw_country_code, year, month, NULL AS store, 'REEXP - Shipping cost', product_codification, SUM(shipping_cost) AS costs\nFROM ops.shop_shipments\nWHERE first_reexp = 'reexp'\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- picking cost of shop reexp\nSELECT  dw_country_code, year, month, NULL AS store, 'REEXP - Picking cost', product_codification, SUM(picking_cost) AS costs\nFROM ops.shop_shipments\nWHERE first_reexp = 'reexp'\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- product_cost of box reexp\nSELECT  dw_country_code, extract(year from shipping_date) as year, extract(month from shipping_date) as month, NULL AS store, concat(first_reexp,' - Products cost'), 'BOX', SUM(product_cost) AS costs\nFROM ops.box_shipments\nWHERE first_reexp IN ('reexp', 'reexp_mini')\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- shipping cost of box reexp\nSELECT  dw_country_code, extract(year from shipping_date) as year, extract(month from shipping_date) as month, NULL AS store, concat(first_reexp,' - Shipping cost'), 'BOX', SUM(shipping_cost) AS costs\nFROM ops.box_shipments\nWHERE first_reexp IN ('reexp', 'reexp_mini')\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- picking cost of box reexp\nSELECT  dw_country_code, extract(year from shipping_date) as year, extract(month from shipping_date) as month, NULL AS store, concat(first_reexp,' - Picking cost'), 'BOX', SUM(picking_cost) AS costs\nFROM ops.box_shipments\nWHERE first_reexp IN ('reexp', 'reexp_mini')\nAND year >= 2020\nGROUP BY all\n\nUNION ALL\n\n-- box shipped but refunded\nSELECT dw_country_code, extract(year from date) as year, extract(month from date) as month,NULL, 'REFUND BOX - Products cost','BOX', SUM(euro_purchase_price) AS box_cost\nFROM (\nSELECT bon.dw_country_code,s.id, b.date,  MAX(iic.euro_purchase_price) AS euro_purchase_price\nFROM `teamdata-291012`.`inter`.`b2c_order_notifications` bon\nJOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = bon.sub_id AND s.dw_country_code = bon.dw_country_code\nJOIN `teamdata-291012`.`inter`.`products` p ON p.box_id = s.box_id AND p.coffret_id = s.coffret_id AND p.dw_country_code = s.dw_country_code\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = p.sku \nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.sub_id = bon.sub_id AND bon.dw_country_code = bs.dw_country_code\nWHERE bon.type = 5\nAND bon.sub_id > 0\nAND bon.reference NOT LIKE '%REEXP%'\nAND bs.sub_id IS NULL\nAND s.shipping_status_id = 8\nAND s.box_id >= 112\nGROUP BY ALL\n) t\nGROUP BY ALL\n\nUNION ALL\n\n\n-- Depreciation of product costs\nSELECT ss.dw_country_code, ss.year, ss.month, 'ONLINE' AS store, 'REVERSAL OF DEPRECIATION' as type, product_codification,  \nSUM((COALESCE(ss.euro_purchase_price, dd.purchase_price_before)-dd.purchase_price_depreciated)*ss.quantity) as value\nFROM `teamdata-291012`.`sales`.`shop_sales` ss\nJOIN `teamdata-291012`.`product`.`catalog` c ON c.product_id = ss.product_id AND c.dw_country_code = ss.dw_country_code\nJOIN `ops.depreciation_detail` dd ON dd.sku = c.sku \nWHERE 1=1\nAND ss.order_date >= dd.date_start\n AND product_codification NOT IN ('GIFT', 'LOYALTY COUPON')\n AND ss.store_code <> 'Store'\n AND ss.order_status <> 'refund'\n AND ss.order_date >= '2021-01-01'\nGROUP BY ss.dw_country_code, type, ss.year, ss.month, product_codification\n\nUNION ALL\n\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'REVERSAL OF DEPRECIATION', 'BOX', SUM((COALESCE(c.euro_purchase_price,dd.purchase_price_before)-dd.purchase_price_depreciated)*kl.quantity) as value\nFROM `teamdata-291012`.`inter`.`kit_links` kl\nJOIN `teamdata-291012`.`inter`.`products` p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN `teamdata-291012`.`product`.`catalog` as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nJOIN `ops.depreciation_detail` dd ON dd.sku = c.sku AND b.date >= dd.date_start\nWHERE 1=1\nAND c.product_codification_id = 30\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n-- opex & cogs (REAL)\n-- TODO : FRANCE ONLY\n/*\nSELECT \"FR\", extract(year FROM o.month) AS year,\n       extract(month FROM o.month) AS m,\n       'ONLINE',\n       o.type || ' - ' || CASE WHEN o.category = 'Packaging' THEN o.description ELSE o.category END AS type1,\n       CASE WHEN o.type = 'OPEX' OR o.product IS NULL THEN 'ALL' ELSE o.product END AS product_codification,\n       SUM(o.cost) AS value\nFROM bdd_prod_fr.da_cogs_total o\nWHERE o.description NOT LIKE '%Empty%box%'\nGROUP BY year, m, product_codification, type1\n\n\n UNION ALL\n*/\n\n-- avg shop order weight\n SELECT dw_country_code, year, month, NULL AS store, CONCAT(LOWER(product_codification),'-avg_order_weight-', LOWER(dw_country_code)), product_codification, avg(order_weight)\nFROM ops.shop_shipments\nGROUP BY dw_country_code, year, month, product_codification\n\nUNION ALL\n\n-- COGS shipping (theoretical)\nSELECT dw_country_code,\n       year,\n       month, \n       'ONLINE',\n       'COGS - SHIPPING COST',\n       CASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       SUM(shipping_cost) AS shipping_cost\nFROM `teamdata-291012`.`sales`.`shop_orders_margin`\nGROUP BY dw_country_code, year, month, product_codification\n\n\nUNION ALL\n\n-- COGS Picking Shop (theoretical)\nSELECT \n      dw_country_code,\n      year, \n       month, \n       'ONLINE',\n       'COGS - PICKING THEORICAL' as type,\n       CASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       SUM(order_picking) AS picking_cost\nFROM `teamdata-291012`.`sales`.`shop_orders_margin`\nGROUP BY dw_country_code, year, month, product_codification\n\nUNION ALL\n-- COGS Coop - from the MM save Pipe -- without acquisition box \nSELECT dw_country_code, extract(year from date) as y, extract(month from date) as m,  NULL, \nconcat('coop-save-pipe-wout_acquisbox-',LOWER(dw_country_code)) AS type, NULL, save_pipe_coop AS value\nFROM allocation.campaign_recap\nWHERE LOWER(project_name) NOT LIKE '%acqui%'\n\nUNION ALL\n\n-- COGS Coop - from the MM save Pipe --  acquisition box only\nSELECT dw_country_code, extract(year from date) as y, extract(month from date) as m,  NULL, \nconcat('coop-save-pipe-acquisbox-only-',LOWER(dw_country_code)) AS type, NULL, save_pipe_coop AS value\nFROM allocation.campaign_recap\nWHERE LOWER(project_name) LIKE '%acqui%'\n\nUNION ALL\n\n-- COGS Coop - from the MM save Pipe -- TOTAL with acquisition box \nSELECT dw_country_code, extract(year from date) as y, extract(month from date) as m,  NULL, \nconcat('coop-save-pipe-total-',LOWER(dw_country_code)) AS type, NULL, SAFE_DIVIDE(SUM(SAFE_DIVIDE(TOTAL_Sourced_Volume,nb_products_by_box)*save_pipe_coop),SUM(SAFE_DIVIDE(TOTAL_Sourced_Volume,nb_products_by_box))) AS value\nFROM allocation.campaign_recap\nGROUP BY dw_country_code, y, m\n\nUNION ALL\n\n-- COGS Coop - products cost for the box\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - Product cost', 'BOX', SUM(c.euro_purchase_price*kl.quantity) as total_purchase_prices\nFROM `teamdata-291012`.`inter`.`kit_links` kl\nJOIN `teamdata-291012`.`inter`.`products` p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN `teamdata-291012`.`product`.`catalog` as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.product_codification_id = 30\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\n\nUNION ALL\n\n-- COGS  - TOTAL products cost for the box - REEXP - coop + assembly + shipper + box included\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - TOTAL Product cost', 'BOX REEXP', SUM(COALESCE(c.euro_purchase_price,0)) as total_purchase_prices\nFROM `teamdata-291012`.`sales`.`box_sales` bs \nJOIN `teamdata-291012`.`inter`.`tags` t ON t.link_id = bs.sub_id AND t.dw_country_code = bs.dw_country_code AND t.type = 'SUB' AND t.value = 'reexp'\nJOIN `teamdata-291012`.`inter`.`products` p ON p.box_id = bs.box_id AND p.coffret_id = bs.coffret_id AND p.dw_country_code = bs.dw_country_code \nJOIN `teamdata-291012`.`product`.`catalog` c ON c.product_id = p.id AND c.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.sku NOT LIKE '%MENU%'\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n-- COGS Shipper - shipper cost for the box\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - Shipper estimated', 'BOX', SUM(c.euro_purchase_price*kl.quantity) as total_purchase_prices\nFROM `teamdata-291012`.`inter`.`kit_links` kl\nJOIN `teamdata-291012`.`inter`.`products` p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN `teamdata-291012`.`product`.`catalog` as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.product_codification_id = 33\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\nUNION ALL\n\n-- COGS Empty Box -  Empty Box cost for the box\nSELECT bs.dw_country_code, bs.year, bs.month, 'ONLINE', 'COGS - Empty boxes', 'BOX', SUM(c.euro_purchase_price*kl.quantity) as total_purchase_prices\nFROM `teamdata-291012`.`inter`.`kit_links` kl\nJOIN `teamdata-291012`.`inter`.`products` p ON p.id = kl.kit_id AND p.dw_country_code = kl.dw_country_code\nJOIN `teamdata-291012`.`product`.`catalog` as c ON c.product_id = kl.product_id AND c.dw_country_code = kl.dw_country_code \nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\nJOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.box_id = p.box_id AND bs.coffret_id = p.coffret_id AND bs.dw_country_code = p.dw_country_code\nWHERE 1=1\nAND c.product_codification_id = 31\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month\n\n\nUNION ALL\n\n-- picking box theorical\nSELECT bs.dw_country_code,extract(year from bs.box_date), extract(month from bs.box_date), NULL, 'COGS - Picking BOX', bs.mono_multi, \nSUM(bs.picking_cost) AS picking_cost\n\nFROM ops.box_shipments bs\n\nGROUP BY bs.dw_country_code, bs.box_date, bs.mono_multi\n\nUNION ALL\n\n-- shipping box theorical\nSELECT bs.dw_country_code,extract(year from bs.box_date), extract(month from bs.box_date), NULL, 'COGS - shipping BOX', bs.first_reexp AS type,\nSUM(bs.shipping_cost) AS shipping_cost\n\nFROM ops.box_shipments bs\n\nGROUP BY bs.dw_country_code, bs.box_date, bs.first_reexp\n\nUNION ALL\n---- unit COGS BOX -----------\n\nSELECT bs.dw_country_code, bs.year, bs.month, bs.dw_country_code, \nconcat('unit-cogs-box-',CASE WHEN iic.logistic_category = 'product' THEN 'coop' WHEN logistic_category = 'consumable item' THEN 'shipper' ELSE iic.logistic_category END,'-',LOWER(bs.dw_country_code)), \nCONCAT('box-', CASE WHEN iic.logistic_category = 'product' THEN 'coop' WHEN logistic_category = 'consumable item' THEN 'shipper' ELSE iic.logistic_category END), \nSAFE_DIVIDE(SUM(iic.euro_purchase_price), COUNT(DISTINCT bs.sub_id)) as value\nFROM `teamdata-291012`.`product`.`kit_details` kd\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = kd.component_sku\nJOIN `teamdata-291012`.`sales`.`box_sales` bs ON bs.box_id = kd.box_id AND bs.coffret_id = kd.coffret_id AND bs.dw_country_code = kd.dw_country_code\nWHERE 1=1\nAND bs.box_id >= 112\nGROUP BY bs.dw_country_code, bs.year, bs.month, iic.logistic_category\n\n\n\nUNION ALL\n\n-- all exceptions (the source is in the P&L Live document)\n\nSELECT e.country_code, e.year, e.month, e.store, e.type, e.product_codification, e.value\nFROM `pnl.exceptions` e\n\nUNION ALL\n/*\n-- Box shipping details on a specific month -- TO DELETE WHEN NEXT QUERY IS OK\nSELECT s.dw_country_code,  \nextract(year from bon.event_date) as y,\nextract(month from bon.event_date) as m,\nCASE WHEN bon.reference LIKE '%REEXP-SUB%' THEN 'REEXP' ELSE 'SUB' END AS cat,\nCASE WHEN bon.reference LIKE '%REEXP-SUB%' THEN 'REEXP' \nELSE\n    CASE WHEN FORMAT_DATE('%Y-%m-%d',b.date) < FORMAT_DATE('%Y-%m-01',bon.event_date) THEN 'shipping M-1'\n         WHEN FORMAT_DATE('%Y-%m-%d',b.date) = FORMAT_DATE('%Y-%m-01',bon.event_date) THEN 'shipping M'\n         WHEN FORMAT_DATE('%Y-%m-%d',b.date) > FORMAT_DATE('%Y-%m-01',bon.event_date) THEN 'shipping M+1'\n    ELSE 'OTHER' \n    END\nEND AS cat2,\n'BOX' AS cat3,\ncount(*) AS value\nFROM `teamdata-291012`.`inter`.`b2c_order_notifications` bon\nJOIN `teamdata-291012`.`inter`.`order_detail_sub` s ON s.id = bon.sub_id AND s.dw_country_code = bon.dw_country_code\nJOIN `teamdata-291012`.`inter`.`boxes` b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nWHERE bon.type = 5\nAND (bon.reference LIKE '%SUB-%' OR bon.reference LIKE '%REEXP-SUB-%')\nGROUP BY s.dw_country_code, y, m, cat, cat2, cat3\n\nUNION ALL*/\n\n-- theorical box shipping details on a specific month\nSELECT bs.dw_country_code, bs.year, bs.month, NULL,first_reexp,\nconcat('box-shipping-', lower(bs.dw_country_code),'-', \nCASE \n  WHEN bs.first_reexp = 'reexp' THEN 'reexp' \n  WHEN bs.box_date < DATE_TRUNC(bs.shipping_date,month) THEN 'm-1'\n  WHEN bs.box_date = DATE_TRUNC(bs.shipping_date,month) THEN 'm'\n  WHEN bs.box_date > DATE_TRUNC(bs.shipping_date,month) THEN 'm+1'\nEND) as codif,\nSUM(bs.shipping_cost)\nFROM `teamdata-291012.ops.box_shipments` bs\nGROUP BY bs.dw_country_code, bs.year, bs.month, codif, first_reexp\n\nUNION ALL\n\n-- real invoices from invoice manager\n\nSELECT * \nFROM pnl.invoice_manager\n\nUNION ALL\n\n-- Marketing OPEX - From Grand Livre\nSELECT LEFT(analytic,2) AS country, extract(year from period) as y, extract(month from period) as m, NULL, analytic, 'GL', SUM(total) AS value\nFROM `pnl.gl_compact`\nWHERE -- analytic NOT LIKE 'FR65%'\n-- AND analytic NOT LIKE 'DE65%'\n-- AND \ncompany = 'BC'\n-- WHERE centre_analytic IN ('FR61100','FR61110','FR61120','FR61121','FR61130','FR61131','FR61140','FR61160','FR61170','DE61100','DE61110','DE61120','DE61130','DE61140','DE61150','DE61170','DE61180','ES61100','IT61100')\nGROUP BY analytic, y, m\n\nUNION ALL\n\n\n/*\nselect country,extract(year from d) year,extract(month from d)month ,'ONLINE' store,'CAC_LIVE'center,'BOX',round(sum(spent)/sum(total_this_year) ,1) as cac_LIVE\nfrom `marketing.Marketing_cac_live` \ngroup by country,year,month,store,center\n\n\n*/\n\n-- gift cards not used/expired\n  \n SELECT gc.dw_country_code, extract(year from gc.expiration_Date) AS y,extract(month from  gc.expiration_Date) AS m,\n'ONLINE', 'GIFT_CARDS_EXPIRED',\n  'BOX', \nSUM(gc.amount/(1+COALESCE(vat.taux,20)/100)) AS amount_ht\nFROM `teamdata-291012`.`inter`.`gift_cards` gc\nJOIN `teamdata-291012`.`inter`.`order_details` d ON d.id = gc.order_detail_id AND d.dw_country_code = gc.dw_country_code\nJOIN `teamdata-291012`.`inter`.`orders` o ON o.id = d.order_id AND o.dw_country_code = d.dw_country_code\nLEFT JOIN `teamdata-291012`.`sales`.`box_sales` as bs ON bs.dw_country_code = gc.dw_country_code AND bs.gift_card_id = gc.id\nLEFT JOIN bdd_prod_fr.wp_jb_tva_product vat ON vat.country_code = o.shipping_country  AND vat.category = 'normal'\nWHERE o.status_id IN (1,3)\nAND bs.user_id IS NULL\nAND DATE(gc.expiration_date) < current_date\nGROUP BY 1,2,3,4,5\n\n\nUNION ALL\n\n(\nSELECT \n\"0\", 0, 0, \"0\", \"CURRENT_TIMESTAMP\", \nCAST(FORMAT_TIMESTAMP('%F %T %Ez', CURRENT_TIMESTAMP(), 'Europe/Paris') as STRING), \n0\n)\n\nUNION ALL\n\n-- New marketing expenses with Funnel data\nSELECT CASE \n  WHEN Market = 'Germany' THEN 'DE' \n  WHEN Market = 'Spain' THEN 'ES'\n  WHEN Market = 'Italy' THEN 'IT'\n  ELSE 'FR' END AS country,\nextract(year from b.date) as y, \nExtract(month from b.date) AS m,\nUPPER(Campaign_type_) as store,\nUPPER(Channel) as type,\nUPPER(Product_type) as product_codification,\nSUM(cost) AS value\nFROM `teamdata-291012.funnel.funnel_data` d\ninner join inter.boxes b on d.date>=b.shipping_date AND  d.date <= b.closing_date\nAND case when market='France' then 'FR' when market='Spain' then 'ES' when market ='Germany' then 'DE'end=b.dw_country_code\nWHERE b.date >= '2023-01-01'\nGROUP BY country, y, m, store, type, product_codification\n\n\n\nUNION ALL\n\nSELECT 'FR', extract(year from month) AS y, extract(month from month) AS m, NULL AS store, 'ASILAGE', 'REVENUE', SUM(COALESCE(revenue,0))\nFROM teamdata-291012.Spreadsheet_synchro.asilage\nWHERE revenue IS NOT NULL\nGROUP BY ALL\n\nUNION ALL\n\nSELECT 'FR', extract(year from month) AS y, extract(month from month) AS m, NULL AS store, 'ASILAGE', 'COGS', SUM(COALESCE(cogs,0))\nFROM teamdata-291012.Spreadsheet_synchro.asilage\nWHERE revenue IS NOT NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.fraude_yearly": {"database": "teamdata-291012", "schema": "prod_fr", "name": "fraude_yearly", "resource_type": "model", "package_name": "warehouse", "path": "schedule/hourly/30mn/teamdata/fraude_yearly.sql", "original_file_path": "models/schedule/hourly/30mn/teamdata/fraude_yearly.sql", "unique_id": "model.warehouse.fraude_yearly", "fqn": ["warehouse", "schedule", "hourly", "30mn", "teamdata", "fraude_yearly"], "alias": "fraude_yearly", "checksum": {"name": "sha256", "checksum": "2db6e1b90fa2b3860b511bff9d1de42ad689daa4dfa7d618b0d7214f6044cc72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["order_id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "incremental", "teamdata": null, "unique_key": ["order_id"], "incremental_strategy": "merge", "on_schema_change": "sync_all_columns"}, "created_at": 1759995464.659374, "relation_name": "`teamdata-291012`.`prod_fr`.`fraude_yearly`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    unique_key=['order_id'],\n    incremental_strategy='merge',\n    on_schema_change='sync_all_columns'\n  )\n}}\n\nwith histo as (\n  select\n    concat (string_agg( distinct lastname limit 5),' _ ', string_agg( distinct firstname limit 5)) as lastname,\n    max(order_id) as fraud_order,\n    billing_zipcode,\n    string_agg(email limit 5) as histo_email,\n    count(distinct sub_id) as nb,\n    lower(regexp_replace(billing_adress, r'[^a-zA-Z0-9]', '')) as billing_adress\n  from {{ ref('box_sales') }} bs\n  inner join user.customers using(user_key)\n  where coupon = 'YEARLY' \n    and next_month_status = 'CHURN'\n    and date_diff(current_date, payment_date, day) > 3\n  group by billing_zipcode, billing_adress\n),\n\nmain as (\n  select \n    bs.dw_country_code,\n    bs.order_id,\n    fraud_order,\n    histo.lastname as fraud_lastname,\n    c.lastname,\n    email,\n    c.billing_zipcode,\n    c.billing_city,\n    histo_email,\n    bs.payment_date,\n    count(distinct bs.sub_id) as nb,\n    histo.nb as histo_fraude,\n    histo.billing_adress as fraude_connu_adress,\n    c.billing_adress,\n    lower(regexp_replace(c.billing_adress, r'[^a-zA-Z0-9]', '')) as clean_adress,\n    lower(regexp_replace(histo.billing_adress, r'[^a-zA-Z0-9]', '')) as clean_histo_adress\n  from {{ ref('box_sales') }} bs\n  inner join user.customers c using(user_key)\n  left join histo using(billing_zipcode)\n  where coupon = 'YEARLY'\n    {% if is_incremental() %}\n    -- Dans le mode incr\u00e9mental, traiter les commandes des 2 derniers jours\n    and date_diff(current_date, bs.payment_date, day) <= 2\n    and (bs.payment_date > (select max(payment_date) from {{ this }}) or bs.order_id not in (select order_id from {{ this }}))\n    {% else %}\n    -- Dans le mode full refresh, ne prendre que les donn\u00e9es des 2 derniers jours\n    and date_diff(current_date, payment_date, day) <= 2\n    {% endif %}\n  group by ALL\n),\n\nsuspicious_orders as (\n  select \n    order_id,\n    max(fraud_order) as fraud_order,\n    fraud_lastname,\n    lastname,\n    email,\n    histo_email,\n    billing_city,\n    payment_date,\n    sum(nb) as nb,\n    sum(histo_fraude) as histo_fraude,\n    clean_adress,\n    clean_histo_adress,\n    case \n      when clean_adress like concat('%', clean_histo_adress, '%')\n        or clean_histo_adress like concat('%', clean_adress, '%')\n      then 'SUSPECT_ADRESS_SIMILAR'\n      when histo_fraude is not null then 'SUSPECT_ZIP_ONLY'\n      else 'OK'\n    end as suspicion,\n    functions.trigram_similarity(clean_adress, clean_histo_adress) as similarity_score,\n    CONCAT('https://back.blissim.', LOWER(main.dw_country_code), '/wp-admin/admin.php?page=jb-orders&order_id=', order_id) as order_url,\n    -- Ajouter un classement par similarit\u00e9 pour chaque order_id\n    row_number() over (partition by order_id order by functions.trigram_similarity(clean_adress, clean_histo_adress) desc) as similarity_rank\n  from main\n  where 1=1\n  group by all\n  having suspicion = 'SUSPECT_ADRESS_SIMILAR' or \n     functions.trigram_similarity(clean_adress, clean_histo_adress) > 0.6\n)\n\n-- S\u00e9lectionner uniquement la ligne avec le meilleur score de similarit\u00e9 pour chaque commande\nselect\n  order_id,\n  current_Datetime() date,\n  fraud_order,\n  fraud_lastname,\n  lastname,\n  email,\n  histo_email,\n  billing_city,\n  payment_date,\n  max(similarity_rank) nb,\n   histo_fraude,\n  clean_adress,\n  clean_histo_adress,\n  suspicion,\n  similarity_score,\n  order_url\nfrom suspicious_orders\nwhere similarity_rank = 1\ngroup by all\norder by payment_date desc", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}, {"name": "box_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.warehouse.box_sales"]}, "compiled_path": "target/compiled/warehouse/models/schedule/hourly/30mn/teamdata/fraude_yearly.sql", "compiled": true, "compiled_code": "\n\nwith histo as (\n  select\n    concat (string_agg( distinct lastname limit 5),' _ ', string_agg( distinct firstname limit 5)) as lastname,\n    max(order_id) as fraud_order,\n    billing_zipcode,\n    string_agg(email limit 5) as histo_email,\n    count(distinct sub_id) as nb,\n    lower(regexp_replace(billing_adress, r'[^a-zA-Z0-9]', '')) as billing_adress\n  from `teamdata-291012`.`sales`.`box_sales` bs\n  inner join user.customers using(user_key)\n  where coupon = 'YEARLY' \n    and next_month_status = 'CHURN'\n    and date_diff(current_date, payment_date, day) > 3\n  group by billing_zipcode, billing_adress\n),\n\nmain as (\n  select \n    bs.dw_country_code,\n    bs.order_id,\n    fraud_order,\n    histo.lastname as fraud_lastname,\n    c.lastname,\n    email,\n    c.billing_zipcode,\n    c.billing_city,\n    histo_email,\n    bs.payment_date,\n    count(distinct bs.sub_id) as nb,\n    histo.nb as histo_fraude,\n    histo.billing_adress as fraude_connu_adress,\n    c.billing_adress,\n    lower(regexp_replace(c.billing_adress, r'[^a-zA-Z0-9]', '')) as clean_adress,\n    lower(regexp_replace(histo.billing_adress, r'[^a-zA-Z0-9]', '')) as clean_histo_adress\n  from `teamdata-291012`.`sales`.`box_sales` bs\n  inner join user.customers c using(user_key)\n  left join histo using(billing_zipcode)\n  where coupon = 'YEARLY'\n    \n    -- Dans le mode incr\u00e9mental, traiter les commandes des 2 derniers jours\n    and date_diff(current_date, bs.payment_date, day) <= 2\n    and (bs.payment_date > (select max(payment_date) from `teamdata-291012`.`prod_fr`.`fraude_yearly`) or bs.order_id not in (select order_id from `teamdata-291012`.`prod_fr`.`fraude_yearly`))\n    \n  group by ALL\n),\n\nsuspicious_orders as (\n  select \n    order_id,\n    max(fraud_order) as fraud_order,\n    fraud_lastname,\n    lastname,\n    email,\n    histo_email,\n    billing_city,\n    payment_date,\n    sum(nb) as nb,\n    sum(histo_fraude) as histo_fraude,\n    clean_adress,\n    clean_histo_adress,\n    case \n      when clean_adress like concat('%', clean_histo_adress, '%')\n        or clean_histo_adress like concat('%', clean_adress, '%')\n      then 'SUSPECT_ADRESS_SIMILAR'\n      when histo_fraude is not null then 'SUSPECT_ZIP_ONLY'\n      else 'OK'\n    end as suspicion,\n    functions.trigram_similarity(clean_adress, clean_histo_adress) as similarity_score,\n    CONCAT('https://back.blissim.', LOWER(main.dw_country_code), '/wp-admin/admin.php?page=jb-orders&order_id=', order_id) as order_url,\n    -- Ajouter un classement par similarit\u00e9 pour chaque order_id\n    row_number() over (partition by order_id order by functions.trigram_similarity(clean_adress, clean_histo_adress) desc) as similarity_rank\n  from main\n  where 1=1\n  group by all\n  having suspicion = 'SUSPECT_ADRESS_SIMILAR' or \n     functions.trigram_similarity(clean_adress, clean_histo_adress) > 0.6\n)\n\n-- S\u00e9lectionner uniquement la ligne avec le meilleur score de similarit\u00e9 pour chaque commande\nselect\n  order_id,\n  current_Datetime() date,\n  fraud_order,\n  fraud_lastname,\n  lastname,\n  email,\n  histo_email,\n  billing_city,\n  payment_date,\n  max(similarity_rank) nb,\n   histo_fraude,\n  clean_adress,\n  clean_histo_adress,\n  suspicion,\n  similarity_score,\n  order_url\nfrom suspicious_orders\nwhere similarity_rank = 1\ngroup by all\norder by payment_date desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.sra_test": {"database": "teamdata-291012", "schema": "prod_fr", "name": "sra_test", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/test/sra_test.sql", "original_file_path": "models/schedule/daily/test/sra_test.sql", "unique_id": "model.warehouse.sra_test", "fqn": ["warehouse", "schedule", "daily", "test", "sra_test"], "alias": "sra_test", "checksum": {"name": "sha256", "checksum": "0be947eb8e9d38fc9fb0eb3fd797f7b5e306052a5575a63f7cc42818e6ab8803"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'FR' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.bdd_prod_fr_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)", "transaction": true, "index": null}, {"sql": "DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'DE' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.prod_de_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)", "transaction": true, "index": null}, {"sql": "DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'ES' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.bdd_prod_es_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)", "transaction": true, "index": null}, {"sql": "DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'IT' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.bdd_prod_it_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "post-hook": ["DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'FR' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.bdd_prod_fr_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)", "DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'DE' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.prod_de_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)", "DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'ES' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.bdd_prod_es_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)", "DELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = 'IT' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.bdd_prod_it_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)"]}, "created_at": 1759995464.663549, "relation_name": "`teamdata-291012`.`prod_fr`.`sra_test`", "raw_code": "{%- set countries = var('survey_countries') -%}\n\n{%- set delete_hooks = [] -%}\n{%- for country in countries -%}\n  {%- set delete_sql -%}\nDELETE FROM `teamdata-291012.prod_fr.sra_test` \nWHERE dw_country_code = '{{ country.code }}' AND (id) IN (\n  SELECT CAST(JSON_EXTRACT_SCALAR(_airbyte_data, '$.id') AS INT64)\n  FROM `teamdata-291012.airbyte_internal.{{ country.dataset }}_raw__stream_wp_jb_survey_result_answers`\n  WHERE JSON_EXTRACT_SCALAR(_airbyte_data, '$._ab_cdc_deleted_at') IS NOT NULL\n    AND TIMESTAMP(_airbyte_extracted_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 HOUR)\n)\n  {%- endset -%}\n  {%- do delete_hooks.append(delete_sql) -%}\n{%- endfor -%}\n\n{{ config(\n    post_hook=delete_hooks\n) }}\n\n{%- for country in countries %}\nSELECT \n  '{{ country.code }}' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id\nFROM `teamdata-291012.{{ country.dataset }}.wp_jb_survey_result_answers`\nWHERE `_ab_cdc_deleted_at` IS NULL\n{% if is_incremental() %}\n  AND DATETIME(`_airbyte_extracted_at`) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 2 HOUR)\n{% endif %}\n{{ \"UNION ALL\" if not loop.last }}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/test/sra_test.sql", "compiled": true, "compiled_code": "\nSELECT \n  'FR' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id\nFROM `teamdata-291012.bdd_prod_fr.wp_jb_survey_result_answers`\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'DE' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id\nFROM `teamdata-291012.prod_de.wp_jb_survey_result_answers`\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'ES' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id\nFROM `teamdata-291012.bdd_prod_es.wp_jb_survey_result_answers`\nWHERE `_ab_cdc_deleted_at` IS NULL\n\nUNION ALL\nSELECT \n  'IT' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id\nFROM `teamdata-291012.bdd_prod_it.wp_jb_survey_result_answers`\nWHERE `_ab_cdc_deleted_at` IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_segments": {"database": "normalised-417010", "schema": "user", "name": "today_segments", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_segments.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_segments.sql", "unique_id": "model.warehouse.today_segments", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_segments"], "alias": "today_segments", "checksum": {"name": "sha256", "checksum": "24b6b86edf4b530d6e4a74d49ad750e5ce635136010e7cd3931710a8f5825e42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.668365, "relation_name": "`normalised-417010`.`user`.`today_segments`", "raw_code": "select distinct user_id,status\n\nfrom (\nselect distinct user_id,status\nfrom {{ref('today_stars') }}\nunion all\nselect user_id,status from {{ ref('today_whales') }}\nunion all\nselect user_id,status from {{ ref('today_middle') }}\nunion all\nselect user_id,status from {{ ref('today_new') }}\nunion all\nselect user_id,status from {{ ref('today_lost') }}\nunion all\nselect user_id,status from {{ ref('today_prospects') }}\nunion all\nselect user_id,status from {{ ref('today_inactive') }}\nunion all\nselect user_id,status from {{ ref('today_risky') }}\nunion all\nselect user_id,status from {{ ref('today_spectators') }}\n)\n\nwhere user_id is not null", "language": "sql", "refs": [{"name": "today_stars", "package": null, "version": null}, {"name": "today_whales", "package": null, "version": null}, {"name": "today_middle", "package": null, "version": null}, {"name": "today_new", "package": null, "version": null}, {"name": "today_lost", "package": null, "version": null}, {"name": "today_prospects", "package": null, "version": null}, {"name": "today_inactive", "package": null, "version": null}, {"name": "today_risky", "package": null, "version": null}, {"name": "today_spectators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_stars", "model.warehouse.today_whales", "model.warehouse.today_middle", "model.warehouse.today_new", "model.warehouse.today_lost", "model.warehouse.today_prospects", "model.warehouse.today_inactive", "model.warehouse.today_risky", "model.warehouse.today_spectators"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_segments.sql", "compiled": true, "compiled_code": "select distinct user_id,status\n\nfrom (\nselect distinct user_id,status\nfrom `normalised-417010`.`user`.`today_stars`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_whales`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_middle`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_new`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_lost`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_prospects`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_inactive`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_risky`\nunion all\nselect user_id,status from `normalised-417010`.`user`.`today_spectators`\n)\n\nwhere user_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_inactive": {"database": "normalised-417010", "schema": "user", "name": "today_inactive", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_inactive.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_inactive.sql", "unique_id": "model.warehouse.today_inactive", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_inactive"], "alias": "today_inactive", "checksum": {"name": "sha256", "checksum": "131e23f01f27bb14766928df789d7c5a802f920b322ce343457e4a509a5af42f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.670131, "relation_name": "`normalised-417010`.`user`.`today_inactive`", "raw_code": "select distinct user_id,\nlast_box_paid_date,'INACTIVE' as status,\nbox_sub_status as status_lvl1,\nlast_shop_order_date\n from teamdata-291012.user.customers \nwhere (date_diff(current_date(),last_box_paid_date,month)between 14 and 24 \nand ( \nis_shopper =false or date_diff(current_date(),last_shop_order_date,month)between 14 and 24 \n\n)\n\n )\nand box_sub_status in ('CHURN','NEVERSUB')\nand dw_country_code='FR'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_inactive.sql", "compiled": true, "compiled_code": "select distinct user_id,\nlast_box_paid_date,'INACTIVE' as status,\nbox_sub_status as status_lvl1,\nlast_shop_order_date\n from teamdata-291012.user.customers \nwhere (date_diff(current_date(),last_box_paid_date,month)between 14 and 24 \nand ( \nis_shopper =false or date_diff(current_date(),last_shop_order_date,month)between 14 and 24 \n\n)\n\n )\nand box_sub_status in ('CHURN','NEVERSUB')\nand dw_country_code='FR'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_middle": {"database": "normalised-417010", "schema": "user", "name": "today_middle", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_middle.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_middle.sql", "unique_id": "model.warehouse.today_middle", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_middle"], "alias": "today_middle", "checksum": {"name": "sha256", "checksum": "949a5a6a06b54284f80bbe7f44c99697510716d56d45a90aaac5f40b053a6341"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.671507, "relation_name": "`normalised-417010`.`user`.`today_middle`", "raw_code": "select distinct t.user_id,'middle' as status,box_sub_status as status_lvl1 \nfrom teamdata-291012.user.customers t\nleft join {{ ref('today_prospects') }} p on p.user_id=t.user_id \nleft join {{ ref('today_spectators') }} sp on sp.user_id=t.user_id \nleft join {{ ref('today_new') }} n on n.user_id=t.user_id \nleft join {{ ref('today_whales') }} w on w.user_id=t.user_id \nleft join {{ ref('today_stars') }} stars on stars.user_id=t.user_id \nleft join {{ ref('today_risky') }} ri on ri.user_id=t.user_id \nleft join {{ ref('today_inactive') }} i on i.user_id=t.user_id \nleft join {{ ref('today_lost') }} l on l.user_id=t.user_id \nwhere p.user_id is null and sp.user_id is null and n.user_id is null and w.user_id is null and stars.user_id is null and ri.user_id is null\nand i.user_id is null and l.user_id is null", "language": "sql", "refs": [{"name": "today_prospects", "package": null, "version": null}, {"name": "today_spectators", "package": null, "version": null}, {"name": "today_new", "package": null, "version": null}, {"name": "today_whales", "package": null, "version": null}, {"name": "today_stars", "package": null, "version": null}, {"name": "today_risky", "package": null, "version": null}, {"name": "today_inactive", "package": null, "version": null}, {"name": "today_lost", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_prospects", "model.warehouse.today_spectators", "model.warehouse.today_new", "model.warehouse.today_whales", "model.warehouse.today_stars", "model.warehouse.today_risky", "model.warehouse.today_inactive", "model.warehouse.today_lost"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_middle.sql", "compiled": true, "compiled_code": "select distinct t.user_id,'middle' as status,box_sub_status as status_lvl1 \nfrom teamdata-291012.user.customers t\nleft join `normalised-417010`.`user`.`today_prospects` p on p.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_spectators` sp on sp.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_new` n on n.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_whales` w on w.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_stars` stars on stars.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_risky` ri on ri.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_inactive` i on i.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_lost` l on l.user_id=t.user_id \nwhere p.user_id is null and sp.user_id is null and n.user_id is null and w.user_id is null and stars.user_id is null and ri.user_id is null\nand i.user_id is null and l.user_id is null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_stars": {"database": "normalised-417010", "schema": "user", "name": "today_stars", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_stars.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_stars.sql", "unique_id": "model.warehouse.today_stars", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_stars"], "alias": "today_stars", "checksum": {"name": "sha256", "checksum": "1a2195690c11f0b5c5d005fd678174e3858d2c8c6c1834068e80dda725445137"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.673235, "relation_name": "`normalised-417010`.`user`.`today_stars`", "raw_code": "SELECT t.user_id, \n       t.gp_tot,'STARS' as status\nFROM (\n  SELECT user_id, \n         SUM(gp) AS gp_tot\n  FROM (\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM sales.box_sales\n    WHERE diff_current_box BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n    UNION ALL\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM `teamdata-291012.sales.shop_orders_margin`\n    WHERE DATE_DIFF(CURRENT_DATE, order_date, MONTH) BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n  )\n  GROUP BY user_id\n)t\nleft join {{ ref('today_new') }} n on n.user_id=t.user_id \nleft join {{ ref('today_whales') }} w on w.user_id=t.user_id \n\nwhere n.user_id is null and w.user_id is null\nqualify NTILE(100) OVER (ORDER BY gp_tot DESC) between 5 and 30\norder by gp_tot asc", "language": "sql", "refs": [{"name": "today_new", "package": null, "version": null}, {"name": "today_whales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_new", "model.warehouse.today_whales"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_stars.sql", "compiled": true, "compiled_code": "SELECT t.user_id, \n       t.gp_tot,'STARS' as status\nFROM (\n  SELECT user_id, \n         SUM(gp) AS gp_tot\n  FROM (\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM sales.box_sales\n    WHERE diff_current_box BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n    UNION ALL\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM `teamdata-291012.sales.shop_orders_margin`\n    WHERE DATE_DIFF(CURRENT_DATE, order_date, MONTH) BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n  )\n  GROUP BY user_id\n)t\nleft join `normalised-417010`.`user`.`today_new` n on n.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_whales` w on w.user_id=t.user_id \n\nwhere n.user_id is null and w.user_id is null\nqualify NTILE(100) OVER (ORDER BY gp_tot DESC) between 5 and 30\norder by gp_tot asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_whales": {"database": "normalised-417010", "schema": "user", "name": "today_whales", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_whales.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_whales.sql", "unique_id": "model.warehouse.today_whales", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_whales"], "alias": "today_whales", "checksum": {"name": "sha256", "checksum": "c240a689346abf4c6fde27cf314f7b0b51a985aa4efccaadb88f81fcf714e04d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.6746612, "relation_name": "`normalised-417010`.`user`.`today_whales`", "raw_code": "SELECT t.user_id, \n       t.gp_tot,'WHALES' as status\nFROM (\n  SELECT user_id, \n         SUM(gp) AS gp_tot\n  FROM (\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM sales.box_sales\n    WHERE diff_current_box BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n    UNION ALL\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM `teamdata-291012.sales.shop_orders_margin`\n    WHERE DATE_DIFF(CURRENT_DATE, order_date, MONTH) BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n  )\n  GROUP BY user_id\n)t\nleft join {{ ref('today_new') }} n on n.user_id=t.user_id \nwhere n.user_id is null\n\nqualify NTILE(100) OVER (ORDER BY gp_tot DESC) between 0 and 5\norder by gp_tot asc", "language": "sql", "refs": [{"name": "today_new", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_new"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_whales.sql", "compiled": true, "compiled_code": "SELECT t.user_id, \n       t.gp_tot,'WHALES' as status\nFROM (\n  SELECT user_id, \n         SUM(gp) AS gp_tot\n  FROM (\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM sales.box_sales\n    WHERE diff_current_box BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n    UNION ALL\n    SELECT user_id, \n           SUM(gross_profit) AS gp\n    FROM `teamdata-291012.sales.shop_orders_margin`\n    WHERE DATE_DIFF(CURRENT_DATE, order_date, MONTH) BETWEEN -12 AND 0\n      AND dw_country_code = 'FR'\n    GROUP BY user_id\n  )\n  GROUP BY user_id\n)t\nleft join `normalised-417010`.`user`.`today_new` n on n.user_id=t.user_id \nwhere n.user_id is null\n\nqualify NTILE(100) OVER (ORDER BY gp_tot DESC) between 0 and 5\norder by gp_tot asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_spectators": {"database": "normalised-417010", "schema": "user", "name": "today_spectators", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_spectators.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_spectators.sql", "unique_id": "model.warehouse.today_spectators", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_spectators"], "alias": "today_spectators", "checksum": {"name": "sha256", "checksum": "0a80e3f92c5d00ac31702c0bd1a6c021d59d5a3a584bc923a0e0ffcb7257c7f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.6760309, "relation_name": "`normalised-417010`.`user`.`today_spectators`", "raw_code": "with shop_infos as (\n\nselect user_id,max(order_date) last_order_date,\nsum(case when date_diff(current_date(),order_date,month)<=12 then gross_profit end ) as gp_shop_L12M\n from `teamdata-291012.sales.shop_orders_margin`group by all\n\n)\n\n\nselect *,'SPECTATORS' as status from (\nselect dw_country_code,c.user_id,last_consecutive_box_paid, registration_date,is_shopper,min(box_id) first_box,min(date) first_date,max(case when diff_current_box <=0 and payment_status='paid' then date end ) last_box_paid_date,last_order_date,\ndate_diff(current_Date,min(date),month) nb_box_payable,\ncount(distinct case when diff_current_box <=0 and payment_status='paid' then date end )nb_box_paid,\ngp_shop_L12M\nfrom `teamdata-291012.user.customers` c\nleft join sales.box_sales s using( user_id,dw_country_code)\nleft join shop_infos using(user_id)\nleft join {{ ref('today_new') }} n on n.user_id=c.user_id \nleft join {{ ref('today_whales') }} w on w.user_id=c.user_id \nleft join {{ ref('today_stars') }} stars on stars.user_id=c.user_id \nwhere dw_country_code='FR' and n.user_id is null and w.user_id is null and stars.user_id is null\ngroup by all)\nwhere nb_box_paid >14\nand (\nsafe_divide(nb_box_paid,nb_box_payable) >0.8 \n)\nand last_box_paid_date >'2024-08-01'\nand (not is_shopper or last_order_date <'2023-01-01')", "language": "sql", "refs": [{"name": "today_new", "package": null, "version": null}, {"name": "today_whales", "package": null, "version": null}, {"name": "today_stars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_new", "model.warehouse.today_whales", "model.warehouse.today_stars"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_spectators.sql", "compiled": true, "compiled_code": "with shop_infos as (\n\nselect user_id,max(order_date) last_order_date,\nsum(case when date_diff(current_date(),order_date,month)<=12 then gross_profit end ) as gp_shop_L12M\n from `teamdata-291012.sales.shop_orders_margin`group by all\n\n)\n\n\nselect *,'SPECTATORS' as status from (\nselect dw_country_code,c.user_id,last_consecutive_box_paid, registration_date,is_shopper,min(box_id) first_box,min(date) first_date,max(case when diff_current_box <=0 and payment_status='paid' then date end ) last_box_paid_date,last_order_date,\ndate_diff(current_Date,min(date),month) nb_box_payable,\ncount(distinct case when diff_current_box <=0 and payment_status='paid' then date end )nb_box_paid,\ngp_shop_L12M\nfrom `teamdata-291012.user.customers` c\nleft join sales.box_sales s using( user_id,dw_country_code)\nleft join shop_infos using(user_id)\nleft join `normalised-417010`.`user`.`today_new` n on n.user_id=c.user_id \nleft join `normalised-417010`.`user`.`today_whales` w on w.user_id=c.user_id \nleft join `normalised-417010`.`user`.`today_stars` stars on stars.user_id=c.user_id \nwhere dw_country_code='FR' and n.user_id is null and w.user_id is null and stars.user_id is null\ngroup by all)\nwhere nb_box_paid >14\nand (\nsafe_divide(nb_box_paid,nb_box_payable) >0.8 \n)\nand last_box_paid_date >'2024-08-01'\nand (not is_shopper or last_order_date <'2023-01-01')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_new": {"database": "normalised-417010", "schema": "user", "name": "today_new", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_new.Sql", "original_file_path": "models/schedule/daily/5am/normalised/today_new.Sql", "unique_id": "model.warehouse.today_new", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_new"], "alias": "today_new", "checksum": {"name": "sha256", "checksum": "afa4849102d8d1e8d46846ec686f5c13aad6c43e6c76bf2b9360c39f5455263a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.6775758, "relation_name": "`normalised-417010`.`user`.`today_new`", "raw_code": "select cat as status_lvl1,user_id, 'NEW' as status\nfrom (\n\nselect  distinct 'box_new_new' as cat,user_id,min(date)  from sales.box_sales\nwhere date_diff(current_date(),date,month)<3\nand acquis_status_lvl2='NEW NEW'\nand dw_country_code='FR'and diff_current_box<=0\ngroup by all\nunion all\n\n/*\nselect distinct 'shop_new',user_id,min(order_date) from sales.shop_sales ss\ninner join shop using(user_id,dw_country_code)\nwhere date_diff(current_date(),first_achat,day)<=60\ngroup by all\n\nunion all\n*/\nselect  distinct 'box_old_new_new',user_id,min(date) \nfrom sales.box_sales\nwhere date_diff(current_date(),date,month)<3\nand acquis_status_lvl1='ACQUISITION'\nand date_diff(date,last_box_received_date,month)>=15 and diff_current_box<=0\nand dw_country_code='FR'\ngroup by all\n)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_new.Sql", "compiled": true, "compiled_code": "select cat as status_lvl1,user_id, 'NEW' as status\nfrom (\n\nselect  distinct 'box_new_new' as cat,user_id,min(date)  from sales.box_sales\nwhere date_diff(current_date(),date,month)<3\nand acquis_status_lvl2='NEW NEW'\nand dw_country_code='FR'and diff_current_box<=0\ngroup by all\nunion all\n\n/*\nselect distinct 'shop_new',user_id,min(order_date) from sales.shop_sales ss\ninner join shop using(user_id,dw_country_code)\nwhere date_diff(current_date(),first_achat,day)<=60\ngroup by all\n\nunion all\n*/\nselect  distinct 'box_old_new_new',user_id,min(date) \nfrom sales.box_sales\nwhere date_diff(current_date(),date,month)<3\nand acquis_status_lvl1='ACQUISITION'\nand date_diff(date,last_box_received_date,month)>=15 and diff_current_box<=0\nand dw_country_code='FR'\ngroup by all\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_prospects": {"database": "normalised-417010", "schema": "user", "name": "today_prospects", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_prospects.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_prospects.sql", "unique_id": "model.warehouse.today_prospects", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_prospects"], "alias": "today_prospects", "checksum": {"name": "sha256", "checksum": "d0258dcaec0907766f72d0f9ccbd36b1733744c138e4dfe4ce5c1dc36123c041"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.678974, "relation_name": "`normalised-417010`.`user`.`today_prospects`", "raw_code": "select distinct c.user_id,\nlast_box_paid_date,last_shop_order_date,\nbox_sub_status as status_lvl1,\n'PROSPECTS' as status\n from teamdata-291012.user.customers c\n left join {{ ref('today_new') }} n on n.user_id=c.user_id \nwhere (date_diff(current_date(),last_box_paid_date,month) >36 \nor\nlast_box_paid_date is null) and (\n date_diff(current_date(),last_shop_order_date,month) >36 \nor last_shop_order_date is null\n )\nand box_sub_status in ('CHURN','NEVERSUB')\n\nand dw_country_code='FR'\nand n.user_id is null", "language": "sql", "refs": [{"name": "today_new", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_new"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_prospects.sql", "compiled": true, "compiled_code": "select distinct c.user_id,\nlast_box_paid_date,last_shop_order_date,\nbox_sub_status as status_lvl1,\n'PROSPECTS' as status\n from teamdata-291012.user.customers c\n left join `normalised-417010`.`user`.`today_new` n on n.user_id=c.user_id \nwhere (date_diff(current_date(),last_box_paid_date,month) >36 \nor\nlast_box_paid_date is null) and (\n date_diff(current_date(),last_shop_order_date,month) >36 \nor last_shop_order_date is null\n )\nand box_sub_status in ('CHURN','NEVERSUB')\n\nand dw_country_code='FR'\nand n.user_id is null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_lost": {"database": "normalised-417010", "schema": "user", "name": "today_lost", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_lost.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_lost.sql", "unique_id": "model.warehouse.today_lost", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_lost"], "alias": "today_lost", "checksum": {"name": "sha256", "checksum": "459c3742c8a7a8e08aa57e9177eba0ba701010bbd881174b5e22b366913d70fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.6804538, "relation_name": "`normalised-417010`.`user`.`today_lost`", "raw_code": "select distinct user_id,\nlast_box_paid_date,\nbox_sub_status as status_lvl1,\n'LOST' as status,\nlast_shop_order_date\n from teamdata-291012.user.customers \nwhere (date_diff(current_date(),last_box_paid_date,month)between 25 and 36\nand ( \nis_shopper =false or date_diff(current_date(),last_shop_order_date,month)between 25 and 36\n\n)\n\n )\nand box_sub_status in ('CHURN','NEVERSUB')\nand dw_country_code='FR'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_lost.sql", "compiled": true, "compiled_code": "select distinct user_id,\nlast_box_paid_date,\nbox_sub_status as status_lvl1,\n'LOST' as status,\nlast_shop_order_date\n from teamdata-291012.user.customers \nwhere (date_diff(current_date(),last_box_paid_date,month)between 25 and 36\nand ( \nis_shopper =false or date_diff(current_date(),last_shop_order_date,month)between 25 and 36\n\n)\n\n )\nand box_sub_status in ('CHURN','NEVERSUB')\nand dw_country_code='FR'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shipments_all": {"database": "normalised-417010", "schema": "ops", "name": "shipments_all", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/shipments_all.sql", "original_file_path": "models/schedule/daily/5am/normalised/shipments_all.sql", "unique_id": "model.warehouse.shipments_all", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "shipments_all"], "alias": "shipments_all", "checksum": {"name": "sha256", "checksum": "457bb2fc1735bc2dc5354ec16329593d20873f6395740a3c5f7858516fe63339"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.68182, "relation_name": "`normalised-417010`.`ops`.`shipments_all`", "raw_code": "SELECT \n\"BOX\" as shipment_type,\ndw_country_code,\nbox_date,\nyear as shipping_year, \nmonth AS shipping_month, \nshipping_date,\nfirst_reexp, \ndaily_monthly,\nmono_multi, \nshipping_mode_nice_name, \nrange_of_weight, \nmin_weight_range, \nmax_weight_range,\navg(order_weight) AS avg_order_weight,\navg(gws_weight) AS avg_gws_weight,\navg(box_weight) AS avg_box_weight,\ncount(*) AS nb_orders, \nSUM(shipping_transport_cost) AS shipping_transport_cost,\nSUM(total_shipping_taxes) AS total_shipping_taxes,\nSUM(shipping_cost) AS shipping_cost,\nSUM(picking_cost) AS total_picking_cost,\nSUM(product_cost) AS product_cost,\nSAFE_DIVIDE(SUM(shipping_transport_cost), count(*)) AS avg_shipping_cost,\nSAFE_DIVIDE(SUM(picking_cost), count(*)) AS avg_picking_cost\nFROM {{ ref('box_shipments') }}\nWHERE year >= 2018\nAND shipping_date <= CURRENT_DATE\nGROUP BY shipment_type, dw_country_code,shipping_mode_nice_name, range_of_weight,min_weight_range, max_weight_range, first_reexp, daily_monthly,mono_multi, box_date, year, month, shipping_date\n\nUNION ALL\n\nSELECT \n\"SHOP\" as shipment_type,\ndw_country_code,\nNULL as box_date,\nyear as shipping_year, \nmonth AS shipping_month, \nshipping_date,\nfirst_reexp,\nNULL as daily_monthly,\nNULL as mono_multi, \nif(shipping_mode_nice_name=\"Asendia\", \"Colissimo\",shipping_mode_nice_name) as shipping_mode_nice_name, \nrange_of_weight, \nmin_weight_range, \nmax_weight_range,\navg(order_weight) AS avg_order_weight,\nNULL AS avg_gws_weight,\nNULL AS avg_box_weight,\ncount(*) AS nb_orders, \nSUM(shipping_transport_cost) AS shipping_transport_cost,\nSUM(total_shipping_taxes) AS total_shipping_taxes,\nSUM(shipping_cost) AS shipping_cost,\nSUM(picking_cost) AS total_picking_cost,\nSUM(products_cost) AS product_cost,\nSAFE_DIVIDE(SUM(shipping_transport_cost), count(*)) AS avg_shipping_cost,\nSAFE_DIVIDE(SUM(picking_cost), count(*)) AS avg_picking_cost\nFROM {{ ref('shop_shipments') }}\nWHERE year >= 2018\nAND shipping_date <= CURRENT_DATE\nGROUP BY shipment_type, dw_country_code,shipping_mode_nice_name, range_of_weight,min_weight_range, max_weight_range, first_reexp,  year, month, shipping_date\n\nORDER BY shipping_year, shipping_month, box_date, shipping_mode_nice_name, range_of_weight", "language": "sql", "refs": [{"name": "box_shipments", "package": null, "version": null}, {"name": "shop_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.box_shipments", "model.warehouse.shop_shipments"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/shipments_all.sql", "compiled": true, "compiled_code": "SELECT \n\"BOX\" as shipment_type,\ndw_country_code,\nbox_date,\nyear as shipping_year, \nmonth AS shipping_month, \nshipping_date,\nfirst_reexp, \ndaily_monthly,\nmono_multi, \nshipping_mode_nice_name, \nrange_of_weight, \nmin_weight_range, \nmax_weight_range,\navg(order_weight) AS avg_order_weight,\navg(gws_weight) AS avg_gws_weight,\navg(box_weight) AS avg_box_weight,\ncount(*) AS nb_orders, \nSUM(shipping_transport_cost) AS shipping_transport_cost,\nSUM(total_shipping_taxes) AS total_shipping_taxes,\nSUM(shipping_cost) AS shipping_cost,\nSUM(picking_cost) AS total_picking_cost,\nSUM(product_cost) AS product_cost,\nSAFE_DIVIDE(SUM(shipping_transport_cost), count(*)) AS avg_shipping_cost,\nSAFE_DIVIDE(SUM(picking_cost), count(*)) AS avg_picking_cost\nFROM `teamdata-291012`.`ops`.`box_shipments`\nWHERE year >= 2018\nAND shipping_date <= CURRENT_DATE\nGROUP BY shipment_type, dw_country_code,shipping_mode_nice_name, range_of_weight,min_weight_range, max_weight_range, first_reexp, daily_monthly,mono_multi, box_date, year, month, shipping_date\n\nUNION ALL\n\nSELECT \n\"SHOP\" as shipment_type,\ndw_country_code,\nNULL as box_date,\nyear as shipping_year, \nmonth AS shipping_month, \nshipping_date,\nfirst_reexp,\nNULL as daily_monthly,\nNULL as mono_multi, \nif(shipping_mode_nice_name=\"Asendia\", \"Colissimo\",shipping_mode_nice_name) as shipping_mode_nice_name, \nrange_of_weight, \nmin_weight_range, \nmax_weight_range,\navg(order_weight) AS avg_order_weight,\nNULL AS avg_gws_weight,\nNULL AS avg_box_weight,\ncount(*) AS nb_orders, \nSUM(shipping_transport_cost) AS shipping_transport_cost,\nSUM(total_shipping_taxes) AS total_shipping_taxes,\nSUM(shipping_cost) AS shipping_cost,\nSUM(picking_cost) AS total_picking_cost,\nSUM(products_cost) AS product_cost,\nSAFE_DIVIDE(SUM(shipping_transport_cost), count(*)) AS avg_shipping_cost,\nSAFE_DIVIDE(SUM(picking_cost), count(*)) AS avg_picking_cost\nFROM `teamdata-291012`.`ops`.`shop_shipments`\nWHERE year >= 2018\nAND shipping_date <= CURRENT_DATE\nGROUP BY shipment_type, dw_country_code,shipping_mode_nice_name, range_of_weight,min_weight_range, max_weight_range, first_reexp,  year, month, shipping_date\n\nORDER BY shipping_year, shipping_month, box_date, shipping_mode_nice_name, range_of_weight", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.today_risky": {"database": "normalised-417010", "schema": "user", "name": "today_risky", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/normalised/today_risky.sql", "original_file_path": "models/schedule/daily/5am/normalised/today_risky.sql", "unique_id": "model.warehouse.today_risky", "fqn": ["warehouse", "schedule", "daily", "5am", "normalised", "today_risky"], "alias": "today_risky", "checksum": {"name": "sha256", "checksum": "540614ff014cc5dd6cddd85d2221029488427b19b41e7daab7fcd3e7478f4b36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null, "database": "normalised-417010"}, "created_at": 1759995464.683281, "relation_name": "`normalised-417010`.`user`.`today_risky`", "raw_code": "select distinct t.user_id,box_sub_status as status_lvl1,'RISKY' as status from (\n--end of gift\nselect distinct user_id,'end of gift' as status,box_sub_status\nfrom sales.box_sales bs\ninner join `teamdata-291012.user.customers` c using(user_id,dw_country_code)\nwhere bs.gift = 1 AND bs.last_committed_box = 1\nand date='2025-02-01' and dw_country_code='FR' \nunion all\n\n-- moins de 7 box et sub\nselect distinct user_id ,'moins de 7 box',box_sub_status\nfrom `teamdata-291012.user.customers`\nwhere nb_box_paid <7 and dw_country_code='FR'\nand box_sub_status='SUB'\n\n-- les acquiz mega discount\nunion all\nselect distinct user_id,'mega discount',box_sub_status\nfrom sales.box_sales bs\ninner join `teamdata-291012.user.customers` c using(user_id,dw_country_code)\nwhere  date>='2024-01-01' and dw_country_code='FR'\nand bs.acquis_status_lvl2 IN ('NEW NEW','REACTIVATION') AND ( safe_divide(bs.total_discount,total_product) > 0.3) \nand box_sub_status='SUB'\n\n\n\n-- react m-1 et m-2\n\n)t\nleft join {{ ref('today_prospects') }} p on p.user_id=t.user_id \nleft join {{ ref('today_spectators') }} sp on sp.user_id=t.user_id \nleft join {{ ref('today_new') }} n on n.user_id=t.user_id \nleft join {{ ref('today_whales') }} w on w.user_id=t.user_id \nleft join {{ ref('today_stars') }} stars on stars.user_id=t.user_id \nwhere p.user_id is null and sp.user_id is null and n.user_id is null and w.user_id is null and stars.user_id is null\ngroup by all", "language": "sql", "refs": [{"name": "today_prospects", "package": null, "version": null}, {"name": "today_spectators", "package": null, "version": null}, {"name": "today_new", "package": null, "version": null}, {"name": "today_whales", "package": null, "version": null}, {"name": "today_stars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_prospects", "model.warehouse.today_spectators", "model.warehouse.today_new", "model.warehouse.today_whales", "model.warehouse.today_stars"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/normalised/today_risky.sql", "compiled": true, "compiled_code": "select distinct t.user_id,box_sub_status as status_lvl1,'RISKY' as status from (\n--end of gift\nselect distinct user_id,'end of gift' as status,box_sub_status\nfrom sales.box_sales bs\ninner join `teamdata-291012.user.customers` c using(user_id,dw_country_code)\nwhere bs.gift = 1 AND bs.last_committed_box = 1\nand date='2025-02-01' and dw_country_code='FR' \nunion all\n\n-- moins de 7 box et sub\nselect distinct user_id ,'moins de 7 box',box_sub_status\nfrom `teamdata-291012.user.customers`\nwhere nb_box_paid <7 and dw_country_code='FR'\nand box_sub_status='SUB'\n\n-- les acquiz mega discount\nunion all\nselect distinct user_id,'mega discount',box_sub_status\nfrom sales.box_sales bs\ninner join `teamdata-291012.user.customers` c using(user_id,dw_country_code)\nwhere  date>='2024-01-01' and dw_country_code='FR'\nand bs.acquis_status_lvl2 IN ('NEW NEW','REACTIVATION') AND ( safe_divide(bs.total_discount,total_product) > 0.3) \nand box_sub_status='SUB'\n\n\n\n-- react m-1 et m-2\n\n)t\nleft join `normalised-417010`.`user`.`today_prospects` p on p.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_spectators` sp on sp.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_new` n on n.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_whales` w on w.user_id=t.user_id \nleft join `normalised-417010`.`user`.`today_stars` stars on stars.user_id=t.user_id \nwhere p.user_id is null and sp.user_id is null and n.user_id is null and w.user_id is null and stars.user_id is null\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.splio_data_dedup": {"database": "teamdata-291012", "schema": "user", "name": "splio_data_dedup", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/splio_data_dedup.sql", "original_file_path": "models/schedule/daily/5am/teamdata/splio_data_dedup.sql", "unique_id": "model.warehouse.splio_data_dedup", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "splio_data_dedup"], "alias": "splio_data_dedup", "checksum": {"name": "sha256", "checksum": "50e662c80366b62f99337c5d491db0643b8f2d0f901c80c8a2e08249e198011d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["email", "status", "event_date", "campaignid"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "incremental", "teamdata": null, "unique_key": ["email", "status", "event_date", "campaignid"], "incremental_strategy": "merge"}, "created_at": 1759995464.685436, "relation_name": "`teamdata-291012`.`user`.`splio_data_dedup`", "raw_code": "-- dans votre fichier .sql du mod\u00e8le\n{{\n  config(\n    materialized='incremental',\n    unique_key=['email', 'status', 'event_date', 'campaignid'],\n    incremental_strategy='merge'\n  )\n}}\n\n\nwith all_events as (\nselect distinct \n    dw_country_code,\n    ContactID,\n    lower(Status) as status,\n    Event_date,\n    CampaignID from (\nSELECT \n    'FR' as dw_country_code,\n    ContactID,\n    Status,\n    Event_date,\n    CampaignID from `teamdata-291012.crm.splio_events`\n    where  Event_Date >= '2023-01-01'\n    union all\nSELECT \n    'EU' as dw_country_code,\n    Contact_ID,\n    case when Status ='sent' then 'done' else lower(Status) end as Status,\n    safe_cast(Event_date as date),\n    Campaign_ID from `teamdata-291012.backup_splio.EU_splio_events_DE`\n    where  Event_Date >= '2023-01-01')\n\n)\n\nSELECT \n  dw_country_code,\n  ContactID AS email,\n  Status AS status,\n  Event_date AS event_date,\n  CampaignID AS campaignid\nFROM (\n  SELECT \n    dw_country_code,\n    ContactID,\n    Status,\n    Event_date,\n    CampaignID,\n    ROW_NUMBER() OVER (PARTITION BY CampaignID, ContactID, Status ORDER BY Event_date) AS rn\n  FROM all_events\n  WHERE event_date IS NOT NULL \n    AND Event_Date >= '2023-01-01'\n    {% if is_incremental() %}\n    -- En mode incr\u00e9mental, prenez les donn\u00e9es du jour pr\u00e9c\u00e9dent pour \u00e9viter les conflits\n    AND Event_Date > (SELECT DATE_SUB(MAX(event_date), INTERVAL 1 DAY) FROM {{ this }})\n    {% endif %}\n)\nWHERE rn = 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/splio_data_dedup.sql", "compiled": true, "compiled_code": "-- dans votre fichier .sql du mod\u00e8le\n\n\n\nwith all_events as (\nselect distinct \n    dw_country_code,\n    ContactID,\n    lower(Status) as status,\n    Event_date,\n    CampaignID from (\nSELECT \n    'FR' as dw_country_code,\n    ContactID,\n    Status,\n    Event_date,\n    CampaignID from `teamdata-291012.crm.splio_events`\n    where  Event_Date >= '2023-01-01'\n    union all\nSELECT \n    'EU' as dw_country_code,\n    Contact_ID,\n    case when Status ='sent' then 'done' else lower(Status) end as Status,\n    safe_cast(Event_date as date),\n    Campaign_ID from `teamdata-291012.backup_splio.EU_splio_events_DE`\n    where  Event_Date >= '2023-01-01')\n\n)\n\nSELECT \n  dw_country_code,\n  ContactID AS email,\n  Status AS status,\n  Event_date AS event_date,\n  CampaignID AS campaignid\nFROM (\n  SELECT \n    dw_country_code,\n    ContactID,\n    Status,\n    Event_date,\n    CampaignID,\n    ROW_NUMBER() OVER (PARTITION BY CampaignID, ContactID, Status ORDER BY Event_date) AS rn\n  FROM all_events\n  WHERE event_date IS NOT NULL \n    AND Event_Date >= '2023-01-01'\n    \n    -- En mode incr\u00e9mental, prenez les donn\u00e9es du jour pr\u00e9c\u00e9dent pour \u00e9viter les conflits\n    AND Event_Date > (SELECT DATE_SUB(MAX(event_date), INTERVAL 1 DAY) FROM `teamdata-291012`.`user`.`splio_data_dedup`)\n    \n)\nWHERE rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Marketing_cac_expenses": {"database": "teamdata-291012", "schema": "marketing", "name": "Marketing_cac_expenses", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/Marketing_cac_expenses.sql", "original_file_path": "models/schedule/daily/5am/teamdata/Marketing_cac_expenses.sql", "unique_id": "model.warehouse.Marketing_cac_expenses", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "Marketing_cac_expenses"], "alias": "Marketing_cac_expenses", "checksum": {"name": "sha256", "checksum": "1a00020063a8251cd9da823b9b651cf26e691edc7cf11cbc06c9eba620d8b2ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.6891992, "relation_name": "`teamdata-291012`.`marketing`.`Marketing_cac_expenses`", "raw_code": "select e.d,b.date as mois,country,levier ,cat1 as levierFC,upper(cat2) as type,\ncase when upper(cat3) like 'ACQ%' then 'ACQUIZ'else upper(Cat3) end  as type2,\n'Oui' as cac,sum(spent) as spent \nFROM `teamdata-291012.marketing.live_expenses`e\ninner join inter.boxes_by_day b on b.d=e.d and b.dw_country_code=e.country\n where cat2 <>'Shop'\ngroup by 1,2,3,4,5,6,7\n\nunion all\nsELECT period,b.date,'FR' ,'splio','TOOLS','BOX','ACQUIZ','Oui',8000/31 \nFROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\nunion all\nsELECT period,b.date,'DE' ,'splio','TOOLS','BOX','ACQUIZ','Oui',550/31 FROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\nunion all\nsELECT period,b.date,'FR' ,'KolsQUare','TOOLS','BOX','ACQUIZ','Oui',1000/31 \nFROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\nunion all\nsELECT period,b.date,'FR' ,'Arcane','TOOLS','BOX','ACQUIZ','Oui',800/31\n FROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\n\n---------------\n-----influence\n---------------\n\n\n\nunion all\nSELECT e.date,b.date,pays,nom,type,'BOX','ACQUIZ','Oui',sum(spent)\n FROM `teamdata-291012.marketing.influence_expense` e\ninner join inter.boxes_by_day b on b.d=e.date and b.dw_country_code=pays\nwhere box='Box'\ngroup by 1,2,3,4,5,6,7\n\n---------------\n-----Manual\n---------------\n\n\n\nunion all\nSELECT e.date,b.date,pays,levier,levierFC,'BOX','ACQUIZ',cac,sum(spent) FROM `teamdata-291012.marketing.manual_expense` e\ninner join inter.boxes_by_day b on b.d=e.date and b.dw_country_code=pays\ngroup by 1,2,3,4,5,6,7,8\n\n\n\n\n---------------\n-----YEARLY\n---------------\n\nunion all \n\n\nSELECT \n       DATE(payment_date) AS d,\n       b.date,\n       bs.dw_country_code,'yearly','Discount','BOX','ACQUIZ','Oui',\n       SUM(discount) AS discount\nFROM sales.box_sales bs\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=bs.dw_country_code\nWHERE yearly = 1\nAND bs.dw_country_code IN ('FR', 'DE')\nAND sub_payment_status_id = 1\nGROUP BY 1,2,3,4,5,6\n\n---------------\n-----Discount\n---------------\nunion all\n(\nWITH raf_by_sub AS (\n  SELECT rsl.dw_country_code AS country_code,\n         rsl.order_detail_sub_id AS sub_id,\n         rod.reward_value\n  FROM inter.raf_sub_link rsl\n  INNER JOIN inter.raf_offer_details rod ON rsl.dw_country_code = rod.dw_country_code AND rsl.raf_offer_detail_id = rod.id\n  INNER JOIN inter.raf_offers ro ON rod.dw_country_code = ro.dw_country_code AND rod.raf_offer_id = ro.id\n  INNER JOIN inter.raf_reward_type rrt ON ro.dw_country_code = rrt.dw_country_code AND ro.refferer_reward_type = rrt.id\n  WHERE rrt.reward_type = 'BOX'\n)\nSELECT payment_date,b.date,t.dw_country_code AS country_code,\n       \n       coupon,\n       'Discount',\n       'BOX',\n       'ACQUIZ','Oui',\n       SUM(discount_wout_raf) AS total_discount_wout_raf,\n\nFROM\n(\n  SELECT\n      bs.dw_country_code,\n      bs.year,\n      bs.month,\n      DATE(bs.payment_date) AS payment_date,\n      b.shipping_date,\n      bs.sub_id, \n      bs.user_id,\n      bs.box_id,\n      bs.date,\n      bs.discount - COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS discount_wout_raf,\n      COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS raf_discount,\n      CASE WHEN bs.box_id = bs.sub_start_box THEN bs.coupon_code ELSE bs.sub_offer_code END AS coupon,\n      CASE WHEN max(bs1.box_id) = bs.box_id - 1 THEN 'react m-1'\n           WHEN bs.gift = 1 THEN 'acquis gift'\n           WHEN bs1.user_id > 0 THEN 'react self'\n           ELSE 'acquis self'\n           END AS sub_type\n      FROM sales.box_sales bs\n      LEFT JOIN sales.box_sales bs1 ON bs1.user_id = bs.user_id AND bs1.box_id < bs.box_id AND bs.dw_country_code = bs1.dw_country_code\n      LEFT JOIN raf_by_sub rbs ON bs.dw_country_code = rbs.country_code AND bs.sub_id = rbs.sub_id\n      INNER JOIN inter.boxes b ON b.id = bs.box_id AND b.dw_country_code = bs.dw_country_code\n      WHERE bs.payment_date >= b.shipping_date\n      AND bs.payment_status = 'paid'\n      AND (bs.dw_country_code NOT IN ('FR', 'DE') OR bs.coupon_code <> 'YEARLY')\n      AND bs.date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n      GROUP BY bs.dw_country_code, bs.year, bs.month, bs.date, bs.sub_id, bs.payment_date, bs.user_id, bs.box_id, b.shipping_date, bs.gift, bs1.user_id, bs.sub_start_box, bs.coupon_code, bs.sub_offer_code, bs.discount\n) t\nLEFT JOIN inter.coupons c ON c.code = t.coupon AND c.dw_country_code = t.dw_country_code\nLEFT JOIN inter.products p ON c.discount_type = 'PRODUCT' AND c.discount_amount = CAST(p.id AS STRING)and p.dw_country_code=c.dw_country_code\nleft join (select distinct country,code,type,type2 from `teamdata-291012.marketing.Marketing_cac_discount` )d on coupon=d.code and type2='Box' and country=t.dw_country_code\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=t.dw_country_code\nWHERE sub_type <> 'acquis gift' \nGROUP BY 1,2,3,4,5,6)\n\n\n\n---------------\n-----GWS\n---------------\n\n\nunion all\n(\nWITH raf_by_sub AS (\n  SELECT rsl.dw_country_code AS country_code,\n         rsl.order_detail_sub_id AS sub_id,\n         rod.reward_value\n  FROM inter.raf_sub_link rsl\n  INNER JOIN inter.raf_offer_details rod ON rsl.dw_country_code = rod.dw_country_code AND rsl.raf_offer_detail_id = rod.id\n  INNER JOIN inter.raf_offers ro ON rod.dw_country_code = ro.dw_country_code AND rod.raf_offer_id = ro.id\n  INNER JOIN inter.raf_reward_type rrt ON ro.dw_country_code = rrt.dw_country_code AND ro.refferer_reward_type = rrt.id\n  WHERE rrt.reward_type = 'BOX'\n)\nSELECT payment_date,b.date,t.dw_country_code AS country_code,\n       \n       concat(d.type),\n       'GWS',\n       'GWS',\n       'ACQUIZ',\n      'Oui',\n       COUNT(*) * MAX(COALESCE(p.attr_discounted_purchase_price, p.attr_purchase_price)) AS total_discount_wout_raf,\n\nFROM\n(\n  SELECT\n      bs.dw_country_code,\n      bs.year,\n      bs.month,\n      DATE(bs.payment_date) AS payment_date,\n      b.shipping_date,\n      bs.sub_id, \n      bs.user_id,\n      bs.box_id,\n      bs.date,\n      bs.discount - COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS discount_wout_raf,\n      COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS raf_discount,\n      CASE WHEN bs.box_id = bs.sub_start_box THEN bs.coupon_code ELSE bs.sub_offer_code END AS coupon,\n      CASE WHEN max(bs1.box_id) = bs.box_id - 1 THEN 'react m-1'\n           WHEN bs.gift = 1 THEN 'acquis gift'\n           WHEN bs1.user_id > 0 THEN 'react self'\n           ELSE 'acquis self'\n           END AS sub_type\n      FROM sales.box_sales bs\n      LEFT JOIN sales.box_sales bs1 ON bs1.user_id = bs.user_id AND bs1.box_id < bs.box_id AND bs.dw_country_code = bs1.dw_country_code\n      LEFT JOIN raf_by_sub rbs ON bs.dw_country_code = rbs.country_code AND bs.sub_id = rbs.sub_id\n      INNER JOIN inter.boxes b ON b.id = bs.box_id AND b.dw_country_code = bs.dw_country_code\n      WHERE bs.payment_date >= b.shipping_date\n      AND bs.payment_status = 'paid'\n      AND (bs.dw_country_code NOT IN ('FR', 'DE') OR bs.coupon_code <> 'YEARLY')\n      AND bs.date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n      GROUP BY bs.dw_country_code, bs.year, bs.month, bs.date, bs.sub_id, bs.payment_date, bs.user_id, bs.box_id, b.shipping_date, bs.gift, bs1.user_id, bs.sub_start_box, bs.coupon_code, bs.sub_offer_code, bs.discount\n) t\nLEFT JOIN inter.coupons c ON c.code = t.coupon AND c.dw_country_code = t.dw_country_code\nLEFT JOIN inter.products p ON c.discount_type = 'PRODUCT' AND c.discount_amount = CAST(p.id AS STRING)and p.dw_country_code=c.dw_country_code\nleft join (select distinct country,code,type,type2 from `teamdata-291012.marketing.Marketing_cac_discount`)d on coupon=d.code and country=t.dw_country_code\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=t.dw_country_code\nWHERE sub_type <> 'acquis gift' and coupon is not null\nGROUP BY 1,2,3,4,5,6\nORDER BY country_code, payment_date, COUNT(*) DESC)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/Marketing_cac_expenses.sql", "compiled": true, "compiled_code": "select e.d,b.date as mois,country,levier ,cat1 as levierFC,upper(cat2) as type,\ncase when upper(cat3) like 'ACQ%' then 'ACQUIZ'else upper(Cat3) end  as type2,\n'Oui' as cac,sum(spent) as spent \nFROM `teamdata-291012.marketing.live_expenses`e\ninner join inter.boxes_by_day b on b.d=e.d and b.dw_country_code=e.country\n where cat2 <>'Shop'\ngroup by 1,2,3,4,5,6,7\n\nunion all\nsELECT period,b.date,'FR' ,'splio','TOOLS','BOX','ACQUIZ','Oui',8000/31 \nFROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\nunion all\nsELECT period,b.date,'DE' ,'splio','TOOLS','BOX','ACQUIZ','Oui',550/31 FROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\nunion all\nsELECT period,b.date,'FR' ,'KolsQUare','TOOLS','BOX','ACQUIZ','Oui',1000/31 \nFROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\nunion all\nsELECT period,b.date,'FR' ,'Arcane','TOOLS','BOX','ACQUIZ','Oui',800/31\n FROM UNNEST(\n  GENERATE_DATE_ARRAY(\n    ('2023-01-01'),\n    ('2024-12-31')\n  )\n) period\ninner join inter.boxes_by_day b on b.d=period and b.dw_country_code='FR'\n\n\n---------------\n-----influence\n---------------\n\n\n\nunion all\nSELECT e.date,b.date,pays,nom,type,'BOX','ACQUIZ','Oui',sum(spent)\n FROM `teamdata-291012.marketing.influence_expense` e\ninner join inter.boxes_by_day b on b.d=e.date and b.dw_country_code=pays\nwhere box='Box'\ngroup by 1,2,3,4,5,6,7\n\n---------------\n-----Manual\n---------------\n\n\n\nunion all\nSELECT e.date,b.date,pays,levier,levierFC,'BOX','ACQUIZ',cac,sum(spent) FROM `teamdata-291012.marketing.manual_expense` e\ninner join inter.boxes_by_day b on b.d=e.date and b.dw_country_code=pays\ngroup by 1,2,3,4,5,6,7,8\n\n\n\n\n---------------\n-----YEARLY\n---------------\n\nunion all \n\n\nSELECT \n       DATE(payment_date) AS d,\n       b.date,\n       bs.dw_country_code,'yearly','Discount','BOX','ACQUIZ','Oui',\n       SUM(discount) AS discount\nFROM sales.box_sales bs\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=bs.dw_country_code\nWHERE yearly = 1\nAND bs.dw_country_code IN ('FR', 'DE')\nAND sub_payment_status_id = 1\nGROUP BY 1,2,3,4,5,6\n\n---------------\n-----Discount\n---------------\nunion all\n(\nWITH raf_by_sub AS (\n  SELECT rsl.dw_country_code AS country_code,\n         rsl.order_detail_sub_id AS sub_id,\n         rod.reward_value\n  FROM inter.raf_sub_link rsl\n  INNER JOIN inter.raf_offer_details rod ON rsl.dw_country_code = rod.dw_country_code AND rsl.raf_offer_detail_id = rod.id\n  INNER JOIN inter.raf_offers ro ON rod.dw_country_code = ro.dw_country_code AND rod.raf_offer_id = ro.id\n  INNER JOIN inter.raf_reward_type rrt ON ro.dw_country_code = rrt.dw_country_code AND ro.refferer_reward_type = rrt.id\n  WHERE rrt.reward_type = 'BOX'\n)\nSELECT payment_date,b.date,t.dw_country_code AS country_code,\n       \n       coupon,\n       'Discount',\n       'BOX',\n       'ACQUIZ','Oui',\n       SUM(discount_wout_raf) AS total_discount_wout_raf,\n\nFROM\n(\n  SELECT\n      bs.dw_country_code,\n      bs.year,\n      bs.month,\n      DATE(bs.payment_date) AS payment_date,\n      b.shipping_date,\n      bs.sub_id, \n      bs.user_id,\n      bs.box_id,\n      bs.date,\n      bs.discount - COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS discount_wout_raf,\n      COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS raf_discount,\n      CASE WHEN bs.box_id = bs.sub_start_box THEN bs.coupon_code ELSE bs.sub_offer_code END AS coupon,\n      CASE WHEN max(bs1.box_id) = bs.box_id - 1 THEN 'react m-1'\n           WHEN bs.gift = 1 THEN 'acquis gift'\n           WHEN bs1.user_id > 0 THEN 'react self'\n           ELSE 'acquis self'\n           END AS sub_type\n      FROM sales.box_sales bs\n      LEFT JOIN sales.box_sales bs1 ON bs1.user_id = bs.user_id AND bs1.box_id < bs.box_id AND bs.dw_country_code = bs1.dw_country_code\n      LEFT JOIN raf_by_sub rbs ON bs.dw_country_code = rbs.country_code AND bs.sub_id = rbs.sub_id\n      INNER JOIN inter.boxes b ON b.id = bs.box_id AND b.dw_country_code = bs.dw_country_code\n      WHERE bs.payment_date >= b.shipping_date\n      AND bs.payment_status = 'paid'\n      AND (bs.dw_country_code NOT IN ('FR', 'DE') OR bs.coupon_code <> 'YEARLY')\n      AND bs.date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n      GROUP BY bs.dw_country_code, bs.year, bs.month, bs.date, bs.sub_id, bs.payment_date, bs.user_id, bs.box_id, b.shipping_date, bs.gift, bs1.user_id, bs.sub_start_box, bs.coupon_code, bs.sub_offer_code, bs.discount\n) t\nLEFT JOIN inter.coupons c ON c.code = t.coupon AND c.dw_country_code = t.dw_country_code\nLEFT JOIN inter.products p ON c.discount_type = 'PRODUCT' AND c.discount_amount = CAST(p.id AS STRING)and p.dw_country_code=c.dw_country_code\nleft join (select distinct country,code,type,type2 from `teamdata-291012.marketing.Marketing_cac_discount` )d on coupon=d.code and type2='Box' and country=t.dw_country_code\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=t.dw_country_code\nWHERE sub_type <> 'acquis gift' \nGROUP BY 1,2,3,4,5,6)\n\n\n\n---------------\n-----GWS\n---------------\n\n\nunion all\n(\nWITH raf_by_sub AS (\n  SELECT rsl.dw_country_code AS country_code,\n         rsl.order_detail_sub_id AS sub_id,\n         rod.reward_value\n  FROM inter.raf_sub_link rsl\n  INNER JOIN inter.raf_offer_details rod ON rsl.dw_country_code = rod.dw_country_code AND rsl.raf_offer_detail_id = rod.id\n  INNER JOIN inter.raf_offers ro ON rod.dw_country_code = ro.dw_country_code AND rod.raf_offer_id = ro.id\n  INNER JOIN inter.raf_reward_type rrt ON ro.dw_country_code = rrt.dw_country_code AND ro.refferer_reward_type = rrt.id\n  WHERE rrt.reward_type = 'BOX'\n)\nSELECT payment_date,b.date,t.dw_country_code AS country_code,\n       \n       concat(d.type),\n       'GWS',\n       'GWS',\n       'ACQUIZ',\n      'Oui',\n       COUNT(*) * MAX(COALESCE(p.attr_discounted_purchase_price, p.attr_purchase_price)) AS total_discount_wout_raf,\n\nFROM\n(\n  SELECT\n      bs.dw_country_code,\n      bs.year,\n      bs.month,\n      DATE(bs.payment_date) AS payment_date,\n      b.shipping_date,\n      bs.sub_id, \n      bs.user_id,\n      bs.box_id,\n      bs.date,\n      bs.discount - COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS discount_wout_raf,\n      COALESCE(MAX(rbs.reward_value) / (1 + MAX(bs.vat_rate) / 100), 0) AS raf_discount,\n      CASE WHEN bs.box_id = bs.sub_start_box THEN bs.coupon_code ELSE bs.sub_offer_code END AS coupon,\n      CASE WHEN max(bs1.box_id) = bs.box_id - 1 THEN 'react m-1'\n           WHEN bs.gift = 1 THEN 'acquis gift'\n           WHEN bs1.user_id > 0 THEN 'react self'\n           ELSE 'acquis self'\n           END AS sub_type\n      FROM sales.box_sales bs\n      LEFT JOIN sales.box_sales bs1 ON bs1.user_id = bs.user_id AND bs1.box_id < bs.box_id AND bs.dw_country_code = bs1.dw_country_code\n      LEFT JOIN raf_by_sub rbs ON bs.dw_country_code = rbs.country_code AND bs.sub_id = rbs.sub_id\n      INNER JOIN inter.boxes b ON b.id = bs.box_id AND b.dw_country_code = bs.dw_country_code\n      WHERE bs.payment_date >= b.shipping_date\n      AND bs.payment_status = 'paid'\n      AND (bs.dw_country_code NOT IN ('FR', 'DE') OR bs.coupon_code <> 'YEARLY')\n      AND bs.date >= DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 YEAR)\n      GROUP BY bs.dw_country_code, bs.year, bs.month, bs.date, bs.sub_id, bs.payment_date, bs.user_id, bs.box_id, b.shipping_date, bs.gift, bs1.user_id, bs.sub_start_box, bs.coupon_code, bs.sub_offer_code, bs.discount\n) t\nLEFT JOIN inter.coupons c ON c.code = t.coupon AND c.dw_country_code = t.dw_country_code\nLEFT JOIN inter.products p ON c.discount_type = 'PRODUCT' AND c.discount_amount = CAST(p.id AS STRING)and p.dw_country_code=c.dw_country_code\nleft join (select distinct country,code,type,type2 from `teamdata-291012.marketing.Marketing_cac_discount`)d on coupon=d.code and country=t.dw_country_code\ninner join inter.boxes_by_day b on b.d= DATE(payment_date) and b.dw_country_code=t.dw_country_code\nWHERE sub_type <> 'acquis gift' and coupon is not null\nGROUP BY 1,2,3,4,5,6\nORDER BY country_code, payment_date, COUNT(*) DESC)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.pnl__export_pnl_live": {"database": "teamdata-291012", "schema": "history_table", "name": "pnl__export_pnl_live", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/pnl__export_pnl_live.sql", "original_file_path": "models/schedule/daily/5am/teamdata/pnl__export_pnl_live.sql", "unique_id": "model.warehouse.pnl__export_pnl_live", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "pnl__export_pnl_live"], "alias": "pnl__export_pnl_live", "checksum": {"name": "sha256", "checksum": "bb82685e35513d232b84e69755d781b50dc07cc947de3aa0adaf5491ddbd4315"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["archive_date", "period", "key"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null, "partition_by": {"field": "archive_date", "data_type": "date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "incremental", "teamdata": null, "unique_key": ["archive_date", "period", "key"], "incremental_strategy": "insert_overwrite", "partition_by": {"field": "archive_date", "data_type": "date"}}, "created_at": 1759995464.6905951, "relation_name": "`teamdata-291012`.`history_table`.`pnl__export_pnl_live`", "raw_code": "{{ \n  config(\n    materialized = 'incremental',\n    unique_key = ['archive_date', 'period', 'key'],\n    incremental_strategy = 'insert_overwrite',\n    partition_by = {\n      'field': 'archive_date',\n      'data_type': 'date'\n    }\n  ) \n}}\n\nSELECT current_date AS archive_date, period, key, value \nFROM `teamdata-291012.pnl.export_pnl_live`\n{% if is_incremental() %}\nWHERE CURRENT_DATE() > (SELECT MAX(archive_date) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/pnl__export_pnl_live.sql", "compiled": true, "compiled_code": "\n\nSELECT current_date AS archive_date, period, key, value \nFROM `teamdata-291012.pnl.export_pnl_live`\n\nWHERE CURRENT_DATE() > (SELECT MAX(archive_date) FROM `teamdata-291012`.`history_table`.`pnl__export_pnl_live`)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.obj_by_country": {"database": "teamdata-291012", "schema": "sales", "name": "obj_by_country", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/obj_by_country.sql", "original_file_path": "models/schedule/daily/5am/teamdata/obj_by_country.sql", "unique_id": "model.warehouse.obj_by_country", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "obj_by_country"], "alias": "obj_by_country", "checksum": {"name": "sha256", "checksum": "fa797ebfcc7fdbc5f4004c6293c3e31a9308eb52e2877dde65b78919647fb330"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.694205, "relation_name": "`teamdata-291012`.`sales`.`obj_by_country`", "raw_code": "select b.*,s.box_id from (\nselect year,month,'FR' dw_country_code ,case when fr is not null then FR\nend as obj  from `sales.obj_box`\nunion all\nselect year,month,'DE' dw_country_code ,case when DE is not null then DE\nend as obj  from `sales.obj_box`\nunion all\nselect year,month,'ES' dw_country_code ,case when ES is not null then ES\nend as obj  from `sales.obj_box`\n\n) b\n\ninner join \n\n(select distinct year,month,box_id,dw_country_code from `sales.box_sales` ) s on s.year=b.year and s.month=b.month and s.dw_country_code =b.dw_country_code", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/obj_by_country.sql", "compiled": true, "compiled_code": "select b.*,s.box_id from (\nselect year,month,'FR' dw_country_code ,case when fr is not null then FR\nend as obj  from `sales.obj_box`\nunion all\nselect year,month,'DE' dw_country_code ,case when DE is not null then DE\nend as obj  from `sales.obj_box`\nunion all\nselect year,month,'ES' dw_country_code ,case when ES is not null then ES\nend as obj  from `sales.obj_box`\n\n) b\n\ninner join \n\n(select distinct year,month,box_id,dw_country_code from `sales.box_sales` ) s on s.year=b.year and s.month=b.month and s.dw_country_code =b.dw_country_code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.box_shipments": {"database": "teamdata-291012", "schema": "ops", "name": "box_shipments", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/box_shipments.sql", "original_file_path": "models/schedule/daily/5am/teamdata/box_shipments.sql", "unique_id": "model.warehouse.box_shipments", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "box_shipments"], "alias": "box_shipments", "checksum": {"name": "sha256", "checksum": "00d3ed821f4a4e954e8d6bc8eaaff387b4a514c25ab0387ef4fe382193cd7e73"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.695621, "relation_name": "`teamdata-291012`.`ops`.`box_shipments`", "raw_code": "WITH \nfirst_shipping_mode AS\n(\n  SELECT bec.dw_country_code, bec.sub_id, min(sm.id) AS id\n  FROM inter.b2c_exported_orders bec \n  LEFT JOIN inter.shipping_modes sm ON sm.b2c_method = bec.carrier_code AND sm.dw_country_code = bec.dw_country_code AND sm.id NOT IN (44,66,54)\n  WHERE bec.reference NOT LIKE '%REEXP%'\n  GROUP BY ALL\n),\npot_box_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.sub_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  \n  AND bon.sub_id > 0\n  AND bon.reference NOT LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.sub_id\n),\npot_box_reexp_shipments AS \n(\n  SELECT bon.dw_country_code, bon.sub_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  \n  AND bon.sub_id > 0\n  AND bon.reference LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code, bon.sub_id\n),\npot_shop_reexp_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, bon.order_detail_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  AND bon.sub_id IS NULL\n  AND bon.reference  LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id, bon.order_detail_id\n),\ngws_costs_table AS (\n  SELECT sol.dw_country_code,\n         sol.sub_id,\n         SUM(d.quantity) AS nb_gws,\n         COALESCE(SUM(c.purchase_price * d.quantity), 0) AS gws_costs,\n         SUM(d.quantity*c.weight) AS gws_weight\n  FROM inter.sub_order_link sol\n  INNER JOIN inter.orders o ON sol.dw_country_code = o.dw_country_code AND sol.order_id = o.id\n  INNER JOIN inter.order_details d ON o.dw_country_code = d.dw_country_code AND o.id = d.order_id\n  INNER JOIN product.catalog c ON d.dw_country_code = c.dw_country_code AND d.product_id = c.product_id\n  WHERE d.special_type = 'GWS'\n  GROUP BY sol.dw_country_code,\n           sol.sub_id\n),\nbox_weight AS \n(\n  SELECT p.dw_country_code, p.box_id, p.coffret_id, COALESCE(max(CASE WHEN p.weight = 0 THEN NULL ELSE p.weight END ),CASE WHEN b.box_quantity = 1 THEN 382 WHEN b.box_quantity = 2 THEN 800 END) AS weight\n  FROM inter.products p\n  JOIN inter.boxes b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\n  WHERE p.product_codification_id = 29\n  AND p.box_id > 0\n  AND p.coffret_id > 0\n  GROUP BY p.dw_country_code, p.box_id, p.coffret_id, b.box_quantity\n  ORDER BY p.dw_country_code, p.box_id, p.coffret_id\n),\nbox_cat AS\n(\nSELECT\n  dw_country_code,\n  sub_id,\n  date_alloc,\n  CASE WHEN allocation_method = 'BATCH_ALLOCATION_MONTHLY' THEN 'monthly' ELSE 'daily' END as alloc_cat\n  FROM\n(\n  SELECT\n    dw_country_code,\n    sub_id,\n    date_alloc,\n    allocation_method,\n    ROW_NUMBER() OVER (PARTITION BY dw_country_code, sub_id ORDER BY date_alloc) AS row_num\n  FROM\n    inter.allocation_history\n)\nWHERE row_num = 1\n\n),\nbox_costs AS (\n  SELECT p.dw_country_code, p.box_id, p.coffret_id, p.sku, max(iic.euro_purchase_price) AS euro_purchase_price\nFROM inter.products p\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = p.sku\nWHERE p.box_id > 0 AND p.coffret_id > 0\nGROUP BY all\n)\n\n\n\nSELECT orders.*, \nCASE WHEN orders.nb_dailies > 0 THEN 'daily' ELSE 'monthly' END as daily_monthly,\nCOALESCE(CASE WHEN orders.nb_dailies > 0 THEN COALESCE(sc.price_daily, COALESCE(sc.price,0)) ELSE sc.price END,2.65) AS shipping_transport_cost, \nCOALESCE(sc.shipping_taxes_rate * CASE WHEN orders.nb_dailies > 0 THEN COALESCE(sc.price_daily, sc.price) ELSE sc.price END,0) AS total_shipping_taxes,\n(1 + COALESCE(sc.shipping_taxes_rate,0)) * CASE WHEN orders.nb_dailies > 0 THEN COALESCE(sc.price_daily, COALESCE(sc.price,0)) ELSE COALESCE(sc.price,0) END AS shipping_cost,\n'first' as first_reexp,\nCASE WHEN quantity = 1 THEN 'mono' ELSE 'multi' END AS mono_multi, \nCOALESCE(smn.nice_name, orders.shipping_mode_name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight\n\nFROM\n(\nSELECT bs.dw_country_code,\nbs.order_id,\nbs.order_detail_id,\nbs.sub_id,\nbs.date as box_date,\nCOALESCE(pbs.shipping_date, bs.date) AS shipping_date,\nextract(year from COALESCE(pbs.shipping_date, bs.date)) AS year,\nextract(month from COALESCE(pbs.shipping_date, bs.date)) AS month,\nbs.gross_revenue,\nbs.net_revenue,\nbs.shipping AS shipping_revenue,\nsm.id as shipping_mode_id,\nsm.title AS shipping_mode_name,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nCOALESCE(gct.nb_gws,0) + 1 AS quantity,\nCOALESCE(gct.gws_weight,0)/1000 AS gws_weight, -- kg\nCOALESCE(box_weight.weight, 382) /1000 AS box_weight, -- kg\nCOALESCE(gct.gws_weight,0)/1000 + COALESCE(box_weight.weight, 382) /1000 AS order_weight, -- kg\nCASE WHEN box_cat.alloc_cat = 'monthly' THEN 0 ELSE 1 END AS nb_dailies,\nCASE WHEN box_cat.alloc_cat = 'monthly' THEN 0 -- picking_daily_multi.price \nWHEN COALESCE(gct.nb_gws,0) = 0 THEN picking_daily_mono.price ELSE picking_daily_multi.price + COALESCE(gct.nb_gws,0)*picking_daily_art_supp.price END AS picking_cost,\nbs.shipping_country,\nCOALESCE(gct.gws_costs,0) + COALESCE(box_costs.euro_purchase_price,0) AS product_cost\n\nFROM sales.box_sales as bs\nLEFT JOIN first_shipping_mode sm1 ON sm1.sub_id = bs.sub_id AND sm1.dw_country_code = bs.dw_country_code\nLEFT JOIN pot_box_shipments pbs ON pbs.sub_id = bs.sub_id AND pbs.dw_country_code = bs.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = COALESCE(sm1.id,bs.shipping_mode) AND sm.dw_country_code = bs.dw_country_code\nLEFT JOIN gws_costs_table gct ON gct.sub_id = bs.sub_id AND gct.dw_country_code = bs.dw_country_code\nLEFT JOIN box_weight ON box_weight.dw_country_code = bs.dw_country_code AND box_weight.box_id = bs.box_id AND box_weight.coffret_id = bs.coffret_id\nLEFT JOIN ops.logistics_costs picking_daily_mono ON picking_daily_mono.name = 'picking_daily_mono' AND bs.date >= DATE(picking_daily_mono.date_start) AND (bs.date <= DATE(picking_daily_mono.date_end) OR picking_daily_mono.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_multi ON picking_daily_multi.name = 'picking_daily_multi' AND bs.date >= DATE(picking_daily_multi.date_start) AND (bs.date <= DATE(picking_daily_multi.date_end) OR picking_daily_multi.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_art_supp ON picking_daily_art_supp.name = 'picking_daily_art_supp' AND bs.date >= DATE(picking_daily_art_supp.date_start) AND (bs.date <= DATE(picking_daily_art_supp.date_end) OR picking_daily_art_supp.date_end IS NULL)\nLEFT JOIN box_cat ON box_cat.dw_country_code = bs.dw_country_code AND box_cat.sub_id = bs.sub_id\nLEFT JOIN box_costs ON box_costs.dw_country_code = bs.dw_country_code AND box_costs.box_id = bs.box_id AND box_costs.coffret_id = bs.coffret_id\n\nWHERE bs.payment_status = 'paid'\n\n)\nAS orders\nLEFT JOIN ops.shipping_costs sc ON orders.shipping_date >= sc.date_start AND (sc.date_end IS NULL OR orders.shipping_date <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = orders.shipping_mode_id\n\n\nUNION ALL\n\nSELECT orders.*, \n'daily'  as daily_monthly,\nsc.price AS shipping_transport_cost,\nsc.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n(1 + sc.shipping_taxes_rate) * sc.price AS shipping_cost,\n 'reexp' AS first_reexp,\nCASE WHEN quantity = 1 THEN 'mono' ELSE 'multi' END AS mono_multi, \nCOALESCE(smn.nice_name, orders.shipping_mode_name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight\nFROM\n(\n\nSELECT t.dw_country_code,\nNULL AS order_id,\nNULL as detail_id,\ns.id AS sub_id,\nb.date as box_date,\nSAFE_CAST(COALESCE(pot_box_reexp_shipments.shipping_date,DATE(t.timestamp)) AS DATE) AS shipping_date,\nextract(year from COALESCE(pot_box_reexp_shipments.shipping_date,DATE(t.timestamp))) AS year,\nextract(month from COALESCE(pot_box_reexp_shipments.shipping_date,DATE(t.timestamp))) AS month,\n0 AS gross_revenue,\n0 AS net_revenue,\n0 AS shipping_revenue,\nsm.id as shipping_mode_id,\nsm.title AS shipping_mode_name,\nCOALESCE(sm.b2c_method,sm.code) AS shipping_mode_code,\nCOALESCE(gct.nb_gws,0) + 1 AS quantity,\nCOALESCE(gct.gws_weight,0)/1000 AS gws_weight, -- kg\nCOALESCE(box_weight.weight, 382) /1000 AS box_weight, -- kg\nCOALESCE(gct.gws_weight,0)/1000 + COALESCE(box_weight.weight, 382) /1000 AS order_weight, -- kg\nCASE WHEN box_cat.alloc_cat = 'monthly' THEN 0 ELSE 1 END AS nb_dailies,\nCASE -- WHEN box_cat.alloc_cat = 'monthly' THEN 0 \nWHEN COALESCE(gct.nb_gws,0) = 0 THEN picking_daily_mono.price ELSE picking_daily_multi.price + COALESCE(gct.nb_gws,0)*picking_daily_art_supp.price END AS picking_cost,\ns.shipping_country,\nCOALESCE(gct.gws_costs,0) + COALESCE(box_costs.euro_purchase_price,0) AS product_cost\n\nFROM inter.tags t\nJOIN inter.order_detail_sub s ON s.id = t.link_id AND s.dw_country_code = t.dw_country_code\nJOIN `inter.shipping_modes` sm_original ON sm_original.id = s.shipping_mode AND sm_original.dw_country_code = s.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.dw_country_code = s.dw_country_code \nAND \n  (\n    (sm_original.tracked  AND sm.id = sm_original.id)\n  OR (sm_original.tracked is false AND sm_original.linked_shipping_mode_id IS NOT NULL AND sm.id = sm_original.linked_shipping_mode_id)\n  OR (sm_original.tracked is false AND sm_original.linked_shipping_mode_id IS NULL AND sm.id = 1)\n  )\nJOIN inter.boxes b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN pot_box_reexp_shipments ON pot_box_reexp_shipments.sub_id = s.id AND pot_box_reexp_shipments.dw_country_code = s.dw_country_code\nLEFT JOIN box_weight ON box_weight.dw_country_code = s.dw_country_code AND box_weight.box_id = s.box_id AND box_weight.coffret_id = s.coffret_id\nLEFT JOIN gws_costs_table gct ON gct.sub_id = s.id AND gct.dw_country_code = s.dw_country_code\nLEFT JOIN ops.logistics_costs picking_daily_mono ON picking_daily_mono.name = 'picking_daily_mono' AND b.date >= DATE(picking_daily_mono.date_start) AND (b.date <= DATE(picking_daily_mono.date_end) OR picking_daily_mono.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_multi ON picking_daily_multi.name = 'picking_daily_multi' AND b.date >= DATE(picking_daily_multi.date_start) AND (b.date <= DATE(picking_daily_multi.date_end) OR picking_daily_multi.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_art_supp ON picking_daily_art_supp.name = 'picking_daily_art_supp' AND b.date >= DATE(picking_daily_art_supp.date_start) AND (b.date <= DATE(picking_daily_art_supp.date_end) OR picking_daily_art_supp.date_end IS NULL)\nLEFT JOIN box_cat ON box_cat.dw_country_code = s.dw_country_code AND box_cat.sub_id = s.id\nLEFT JOIN box_costs ON box_costs.dw_country_code = t.dw_country_code AND box_costs.box_id = s.box_id AND box_costs.coffret_id = s.coffret_id\n\nWHERE t.type = 'SUB'\nAND t.value = 'reexp'\n\n)\nAS orders\nLEFT JOIN ops.shipping_costs sc ON orders.shipping_date >= sc.date_start AND (sc.date_end IS NULL OR orders.shipping_date <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = orders.shipping_mode_id\nWHERE orders.shipping_date <= CURRENT_DATE\n\nUNION ALL\n\n-- reexp mini\n\nSELECT orders.*, \n'reexp_mini'  as daily_monthly,\nsc.price AS shipping_transport_cost,\nsc.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n(1 + sc.shipping_taxes_rate) * sc.price AS shipping_cost,\n 'reexp_mini' AS first_reexp,\nCASE WHEN quantity = 1 THEN 'mono' ELSE 'multi' END AS mono_multi, \nCOALESCE(smn.nice_name, orders.shipping_mode_name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight\nFROM\n(\nSELECT mr.dw_country_code,\nNULL AS order_id,\nNULL AS detail_id,\nbs.sub_id,\nbs.date AS box_date,\nSAFE_CAST(COALESCE(mr.reexp_date, mr.date) AS DATE) AS shipping_date,\nextract(year from COALESCE(mr.reexp_date, mr.date)) AS year,\nextract(month from COALESCE(mr.reexp_date, mr.date)) AS month,\n0 AS gross_revenue,\n0 AS net_revenue,\n0 AS shipping_revenue,\nsm.id as shipping_mode_id,\nsm.title AS shipping_mode_name,\nCOALESCE(sm.b2c_method,sm.code) AS shipping_mode_code,\n1 AS quantity,\n0 AS gws_weight,\n0 AS box_weight,\nCOALESCE(iic.weight/1000,0.2) AS order_weight, -- avg weight 200g\n0 AS nb_dailies,\n0 AS picking_cost, -- to be done\nbs.shipping_country,\niic.euro_purchase_price AS product_cost\n\nFROM inter.mini_reexp mr\nJOIN inter.boxes b ON b.id = mr.box_id AND mr.dw_country_code = b.dw_country_code\nJOIN inter.products p ON p.id = mr.product_id AND p.dw_country_code = mr.dw_country_code\nJOIN sales.box_sales bs ON bs.sub_id = mr.sub_id AND bs.dw_country_code = mr.dw_country_code\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = p.sku\nJOIN `inter.shipping_modes` sm_original ON sm_original.id = bs.shipping_mode AND sm_original.dw_country_code = bs.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.dw_country_code = bs.dw_country_code \nAND \n  (\n    (COALESCE(mr.reexp_date, mr.date) < '2024-01-08' AND sm_original.tracked  AND sm.id = sm_original.id)\n  OR (sm_original.tracked is false AND COALESCE(mr.reexp_date, mr.date) < '2024-01-08' AND sm_original.linked_shipping_mode_id IS NOT NULL AND sm.id = sm_original.linked_shipping_mode_id)\n  OR (sm_original.tracked is false AND COALESCE(mr.reexp_date, mr.date) < '2024-01-08' AND sm_original.linked_shipping_mode_id IS NULL AND sm.id = 1)\n  OR (COALESCE(mr.reexp_date, mr.date) >= '2024-03-01' AND  sm.id = 2)\n  )\n\nWHERE /*mr.dw_country_code = 'FR'\nAND */\nmr.status_id = 1\n) orders\nLEFT JOIN ops.shipping_costs sc ON DATE(orders.shipping_date) >= sc.date_start AND (sc.date_end IS NULL OR DATE(orders.shipping_date) <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = orders.shipping_mode_id\nWHERE DATE(orders.shipping_date) <= CURRENT_DATE", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/box_shipments.sql", "compiled": true, "compiled_code": "WITH \nfirst_shipping_mode AS\n(\n  SELECT bec.dw_country_code, bec.sub_id, min(sm.id) AS id\n  FROM inter.b2c_exported_orders bec \n  LEFT JOIN inter.shipping_modes sm ON sm.b2c_method = bec.carrier_code AND sm.dw_country_code = bec.dw_country_code AND sm.id NOT IN (44,66,54)\n  WHERE bec.reference NOT LIKE '%REEXP%'\n  GROUP BY ALL\n),\npot_box_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.sub_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  \n  AND bon.sub_id > 0\n  AND bon.reference NOT LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.sub_id\n),\npot_box_reexp_shipments AS \n(\n  SELECT bon.dw_country_code, bon.sub_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  \n  AND bon.sub_id > 0\n  AND bon.reference LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code, bon.sub_id\n),\npot_shop_reexp_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, bon.order_detail_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  AND bon.sub_id IS NULL\n  AND bon.reference  LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id, bon.order_detail_id\n),\ngws_costs_table AS (\n  SELECT sol.dw_country_code,\n         sol.sub_id,\n         SUM(d.quantity) AS nb_gws,\n         COALESCE(SUM(c.purchase_price * d.quantity), 0) AS gws_costs,\n         SUM(d.quantity*c.weight) AS gws_weight\n  FROM inter.sub_order_link sol\n  INNER JOIN inter.orders o ON sol.dw_country_code = o.dw_country_code AND sol.order_id = o.id\n  INNER JOIN inter.order_details d ON o.dw_country_code = d.dw_country_code AND o.id = d.order_id\n  INNER JOIN product.catalog c ON d.dw_country_code = c.dw_country_code AND d.product_id = c.product_id\n  WHERE d.special_type = 'GWS'\n  GROUP BY sol.dw_country_code,\n           sol.sub_id\n),\nbox_weight AS \n(\n  SELECT p.dw_country_code, p.box_id, p.coffret_id, COALESCE(max(CASE WHEN p.weight = 0 THEN NULL ELSE p.weight END ),CASE WHEN b.box_quantity = 1 THEN 382 WHEN b.box_quantity = 2 THEN 800 END) AS weight\n  FROM inter.products p\n  JOIN inter.boxes b ON b.id = p.box_id AND b.dw_country_code = p.dw_country_code\n  WHERE p.product_codification_id = 29\n  AND p.box_id > 0\n  AND p.coffret_id > 0\n  GROUP BY p.dw_country_code, p.box_id, p.coffret_id, b.box_quantity\n  ORDER BY p.dw_country_code, p.box_id, p.coffret_id\n),\nbox_cat AS\n(\nSELECT\n  dw_country_code,\n  sub_id,\n  date_alloc,\n  CASE WHEN allocation_method = 'BATCH_ALLOCATION_MONTHLY' THEN 'monthly' ELSE 'daily' END as alloc_cat\n  FROM\n(\n  SELECT\n    dw_country_code,\n    sub_id,\n    date_alloc,\n    allocation_method,\n    ROW_NUMBER() OVER (PARTITION BY dw_country_code, sub_id ORDER BY date_alloc) AS row_num\n  FROM\n    inter.allocation_history\n)\nWHERE row_num = 1\n\n),\nbox_costs AS (\n  SELECT p.dw_country_code, p.box_id, p.coffret_id, p.sku, max(iic.euro_purchase_price) AS euro_purchase_price\nFROM inter.products p\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = p.sku\nWHERE p.box_id > 0 AND p.coffret_id > 0\nGROUP BY all\n)\n\n\n\nSELECT orders.*, \nCASE WHEN orders.nb_dailies > 0 THEN 'daily' ELSE 'monthly' END as daily_monthly,\nCOALESCE(CASE WHEN orders.nb_dailies > 0 THEN COALESCE(sc.price_daily, COALESCE(sc.price,0)) ELSE sc.price END,2.65) AS shipping_transport_cost, \nCOALESCE(sc.shipping_taxes_rate * CASE WHEN orders.nb_dailies > 0 THEN COALESCE(sc.price_daily, sc.price) ELSE sc.price END,0) AS total_shipping_taxes,\n(1 + COALESCE(sc.shipping_taxes_rate,0)) * CASE WHEN orders.nb_dailies > 0 THEN COALESCE(sc.price_daily, COALESCE(sc.price,0)) ELSE COALESCE(sc.price,0) END AS shipping_cost,\n'first' as first_reexp,\nCASE WHEN quantity = 1 THEN 'mono' ELSE 'multi' END AS mono_multi, \nCOALESCE(smn.nice_name, orders.shipping_mode_name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight\n\nFROM\n(\nSELECT bs.dw_country_code,\nbs.order_id,\nbs.order_detail_id,\nbs.sub_id,\nbs.date as box_date,\nCOALESCE(pbs.shipping_date, bs.date) AS shipping_date,\nextract(year from COALESCE(pbs.shipping_date, bs.date)) AS year,\nextract(month from COALESCE(pbs.shipping_date, bs.date)) AS month,\nbs.gross_revenue,\nbs.net_revenue,\nbs.shipping AS shipping_revenue,\nsm.id as shipping_mode_id,\nsm.title AS shipping_mode_name,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nCOALESCE(gct.nb_gws,0) + 1 AS quantity,\nCOALESCE(gct.gws_weight,0)/1000 AS gws_weight, -- kg\nCOALESCE(box_weight.weight, 382) /1000 AS box_weight, -- kg\nCOALESCE(gct.gws_weight,0)/1000 + COALESCE(box_weight.weight, 382) /1000 AS order_weight, -- kg\nCASE WHEN box_cat.alloc_cat = 'monthly' THEN 0 ELSE 1 END AS nb_dailies,\nCASE WHEN box_cat.alloc_cat = 'monthly' THEN 0 -- picking_daily_multi.price \nWHEN COALESCE(gct.nb_gws,0) = 0 THEN picking_daily_mono.price ELSE picking_daily_multi.price + COALESCE(gct.nb_gws,0)*picking_daily_art_supp.price END AS picking_cost,\nbs.shipping_country,\nCOALESCE(gct.gws_costs,0) + COALESCE(box_costs.euro_purchase_price,0) AS product_cost\n\nFROM sales.box_sales as bs\nLEFT JOIN first_shipping_mode sm1 ON sm1.sub_id = bs.sub_id AND sm1.dw_country_code = bs.dw_country_code\nLEFT JOIN pot_box_shipments pbs ON pbs.sub_id = bs.sub_id AND pbs.dw_country_code = bs.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = COALESCE(sm1.id,bs.shipping_mode) AND sm.dw_country_code = bs.dw_country_code\nLEFT JOIN gws_costs_table gct ON gct.sub_id = bs.sub_id AND gct.dw_country_code = bs.dw_country_code\nLEFT JOIN box_weight ON box_weight.dw_country_code = bs.dw_country_code AND box_weight.box_id = bs.box_id AND box_weight.coffret_id = bs.coffret_id\nLEFT JOIN ops.logistics_costs picking_daily_mono ON picking_daily_mono.name = 'picking_daily_mono' AND bs.date >= DATE(picking_daily_mono.date_start) AND (bs.date <= DATE(picking_daily_mono.date_end) OR picking_daily_mono.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_multi ON picking_daily_multi.name = 'picking_daily_multi' AND bs.date >= DATE(picking_daily_multi.date_start) AND (bs.date <= DATE(picking_daily_multi.date_end) OR picking_daily_multi.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_art_supp ON picking_daily_art_supp.name = 'picking_daily_art_supp' AND bs.date >= DATE(picking_daily_art_supp.date_start) AND (bs.date <= DATE(picking_daily_art_supp.date_end) OR picking_daily_art_supp.date_end IS NULL)\nLEFT JOIN box_cat ON box_cat.dw_country_code = bs.dw_country_code AND box_cat.sub_id = bs.sub_id\nLEFT JOIN box_costs ON box_costs.dw_country_code = bs.dw_country_code AND box_costs.box_id = bs.box_id AND box_costs.coffret_id = bs.coffret_id\n\nWHERE bs.payment_status = 'paid'\n\n)\nAS orders\nLEFT JOIN ops.shipping_costs sc ON orders.shipping_date >= sc.date_start AND (sc.date_end IS NULL OR orders.shipping_date <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = orders.shipping_mode_id\n\n\nUNION ALL\n\nSELECT orders.*, \n'daily'  as daily_monthly,\nsc.price AS shipping_transport_cost,\nsc.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n(1 + sc.shipping_taxes_rate) * sc.price AS shipping_cost,\n 'reexp' AS first_reexp,\nCASE WHEN quantity = 1 THEN 'mono' ELSE 'multi' END AS mono_multi, \nCOALESCE(smn.nice_name, orders.shipping_mode_name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight\nFROM\n(\n\nSELECT t.dw_country_code,\nNULL AS order_id,\nNULL as detail_id,\ns.id AS sub_id,\nb.date as box_date,\nSAFE_CAST(COALESCE(pot_box_reexp_shipments.shipping_date,DATE(t.timestamp)) AS DATE) AS shipping_date,\nextract(year from COALESCE(pot_box_reexp_shipments.shipping_date,DATE(t.timestamp))) AS year,\nextract(month from COALESCE(pot_box_reexp_shipments.shipping_date,DATE(t.timestamp))) AS month,\n0 AS gross_revenue,\n0 AS net_revenue,\n0 AS shipping_revenue,\nsm.id as shipping_mode_id,\nsm.title AS shipping_mode_name,\nCOALESCE(sm.b2c_method,sm.code) AS shipping_mode_code,\nCOALESCE(gct.nb_gws,0) + 1 AS quantity,\nCOALESCE(gct.gws_weight,0)/1000 AS gws_weight, -- kg\nCOALESCE(box_weight.weight, 382) /1000 AS box_weight, -- kg\nCOALESCE(gct.gws_weight,0)/1000 + COALESCE(box_weight.weight, 382) /1000 AS order_weight, -- kg\nCASE WHEN box_cat.alloc_cat = 'monthly' THEN 0 ELSE 1 END AS nb_dailies,\nCASE -- WHEN box_cat.alloc_cat = 'monthly' THEN 0 \nWHEN COALESCE(gct.nb_gws,0) = 0 THEN picking_daily_mono.price ELSE picking_daily_multi.price + COALESCE(gct.nb_gws,0)*picking_daily_art_supp.price END AS picking_cost,\ns.shipping_country,\nCOALESCE(gct.gws_costs,0) + COALESCE(box_costs.euro_purchase_price,0) AS product_cost\n\nFROM inter.tags t\nJOIN inter.order_detail_sub s ON s.id = t.link_id AND s.dw_country_code = t.dw_country_code\nJOIN `inter.shipping_modes` sm_original ON sm_original.id = s.shipping_mode AND sm_original.dw_country_code = s.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.dw_country_code = s.dw_country_code \nAND \n  (\n    (sm_original.tracked  AND sm.id = sm_original.id)\n  OR (sm_original.tracked is false AND sm_original.linked_shipping_mode_id IS NOT NULL AND sm.id = sm_original.linked_shipping_mode_id)\n  OR (sm_original.tracked is false AND sm_original.linked_shipping_mode_id IS NULL AND sm.id = 1)\n  )\nJOIN inter.boxes b ON b.id = s.box_id AND b.dw_country_code = s.dw_country_code\nLEFT JOIN pot_box_reexp_shipments ON pot_box_reexp_shipments.sub_id = s.id AND pot_box_reexp_shipments.dw_country_code = s.dw_country_code\nLEFT JOIN box_weight ON box_weight.dw_country_code = s.dw_country_code AND box_weight.box_id = s.box_id AND box_weight.coffret_id = s.coffret_id\nLEFT JOIN gws_costs_table gct ON gct.sub_id = s.id AND gct.dw_country_code = s.dw_country_code\nLEFT JOIN ops.logistics_costs picking_daily_mono ON picking_daily_mono.name = 'picking_daily_mono' AND b.date >= DATE(picking_daily_mono.date_start) AND (b.date <= DATE(picking_daily_mono.date_end) OR picking_daily_mono.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_multi ON picking_daily_multi.name = 'picking_daily_multi' AND b.date >= DATE(picking_daily_multi.date_start) AND (b.date <= DATE(picking_daily_multi.date_end) OR picking_daily_multi.date_end IS NULL)\nLEFT JOIN ops.logistics_costs picking_daily_art_supp ON picking_daily_art_supp.name = 'picking_daily_art_supp' AND b.date >= DATE(picking_daily_art_supp.date_start) AND (b.date <= DATE(picking_daily_art_supp.date_end) OR picking_daily_art_supp.date_end IS NULL)\nLEFT JOIN box_cat ON box_cat.dw_country_code = s.dw_country_code AND box_cat.sub_id = s.id\nLEFT JOIN box_costs ON box_costs.dw_country_code = t.dw_country_code AND box_costs.box_id = s.box_id AND box_costs.coffret_id = s.coffret_id\n\nWHERE t.type = 'SUB'\nAND t.value = 'reexp'\n\n)\nAS orders\nLEFT JOIN ops.shipping_costs sc ON orders.shipping_date >= sc.date_start AND (sc.date_end IS NULL OR orders.shipping_date <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = orders.shipping_mode_id\nWHERE orders.shipping_date <= CURRENT_DATE\n\nUNION ALL\n\n-- reexp mini\n\nSELECT orders.*, \n'reexp_mini'  as daily_monthly,\nsc.price AS shipping_transport_cost,\nsc.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n(1 + sc.shipping_taxes_rate) * sc.price AS shipping_cost,\n 'reexp_mini' AS first_reexp,\nCASE WHEN quantity = 1 THEN 'mono' ELSE 'multi' END AS mono_multi, \nCOALESCE(smn.nice_name, orders.shipping_mode_name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight\nFROM\n(\nSELECT mr.dw_country_code,\nNULL AS order_id,\nNULL AS detail_id,\nbs.sub_id,\nbs.date AS box_date,\nSAFE_CAST(COALESCE(mr.reexp_date, mr.date) AS DATE) AS shipping_date,\nextract(year from COALESCE(mr.reexp_date, mr.date)) AS year,\nextract(month from COALESCE(mr.reexp_date, mr.date)) AS month,\n0 AS gross_revenue,\n0 AS net_revenue,\n0 AS shipping_revenue,\nsm.id as shipping_mode_id,\nsm.title AS shipping_mode_name,\nCOALESCE(sm.b2c_method,sm.code) AS shipping_mode_code,\n1 AS quantity,\n0 AS gws_weight,\n0 AS box_weight,\nCOALESCE(iic.weight/1000,0.2) AS order_weight, -- avg weight 200g\n0 AS nb_dailies,\n0 AS picking_cost, -- to be done\nbs.shipping_country,\niic.euro_purchase_price AS product_cost\n\nFROM inter.mini_reexp mr\nJOIN inter.boxes b ON b.id = mr.box_id AND mr.dw_country_code = b.dw_country_code\nJOIN inter.products p ON p.id = mr.product_id AND p.dw_country_code = mr.dw_country_code\nJOIN sales.box_sales bs ON bs.sub_id = mr.sub_id AND bs.dw_country_code = mr.dw_country_code\nJOIN `teamdata-291012.catalog.inventory_item_catalog` iic ON iic.sku = p.sku\nJOIN `inter.shipping_modes` sm_original ON sm_original.id = bs.shipping_mode AND sm_original.dw_country_code = bs.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.dw_country_code = bs.dw_country_code \nAND \n  (\n    (COALESCE(mr.reexp_date, mr.date) < '2024-01-08' AND sm_original.tracked  AND sm.id = sm_original.id)\n  OR (sm_original.tracked is false AND COALESCE(mr.reexp_date, mr.date) < '2024-01-08' AND sm_original.linked_shipping_mode_id IS NOT NULL AND sm.id = sm_original.linked_shipping_mode_id)\n  OR (sm_original.tracked is false AND COALESCE(mr.reexp_date, mr.date) < '2024-01-08' AND sm_original.linked_shipping_mode_id IS NULL AND sm.id = 1)\n  OR (COALESCE(mr.reexp_date, mr.date) >= '2024-03-01' AND  sm.id = 2)\n  )\n\nWHERE /*mr.dw_country_code = 'FR'\nAND */\nmr.status_id = 1\n) orders\nLEFT JOIN ops.shipping_costs sc ON DATE(orders.shipping_date) >= sc.date_start AND (sc.date_end IS NULL OR DATE(orders.shipping_date) <= sc.date_end) AND orders.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR orders.order_weight < sc.max_weight) AND sc.shipping_mode_id = orders.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = orders.shipping_mode_id\nWHERE DATE(orders.shipping_date) <= CURRENT_DATE", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.crm_data": {"database": "teamdata-291012", "schema": "user", "name": "crm_data", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/crm_data.sql", "original_file_path": "models/schedule/daily/5am/teamdata/crm_data.sql", "unique_id": "model.warehouse.crm_data", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "crm_data"], "alias": "crm_data", "checksum": {"name": "sha256", "checksum": "4b58dafbfb35eb10c5dec4fe44c46401685d8f39cfdec6c47a640d1c0d8a88b9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.697151, "relation_name": "`teamdata-291012`.`user`.`crm_data`", "raw_code": "select dw_country_code,email,user_id,max(open_email) open_email,\n        max(click) click,max(date_last_open_email) date_last_open_email,\n        max(date_last_click_email)date_last_click_email,max(ltm_client_email_rate)ltm_client_email_rate,\n        max(ltm_open_email_rate) ltm_open_email_rate,max(ltm_click_email)ltm_click_email,\n        max(ltm_open_email)ltm_open_email,max(ltm_nb_email)ltm_nb_email from (\n    SELECT distinct dw_country_code, email, NULL AS user_id,\n            MAX(lower(status)  = 'open') AS open_email,\n         MAX(lower(status) = 'click') AS click,\n         MAX(CASE WHEN lower(status) = 'open' THEN event_date END) AS date_last_open_email,\n         MAX(CASE WHEN lower(status) = 'click' THEN event_date END) AS date_last_click_email,\n         SAFE_DIVIDE(COUNTIF(lower(status) = 'click' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(status) = 'done' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_client_email_rate,\n         SAFE_DIVIDE(COUNTIF(lower(status) = 'open' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(status) = 'done' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_open_email_rate,\n         COUNTIF(lower(status) = 'click' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_click_email,\n         COUNTIF(lower(status) = 'open' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_open_email,\n         COUNTIF(lower(status) = 'done' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_email\n    FROM {{ ref('splio_data_dedup') }} \n    WHERE event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 36 MONTH)\n    GROUP BY ALL\n    union all\n     \n\n\n     -- imagino part\n select custom_country,address,null,\n MAX(lower(t.type)  = 'open') AS open_email,\n         MAX(lower(t.type) = 'click') AS click,\n         date(MAX(CASE WHEN lower(t.type) = 'open' THEN eventdate END)) AS date_last_open_email,\n         date(MAX(CASE WHEN lower(t.type) = 'click' THEN eventdate END)) AS date_last_click_email,\n         SAFE_DIVIDE(COUNTIF(lower(t.type) = 'click' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(t.type) = 'done' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_client_email_rate,\n         SAFE_DIVIDE(COUNTIF(lower(t.type) = 'open' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(t.type) = 'done' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_open_email_rate,\n         COUNTIF(lower(t.type) = 'click' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_click_email,\n         COUNTIF(lower(t.type) = 'open' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_open_email,\n         COUNTIF(lower(t.type) = 'done' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_email\n FROM cdpimagino.imaginoreplicatedcampaign c\n LEFT JOIN cdpimagino.imaginoreplicatedtracking t ON t.activationid = c.id\n--where t.address='clementine.clement+compteboximagino@blissim.fr'\ngroup by all\n \n        ) \n        group by all", "language": "sql", "refs": [{"name": "splio_data_dedup", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.splio_data_dedup"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/crm_data.sql", "compiled": true, "compiled_code": "select dw_country_code,email,user_id,max(open_email) open_email,\n        max(click) click,max(date_last_open_email) date_last_open_email,\n        max(date_last_click_email)date_last_click_email,max(ltm_client_email_rate)ltm_client_email_rate,\n        max(ltm_open_email_rate) ltm_open_email_rate,max(ltm_click_email)ltm_click_email,\n        max(ltm_open_email)ltm_open_email,max(ltm_nb_email)ltm_nb_email from (\n    SELECT distinct dw_country_code, email, NULL AS user_id,\n            MAX(lower(status)  = 'open') AS open_email,\n         MAX(lower(status) = 'click') AS click,\n         MAX(CASE WHEN lower(status) = 'open' THEN event_date END) AS date_last_open_email,\n         MAX(CASE WHEN lower(status) = 'click' THEN event_date END) AS date_last_click_email,\n         SAFE_DIVIDE(COUNTIF(lower(status) = 'click' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(status) = 'done' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_client_email_rate,\n         SAFE_DIVIDE(COUNTIF(lower(status) = 'open' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(status) = 'done' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_open_email_rate,\n         COUNTIF(lower(status) = 'click' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_click_email,\n         COUNTIF(lower(status) = 'open' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_open_email,\n         COUNTIF(lower(status) = 'done' AND event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_email\n    FROM `teamdata-291012`.`user`.`splio_data_dedup` \n    WHERE event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 36 MONTH)\n    GROUP BY ALL\n    union all\n     \n\n\n     -- imagino part\n select custom_country,address,null,\n MAX(lower(t.type)  = 'open') AS open_email,\n         MAX(lower(t.type) = 'click') AS click,\n         date(MAX(CASE WHEN lower(t.type) = 'open' THEN eventdate END)) AS date_last_open_email,\n         date(MAX(CASE WHEN lower(t.type) = 'click' THEN eventdate END)) AS date_last_click_email,\n         SAFE_DIVIDE(COUNTIF(lower(t.type) = 'click' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(t.type) = 'done' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_client_email_rate,\n         SAFE_DIVIDE(COUNTIF(lower(t.type) = 'open' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(lower(t.type) = 'done' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_open_email_rate,\n         COUNTIF(lower(t.type) = 'click' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_click_email,\n         COUNTIF(lower(t.type) = 'open' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_open_email,\n         COUNTIF(lower(t.type) = 'done' AND date(eventdate) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_email\n FROM cdpimagino.imaginoreplicatedcampaign c\n LEFT JOIN cdpimagino.imaginoreplicatedtracking t ON t.activationid = c.id\n--where t.address='clementine.clement+compteboximagino@blissim.fr'\ngroup by all\n \n        ) \n        group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.shop_shipments": {"database": "teamdata-291012", "schema": "ops", "name": "shop_shipments", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/shop_shipments.sql", "original_file_path": "models/schedule/daily/5am/teamdata/shop_shipments.sql", "unique_id": "model.warehouse.shop_shipments", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "shop_shipments"], "alias": "shop_shipments", "checksum": {"name": "sha256", "checksum": "284a7cfbeec942408481dff2475cca7306d215d354ef452a99ff0d1f3cd9f7d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.6985111, "relation_name": "`teamdata-291012`.`ops`.`shop_shipments`", "raw_code": "WITH \nfirst_shipping_mode AS\n(\n  SELECT bec.dw_country_code, \n  CAST(REGEXP_EXTRACT(reference, r'ORD-(\\d+)') AS INT64) AS order_id, \n  min(sm.id) AS id\n  FROM inter.b2c_exported_orders bec \n  LEFT JOIN inter.shipping_modes sm ON sm.b2c_method = bec.carrier_code AND sm.dw_country_code = bec.dw_country_code\n  WHERE bec.reference NOT LIKE '%REEXP%'\n  AND bec.reference LIKE '%ORD%'\n  GROUP BY ALL\n),\npot_shop_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  AND (bon.order_detail_id IS NULL OR bon.order_detail_id = 0)\n  AND (bon.sub_id IS NULL OR bon.sub_id = 0)\n  AND bon.reference NOT LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id\n),\npot_shop_integration AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, min(bon.event_date) AS integration_date\n  FROM `inter.b2c_order_notifications` bon\n  LEFT JOIN inter.b2c_order_notifications bon1 ON bon1.reference = bon.reference AND bon1.dw_country_code = bon.dw_country_code AND bon1.type = 99 -- commande annul\u00e9e\n  WHERE bon.type = 50\n  AND (bon.order_detail_id IS NULL OR bon.order_detail_id = 0)\n  AND (bon.sub_id IS NULL OR bon.sub_id = 0)\n  AND bon.reference NOT LIKE '%REEXP%'\n  AND bon1.reference IS NULL\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id\n),\npot_shop_reexp_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, CASE WHEN bon.order_detail_id = 0 THEN NULL ELSE bon.order_detail_id END AS order_detail_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  AND (bon.sub_id IS NULL OR bon.sub_id = 0)\n  AND bon.reference  LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id, bon.order_detail_id\n)\n\n\n-- shop first shipments\nSELECT som.dw_country_code, \nsom.order_id, \nNULL as order_detail_id,\n-- NULL AS sub_id,\nsom.order_date,\nCOALESCE(psi.integration_date, som.order_date) as integration_date,\nCOALESCE(psc.shipping_date, som.order_date) as shipping_date,\nextract(year from COALESCE(psc.shipping_date, som.order_date)) AS year,\nextract(month from COALESCE(psc.shipping_date, som.order_date)) AS month,\nsom.gross_revenue,\nsom.net_revenue,\nsom.shipping_revenue,\nsm.id as shipping_mode_id,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nsm.title as shipping_mode_name,\n-- NULL AS quantity,\nsom.order_weight,\nsom.order_picking AS picking_cost,\nsm.country AS shipping_country,\nsom.packaging_cost,\nsom.shipping_taxes_rate,\nsom.shipping_transport_cost,\nsom.total_shipping_taxes,\nsom.shipping_cost,\n'first' AS first_reexp,\nCOALESCE(smn.nice_name, sm.name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight,\nCASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       som.products_cost,\nsom.quantity,\nCASE WHEN COALESCE(som.quantity,0) + COALESCE(som.msg_perso,0) > 1 THEN 'multi' ELSE 'mono' END AS mono_multi,\nsom.msg_perso\n\nFROM `sales.shop_orders_margin` som\nLEFT JOIN first_shipping_mode sm1 ON sm1.order_id = som.order_id AND sm1.dw_country_code = som.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = COALESCE(sm1.id,som.shipping_mode_id) AND sm.dw_country_code = som.dw_country_code\nLEFT JOIN pot_shop_shipments psc ON psc.order_id = som.order_id AND psc.dw_country_code = som.dw_country_code\nLEFT JOIN pot_shop_integration psi ON psi.order_id = som.order_id AND psi.dw_country_code = som.dw_country_code\nLEFT JOIN ops.shipping_costs sc ON COALESCE(psc.shipping_date, som.order_date) >= sc.date_start AND (sc.date_end IS NULL OR COALESCE(psc.shipping_date, som.order_date) <= sc.date_end) AND som.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR som.order_weight < sc.max_weight) AND sc.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = som.shipping_mode_id\n\nUNION ALL\n\n\n-- reexp shop\nSELECT som.dw_country_code, \nsom.order_id, \nNULL as order_detail_id,\n-- NULL AS sub_id,\nDATE(t.timestamp) AS order_date,\nNULL AS integration_date,\nCOALESCE(psc.shipping_date, DATE(t.timestamp)) as shipping_date,\nextract(year from COALESCE(psc.shipping_date, DATE(t.timestamp))) AS year,\nextract(month from COALESCE(psc.shipping_date, DATE(t.timestamp))) AS month,\nsom.gross_revenue,\nsom.net_revenue,\nsom.shipping_revenue,\nsm.id as shipping_mode_id,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nsm.title as shipping_mode_name,\n-- NULL AS quantity,\nsom.order_weight,\nsom.order_picking AS picking_cost,\nsm.country AS shipping_country,\nsom.packaging_cost,\nsom.shipping_taxes_rate,\nsom.shipping_transport_cost,\nsom.total_shipping_taxes,\nsom.shipping_cost,\n'reexp' AS first_reexp,\nCOALESCE(smn.nice_name, sm.name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight,\nCASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       som.products_cost,\n    som.quantity,\nCASE WHEN COALESCE(som.quantity,0) + COALESCE(som.msg_perso,0) > 1 THEN 'multi' ELSE 'mono' END AS mono_multi,\nsom.msg_perso\nFROM inter.tags t\nJOIN `sales.shop_orders_margin` som ON som.order_id = t.link_id AND som.dw_country_code = t.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = som.shipping_mode_id AND sm.dw_country_code = som.dw_country_code\nLEFT JOIN pot_shop_reexp_shipments psc ON psc.order_id = som.order_id AND psc.dw_country_code = som.dw_country_code AND psc.order_detail_id IS NULL\nLEFT JOIN ops.shipping_costs sc ON COALESCE(psc.shipping_date, DATE(t.timestamp)) >= sc.date_start AND (sc.date_end IS NULL OR COALESCE(psc.shipping_date, DATE(t.timestamp)) <= sc.date_end) AND som.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR som.order_weight < sc.max_weight) AND sc.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = som.shipping_mode_id\nWHERE t.type = 'ORD'\nAND t.value = 'reexp'\n\n\nUNION ALL\n\n-- reexp shop - DET - REEXP-DET\nSELECT som.dw_country_code, \nsom.order_id, \nNULL as order_detail_id,\n-- NULL AS sub_id,\nDATE(t.timestamp) AS order_date,\nNULL AS integration_date,\nCOALESCE(psc.shipping_date, DATE(t.timestamp)) as shipping_date,\nsom.year,\nsom.month,\nsom.gross_revenue,\nsom.net_revenue,\nsom.shipping_revenue,\nsm.id as shipping_mode_id,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nsm.title as shipping_mode_name,\n-- NULL AS quantity,\n(d.quantity * COALESCE(c.weight, 0.2) + 0.15)/1000 AS order_weight,\ndlc_first_product.price \n+\n(dlc_prepacked.price - dlc_first_product.price) * \n(CASE WHEN d.quantity = 1 THEN 1 ELSE 0 END )\n*\nCASE WHEN pc.PC_SPLENDIST OR pc.PC_CALENDAR THEN 1 ELSE 0 END -- deduction if only one calendar or splendist\n+\n(d.quantity-1) * dlc_next_product.price  AS picking_cost,\nsm.country AS shipping_country,\nsom.packaging_cost,\nsc.shipping_taxes_rate AS shipping_taxes_rate,\nsc.price AS shipping_transport_cost,\nsc.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n(1 + sc.shipping_taxes_rate) * sc.price  AS shipping_cost,\n'reexp' AS first_reexp,\nCOALESCE(smn.nice_name, sm.name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight,\nCASE WHEN som.codification = 0 THEN 'ESHOP'\n            WHEN som.codification = 1 THEN 'BYOB'\n            WHEN som.codification = 2 THEN 'LTE'\n            WHEN som.codification = 8 THEN 'SPLENDIST'\n            WHEN som.codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       c.euro_purchase_price*d.quantity AS products_cost,\n      d.quantity,\nCASE WHEN d.quantity > 1 THEN 'multi' ELSE 'mono' END AS mono_multi,\n0 AS msg_perso\n\nFROM inter.tags t\nJOIN inter.order_details d ON d.id = t.link_id AND d.dw_country_code = t.dw_country_code\nJOIN `sales.shop_orders_margin` som ON som.order_id = d.order_id AND som.dw_country_code = t.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = som.shipping_mode_id AND sm.dw_country_code = som.dw_country_code\nJOIN product.catalog AS c ON d.dw_country_code = c.dw_country_code AND c.product_id = d.product_id\nLEFT JOIN pot_shop_reexp_shipments psc ON psc.order_id = d.order_id AND psc.order_detail_id = d.id AND psc.dw_country_code = d.dw_country_code \nLEFT JOIN ops.shipping_costs sc ON COALESCE(psc.shipping_date, DATE(t.timestamp)) >= sc.date_start AND (sc.date_end IS NULL OR COALESCE(psc.shipping_date, DATE(t.timestamp)) <= sc.date_end) AND (d.quantity * COALESCE(c.weight, 0.2) + 0.15)/1000 >= sc.min_weight AND (sc.max_weight IS NULL OR (d.quantity * COALESCE(c.weight, 0.2) + 0.15)/1000 < sc.max_weight) AND sc.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.logistics_costs dlc_first_product ON dlc_first_product.name = 'picking first article' AND COALESCE(psc.shipping_date, DATE(t.timestamp)) >= DATE(dlc_first_product.date_start) AND (COALESCE(psc.shipping_date, DATE(t.timestamp)) <= DATE(dlc_first_product.date_end) OR dlc_first_product.date_end IS NULL)\n  LEFT JOIN ops.logistics_costs dlc_next_product ON dlc_next_product.name = 'picking next article' AND COALESCE(psc.shipping_date, DATE(t.timestamp)) >= DATE(dlc_next_product.date_start) AND (COALESCE(psc.shipping_date, DATE(t.timestamp)) <= DATE(dlc_next_product.date_end) OR dlc_next_product.date_end IS NULL)\n  LEFT JOIN ops.logistics_costs dlc_prepacked ON dlc_prepacked.name = 'picking prepacked' AND COALESCE(psc.shipping_date, DATE(t.timestamp)) >= DATE(dlc_prepacked.date_start) AND (COALESCE(psc.shipping_date, DATE(t.timestamp)) <= DATE(dlc_prepacked.date_end) OR dlc_prepacked.date_end IS NULL)\n  LEFT JOIN snippets.product_codifications pc ON c.product_codification_id = pc.product_codification_id\n  \nWHERE t.type = 'DET'\nAND t.value = 'reexp'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/shop_shipments.sql", "compiled": true, "compiled_code": "WITH \nfirst_shipping_mode AS\n(\n  SELECT bec.dw_country_code, \n  CAST(REGEXP_EXTRACT(reference, r'ORD-(\\d+)') AS INT64) AS order_id, \n  min(sm.id) AS id\n  FROM inter.b2c_exported_orders bec \n  LEFT JOIN inter.shipping_modes sm ON sm.b2c_method = bec.carrier_code AND sm.dw_country_code = bec.dw_country_code\n  WHERE bec.reference NOT LIKE '%REEXP%'\n  AND bec.reference LIKE '%ORD%'\n  GROUP BY ALL\n),\npot_shop_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  AND (bon.order_detail_id IS NULL OR bon.order_detail_id = 0)\n  AND (bon.sub_id IS NULL OR bon.sub_id = 0)\n  AND bon.reference NOT LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id\n),\npot_shop_integration AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, min(bon.event_date) AS integration_date\n  FROM `inter.b2c_order_notifications` bon\n  LEFT JOIN inter.b2c_order_notifications bon1 ON bon1.reference = bon.reference AND bon1.dw_country_code = bon.dw_country_code AND bon1.type = 99 -- commande annul\u00e9e\n  WHERE bon.type = 50\n  AND (bon.order_detail_id IS NULL OR bon.order_detail_id = 0)\n  AND (bon.sub_id IS NULL OR bon.sub_id = 0)\n  AND bon.reference NOT LIKE '%REEXP%'\n  AND bon1.reference IS NULL\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id\n),\npot_shop_reexp_shipments AS \n(\n  SELECT bon.dw_country_code,bon.reference, bon.order_id, CASE WHEN bon.order_detail_id = 0 THEN NULL ELSE bon.order_detail_id END AS order_detail_id, DATE(min(bon.event_date)) AS shipping_date\n  FROM `inter.b2c_order_notifications` bon\n  WHERE bon.type = 5\n  AND (bon.sub_id IS NULL OR bon.sub_id = 0)\n  AND bon.reference  LIKE '%REEXP%'\n  GROUP BY bon.dw_country_code,bon.reference, bon.order_id, bon.order_detail_id\n)\n\n\n-- shop first shipments\nSELECT som.dw_country_code, \nsom.order_id, \nNULL as order_detail_id,\n-- NULL AS sub_id,\nsom.order_date,\nCOALESCE(psi.integration_date, som.order_date) as integration_date,\nCOALESCE(psc.shipping_date, som.order_date) as shipping_date,\nextract(year from COALESCE(psc.shipping_date, som.order_date)) AS year,\nextract(month from COALESCE(psc.shipping_date, som.order_date)) AS month,\nsom.gross_revenue,\nsom.net_revenue,\nsom.shipping_revenue,\nsm.id as shipping_mode_id,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nsm.title as shipping_mode_name,\n-- NULL AS quantity,\nsom.order_weight,\nsom.order_picking AS picking_cost,\nsm.country AS shipping_country,\nsom.packaging_cost,\nsom.shipping_taxes_rate,\nsom.shipping_transport_cost,\nsom.total_shipping_taxes,\nsom.shipping_cost,\n'first' AS first_reexp,\nCOALESCE(smn.nice_name, sm.name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight,\nCASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       som.products_cost,\nsom.quantity,\nCASE WHEN COALESCE(som.quantity,0) + COALESCE(som.msg_perso,0) > 1 THEN 'multi' ELSE 'mono' END AS mono_multi,\nsom.msg_perso\n\nFROM `sales.shop_orders_margin` som\nLEFT JOIN first_shipping_mode sm1 ON sm1.order_id = som.order_id AND sm1.dw_country_code = som.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = COALESCE(sm1.id,som.shipping_mode_id) AND sm.dw_country_code = som.dw_country_code\nLEFT JOIN pot_shop_shipments psc ON psc.order_id = som.order_id AND psc.dw_country_code = som.dw_country_code\nLEFT JOIN pot_shop_integration psi ON psi.order_id = som.order_id AND psi.dw_country_code = som.dw_country_code\nLEFT JOIN ops.shipping_costs sc ON COALESCE(psc.shipping_date, som.order_date) >= sc.date_start AND (sc.date_end IS NULL OR COALESCE(psc.shipping_date, som.order_date) <= sc.date_end) AND som.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR som.order_weight < sc.max_weight) AND sc.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = som.shipping_mode_id\n\nUNION ALL\n\n\n-- reexp shop\nSELECT som.dw_country_code, \nsom.order_id, \nNULL as order_detail_id,\n-- NULL AS sub_id,\nDATE(t.timestamp) AS order_date,\nNULL AS integration_date,\nCOALESCE(psc.shipping_date, DATE(t.timestamp)) as shipping_date,\nextract(year from COALESCE(psc.shipping_date, DATE(t.timestamp))) AS year,\nextract(month from COALESCE(psc.shipping_date, DATE(t.timestamp))) AS month,\nsom.gross_revenue,\nsom.net_revenue,\nsom.shipping_revenue,\nsm.id as shipping_mode_id,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nsm.title as shipping_mode_name,\n-- NULL AS quantity,\nsom.order_weight,\nsom.order_picking AS picking_cost,\nsm.country AS shipping_country,\nsom.packaging_cost,\nsom.shipping_taxes_rate,\nsom.shipping_transport_cost,\nsom.total_shipping_taxes,\nsom.shipping_cost,\n'reexp' AS first_reexp,\nCOALESCE(smn.nice_name, sm.name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight,\nCASE WHEN codification = 0 THEN 'ESHOP'\n            WHEN codification = 1 THEN 'BYOB'\n            WHEN codification = 2 THEN 'LTE'\n            WHEN codification = 8 THEN 'SPLENDIST'\n            WHEN codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       som.products_cost,\n    som.quantity,\nCASE WHEN COALESCE(som.quantity,0) + COALESCE(som.msg_perso,0) > 1 THEN 'multi' ELSE 'mono' END AS mono_multi,\nsom.msg_perso\nFROM inter.tags t\nJOIN `sales.shop_orders_margin` som ON som.order_id = t.link_id AND som.dw_country_code = t.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = som.shipping_mode_id AND sm.dw_country_code = som.dw_country_code\nLEFT JOIN pot_shop_reexp_shipments psc ON psc.order_id = som.order_id AND psc.dw_country_code = som.dw_country_code AND psc.order_detail_id IS NULL\nLEFT JOIN ops.shipping_costs sc ON COALESCE(psc.shipping_date, DATE(t.timestamp)) >= sc.date_start AND (sc.date_end IS NULL OR COALESCE(psc.shipping_date, DATE(t.timestamp)) <= sc.date_end) AND som.order_weight >= sc.min_weight AND (sc.max_weight IS NULL OR som.order_weight < sc.max_weight) AND sc.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = som.shipping_mode_id\nWHERE t.type = 'ORD'\nAND t.value = 'reexp'\n\n\nUNION ALL\n\n-- reexp shop - DET - REEXP-DET\nSELECT som.dw_country_code, \nsom.order_id, \nNULL as order_detail_id,\n-- NULL AS sub_id,\nDATE(t.timestamp) AS order_date,\nNULL AS integration_date,\nCOALESCE(psc.shipping_date, DATE(t.timestamp)) as shipping_date,\nsom.year,\nsom.month,\nsom.gross_revenue,\nsom.net_revenue,\nsom.shipping_revenue,\nsm.id as shipping_mode_id,\nCOALESCE(sm.b2c_method,code) AS shipping_mode_code,\nsm.title as shipping_mode_name,\n-- NULL AS quantity,\n(d.quantity * COALESCE(c.weight, 0.2) + 0.15)/1000 AS order_weight,\ndlc_first_product.price \n+\n(dlc_prepacked.price - dlc_first_product.price) * \n(CASE WHEN d.quantity = 1 THEN 1 ELSE 0 END )\n*\nCASE WHEN pc.PC_SPLENDIST OR pc.PC_CALENDAR THEN 1 ELSE 0 END -- deduction if only one calendar or splendist\n+\n(d.quantity-1) * dlc_next_product.price  AS picking_cost,\nsm.country AS shipping_country,\nsom.packaging_cost,\nsc.shipping_taxes_rate AS shipping_taxes_rate,\nsc.price AS shipping_transport_cost,\nsc.shipping_taxes_rate * sc.price AS total_shipping_taxes,\n(1 + sc.shipping_taxes_rate) * sc.price  AS shipping_cost,\n'reexp' AS first_reexp,\nCOALESCE(smn.nice_name, sm.name) AS shipping_mode_nice_name,\nsc.min_weight AS min_weight_range,\nsc.max_weight AS max_weight_range,\nconcat('From ',LPAD(CAST(ROUND(sc.min_weight * 100) AS STRING), 4, '0'),' g',\nCASE WHEN max_weight IS NOT NULL THEN\nconcat(' to ',LPAD(CAST(ROUND(sc.max_weight * 100) AS STRING), 4, '0'),' g')\nELSE '' END\n) AS range_of_weight,\nCASE WHEN som.codification = 0 THEN 'ESHOP'\n            WHEN som.codification = 1 THEN 'BYOB'\n            WHEN som.codification = 2 THEN 'LTE'\n            WHEN som.codification = 8 THEN 'SPLENDIST'\n            WHEN som.codification = 13 THEN 'CALENDAR'\n            ELSE 'ESHOP'\n       END AS product_codification,\n       c.euro_purchase_price*d.quantity AS products_cost,\n      d.quantity,\nCASE WHEN d.quantity > 1 THEN 'multi' ELSE 'mono' END AS mono_multi,\n0 AS msg_perso\n\nFROM inter.tags t\nJOIN inter.order_details d ON d.id = t.link_id AND d.dw_country_code = t.dw_country_code\nJOIN `sales.shop_orders_margin` som ON som.order_id = d.order_id AND som.dw_country_code = t.dw_country_code\nJOIN `inter.shipping_modes` sm ON sm.id = som.shipping_mode_id AND sm.dw_country_code = som.dw_country_code\nJOIN product.catalog AS c ON d.dw_country_code = c.dw_country_code AND c.product_id = d.product_id\nLEFT JOIN pot_shop_reexp_shipments psc ON psc.order_id = d.order_id AND psc.order_detail_id = d.id AND psc.dw_country_code = d.dw_country_code \nLEFT JOIN ops.shipping_costs sc ON COALESCE(psc.shipping_date, DATE(t.timestamp)) >= sc.date_start AND (sc.date_end IS NULL OR COALESCE(psc.shipping_date, DATE(t.timestamp)) <= sc.date_end) AND (d.quantity * COALESCE(c.weight, 0.2) + 0.15)/1000 >= sc.min_weight AND (sc.max_weight IS NULL OR (d.quantity * COALESCE(c.weight, 0.2) + 0.15)/1000 < sc.max_weight) AND sc.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.shipping_mode_nicenames smn ON smn.shipping_mode_id = som.shipping_mode_id\nLEFT JOIN ops.logistics_costs dlc_first_product ON dlc_first_product.name = 'picking first article' AND COALESCE(psc.shipping_date, DATE(t.timestamp)) >= DATE(dlc_first_product.date_start) AND (COALESCE(psc.shipping_date, DATE(t.timestamp)) <= DATE(dlc_first_product.date_end) OR dlc_first_product.date_end IS NULL)\n  LEFT JOIN ops.logistics_costs dlc_next_product ON dlc_next_product.name = 'picking next article' AND COALESCE(psc.shipping_date, DATE(t.timestamp)) >= DATE(dlc_next_product.date_start) AND (COALESCE(psc.shipping_date, DATE(t.timestamp)) <= DATE(dlc_next_product.date_end) OR dlc_next_product.date_end IS NULL)\n  LEFT JOIN ops.logistics_costs dlc_prepacked ON dlc_prepacked.name = 'picking prepacked' AND COALESCE(psc.shipping_date, DATE(t.timestamp)) >= DATE(dlc_prepacked.date_start) AND (COALESCE(psc.shipping_date, DATE(t.timestamp)) <= DATE(dlc_prepacked.date_end) OR dlc_prepacked.date_end IS NULL)\n  LEFT JOIN snippets.product_codifications pc ON c.product_codification_id = pc.product_codification_id\n  \nWHERE t.type = 'DET'\nAND t.value = 'reexp'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.bq_inventory_to_update": {"database": "teamdata-291012", "schema": "ops", "name": "bq_inventory_to_update", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/bq_inventory_to_update.sql", "original_file_path": "models/schedule/daily/5am/teamdata/bq_inventory_to_update.sql", "unique_id": "model.warehouse.bq_inventory_to_update", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "bq_inventory_to_update"], "alias": "bq_inventory_to_update", "checksum": {"name": "sha256", "checksum": "b993c586df1a9423c98b3045e84a0d716120deff0c2e25c8ac0d22bc54cb38c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.699878, "relation_name": "`teamdata-291012`.`ops`.`bq_inventory_to_update`", "raw_code": "select inventory_item_id from (\nSELECT p.dw_country_code, ii.sku, i.stock AS inventory_stock, p.stock_scamp AS product_stock_scamp, date(i.updated_at) as date, ii.id as inventory_item_id, i.stock - p.stock_scamp as delta\nFROM bdd_prod_sublissim.inventory_item ii\nJOIN bdd_prod_sublissim.inventory i ON i.inventory_item_id = ii.id\nJOIN inter.products p ON p.sku = ii.sku\n\nWHERE i.stock <> p.stock_scamp\nORDER BY i.updated_at DESC)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/bq_inventory_to_update.sql", "compiled": true, "compiled_code": "select inventory_item_id from (\nSELECT p.dw_country_code, ii.sku, i.stock AS inventory_stock, p.stock_scamp AS product_stock_scamp, date(i.updated_at) as date, ii.id as inventory_item_id, i.stock - p.stock_scamp as delta\nFROM bdd_prod_sublissim.inventory_item ii\nJOIN bdd_prod_sublissim.inventory i ON i.inventory_item_id = ii.id\nJOIN inter.products p ON p.sku = ii.sku\n\nWHERE i.stock <> p.stock_scamp\nORDER BY i.updated_at DESC)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Marketing_cac_budget_vs_expenses": {"database": "teamdata-291012", "schema": "marketing", "name": "Marketing_cac_budget_vs_expenses", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/Marketing_cac_budget_vs_expenses.sql", "original_file_path": "models/schedule/daily/5am/teamdata/Marketing_cac_budget_vs_expenses.sql", "unique_id": "model.warehouse.Marketing_cac_budget_vs_expenses", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "Marketing_cac_budget_vs_expenses"], "alias": "Marketing_cac_budget_vs_expenses", "checksum": {"name": "sha256", "checksum": "a888df4364fc4cabd88b5aa3ea843f52af4ac83839a8a07da7138c0bc9b8e0f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.701184, "relation_name": "`teamdata-291012`.`marketing`.`Marketing_cac_budget_vs_expenses`", "raw_code": "SELECT distinct month,upper(b.levier) levier,upper(b.levierFC) levierFC,budget,sum(spent) spent ,safe_divide(sum(spent)  , budget) as ratio_spent\nFROM `teamdata-291012.marketing.Marketing_cac_budget` b \nleft join {{ ref('Marketing_cac_expenses') }} e on upper(e.levier)=upper(b.levier) and upper(e.levierFC)=upper(b.levierFC) and e.country=b.country and e.mois=b.Month\nwhere b.month>='2023-10-01' and b.country='FR'\ngroup by 1,2,3,4", "language": "sql", "refs": [{"name": "Marketing_cac_expenses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.Marketing_cac_expenses"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/Marketing_cac_budget_vs_expenses.sql", "compiled": true, "compiled_code": "SELECT distinct month,upper(b.levier) levier,upper(b.levierFC) levierFC,budget,sum(spent) spent ,safe_divide(sum(spent)  , budget) as ratio_spent\nFROM `teamdata-291012.marketing.Marketing_cac_budget` b \nleft join `teamdata-291012`.`marketing`.`Marketing_cac_expenses` e on upper(e.levier)=upper(b.levier) and upper(e.levierFC)=upper(b.levierFC) and e.country=b.country and e.mois=b.Month\nwhere b.month>='2023-10-01' and b.country='FR'\ngroup by 1,2,3,4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.mailjet": {"database": "teamdata-291012", "schema": "mailjet", "name": "mailjet", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/mailjet.sql", "original_file_path": "models/schedule/daily/5am/teamdata/mailjet.sql", "unique_id": "model.warehouse.mailjet", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "mailjet"], "alias": "mailjet", "checksum": {"name": "sha256", "checksum": "a8481fc409ad9e924f6d8fc0cc33e3818e07b1e8a3a56cf99a73a9a847a064fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.702484, "relation_name": "`teamdata-291012`.`mailjet`.`mailjet`", "raw_code": "WITH message_with_status AS (\n  -- Extrait toutes les occurrences des messages avec leurs statuts\n  SELECT \n    ContactID,\n    CampaignID,\n    Subject,\n    Status,\n    ArrivedAt,\n    _airbyte_extracted_at,\n    -- Pour regrouper les messages li\u00e9s par UUID ou par ID \n    UUID as message_uuid,\n    ID as message_id\n  FROM \n    `teamdata-291012.mailjetAPI.message_incr`\n),\n\n-- Pivot des statuts pour extraire les dates pour chaque type d'\u00e9v\u00e9nement par message\nstatus_pivoted AS (\n  SELECT\n    ContactID,\n    message_id,\n    message_uuid,\n    CampaignID,\n    Subject,\n    -- Extraire les dates pour chaque statut (utiliser la plus ancienne date si plusieurs occurrences)\n    MIN(CASE WHEN Status = 'sent' THEN _airbyte_extracted_at END) as sent_date,\n    MIN(CASE WHEN Status = 'opened' THEN _airbyte_extracted_at END) as opened_date,\n    MIN(CASE WHEN Status = 'clicked' THEN _airbyte_extracted_at END) as clicked_date,\n    MIN(CASE WHEN Status = 'bounce' THEN _airbyte_extracted_at END) as bounce_date,\n    MIN(CASE WHEN Status = 'blocked' THEN _airbyte_extracted_at END) as blocked_date,\n    MIN(CASE WHEN Status = 'spam' THEN _airbyte_extracted_at END) as spam_date,\n    MIN(CASE WHEN Status = 'unsub' THEN _airbyte_extracted_at END) as unsub_date,\n    -- Dernier statut observ\u00e9 (le plus r\u00e9cent)\n    ARRAY_AGG(Status ORDER BY _airbyte_extracted_at DESC)[OFFSET(0)] as last_status,\n    MIN(ArrivedAt) as arrived_at,\n    MAX(_airbyte_extracted_at) as last_extracted_at\n  FROM \n    message_with_status\n  GROUP BY \n    ContactID, message_id, message_uuid, CampaignID, Subject\n)\n\n-- Ajout des calculs de d\u00e9lais et jointure avec la table des contacts\nSELECT \n  -- Infos contact\n  c.ID as contact_id,\n  c.Email as email,\n  c.Name as name,\n  \n  -- Infos message\n  sp.message_id,\n  sp.message_uuid,\n  sp.CampaignID as campaign_id,\n  sp.Subject as subject,\n  sp.last_status,\n  sp.arrived_at,\n  \n  -- Dates des diff\u00e9rents statuts\n  sp.sent_date,\n  sp.opened_date,\n  sp.clicked_date,\n  sp.bounce_date,\n  sp.blocked_date,\n  sp.spam_date,\n  sp.unsub_date,\n  \n  -- Calcul des d\u00e9lais en heures\n  TIMESTAMP_DIFF(sp.opened_date, sp.sent_date, HOUR) as hours_to_open,\n  TIMESTAMP_DIFF(sp.clicked_date, sp.opened_date, HOUR) as hours_from_open_to_click,\n  TIMESTAMP_DIFF(sp.clicked_date, sp.sent_date, HOUR) as hours_to_click,\n  TIMESTAMP_DIFF(sp.bounce_date, sp.sent_date, HOUR) as hours_to_bounce,\n  TIMESTAMP_DIFF(sp.blocked_date, sp.sent_date, HOUR) as hours_to_block,\n  TIMESTAMP_DIFF(sp.spam_date, sp.sent_date, HOUR) as hours_to_spam,\n  TIMESTAMP_DIFF(sp.unsub_date, sp.sent_date, HOUR) as hours_to_unsub\nFROM \n  status_pivoted sp\nLEFT JOIN \n  `teamdata-291012.mailjetAPI.contacts` c\n  ON sp.ContactID = c.ID", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/mailjet.sql", "compiled": true, "compiled_code": "WITH message_with_status AS (\n  -- Extrait toutes les occurrences des messages avec leurs statuts\n  SELECT \n    ContactID,\n    CampaignID,\n    Subject,\n    Status,\n    ArrivedAt,\n    _airbyte_extracted_at,\n    -- Pour regrouper les messages li\u00e9s par UUID ou par ID \n    UUID as message_uuid,\n    ID as message_id\n  FROM \n    `teamdata-291012.mailjetAPI.message_incr`\n),\n\n-- Pivot des statuts pour extraire les dates pour chaque type d'\u00e9v\u00e9nement par message\nstatus_pivoted AS (\n  SELECT\n    ContactID,\n    message_id,\n    message_uuid,\n    CampaignID,\n    Subject,\n    -- Extraire les dates pour chaque statut (utiliser la plus ancienne date si plusieurs occurrences)\n    MIN(CASE WHEN Status = 'sent' THEN _airbyte_extracted_at END) as sent_date,\n    MIN(CASE WHEN Status = 'opened' THEN _airbyte_extracted_at END) as opened_date,\n    MIN(CASE WHEN Status = 'clicked' THEN _airbyte_extracted_at END) as clicked_date,\n    MIN(CASE WHEN Status = 'bounce' THEN _airbyte_extracted_at END) as bounce_date,\n    MIN(CASE WHEN Status = 'blocked' THEN _airbyte_extracted_at END) as blocked_date,\n    MIN(CASE WHEN Status = 'spam' THEN _airbyte_extracted_at END) as spam_date,\n    MIN(CASE WHEN Status = 'unsub' THEN _airbyte_extracted_at END) as unsub_date,\n    -- Dernier statut observ\u00e9 (le plus r\u00e9cent)\n    ARRAY_AGG(Status ORDER BY _airbyte_extracted_at DESC)[OFFSET(0)] as last_status,\n    MIN(ArrivedAt) as arrived_at,\n    MAX(_airbyte_extracted_at) as last_extracted_at\n  FROM \n    message_with_status\n  GROUP BY \n    ContactID, message_id, message_uuid, CampaignID, Subject\n)\n\n-- Ajout des calculs de d\u00e9lais et jointure avec la table des contacts\nSELECT \n  -- Infos contact\n  c.ID as contact_id,\n  c.Email as email,\n  c.Name as name,\n  \n  -- Infos message\n  sp.message_id,\n  sp.message_uuid,\n  sp.CampaignID as campaign_id,\n  sp.Subject as subject,\n  sp.last_status,\n  sp.arrived_at,\n  \n  -- Dates des diff\u00e9rents statuts\n  sp.sent_date,\n  sp.opened_date,\n  sp.clicked_date,\n  sp.bounce_date,\n  sp.blocked_date,\n  sp.spam_date,\n  sp.unsub_date,\n  \n  -- Calcul des d\u00e9lais en heures\n  TIMESTAMP_DIFF(sp.opened_date, sp.sent_date, HOUR) as hours_to_open,\n  TIMESTAMP_DIFF(sp.clicked_date, sp.opened_date, HOUR) as hours_from_open_to_click,\n  TIMESTAMP_DIFF(sp.clicked_date, sp.sent_date, HOUR) as hours_to_click,\n  TIMESTAMP_DIFF(sp.bounce_date, sp.sent_date, HOUR) as hours_to_bounce,\n  TIMESTAMP_DIFF(sp.blocked_date, sp.sent_date, HOUR) as hours_to_block,\n  TIMESTAMP_DIFF(sp.spam_date, sp.sent_date, HOUR) as hours_to_spam,\n  TIMESTAMP_DIFF(sp.unsub_date, sp.sent_date, HOUR) as hours_to_unsub\nFROM \n  status_pivoted sp\nLEFT JOIN \n  `teamdata-291012.mailjetAPI.contacts` c\n  ON sp.ContactID = c.ID", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Marketing_cac_live": {"database": "teamdata-291012", "schema": "marketing", "name": "Marketing_cac_live", "resource_type": "model", "package_name": "warehouse", "path": "schedule/daily/5am/teamdata/Marketing_cac_live.sql", "original_file_path": "models/schedule/daily/5am/teamdata/Marketing_cac_live.sql", "unique_id": "model.warehouse.Marketing_cac_live", "fqn": ["warehouse", "schedule", "daily", "5am", "teamdata", "Marketing_cac_live"], "alias": "Marketing_cac_live", "checksum": {"name": "sha256", "checksum": "89a082ab7521344d3840ed6dc942377406f04666cd7cb73bbe03bb439d1ac52d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "teamdata": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table", "teamdata": null}, "created_at": 1759995464.7039402, "relation_name": "`teamdata-291012`.`marketing`.`Marketing_cac_live`", "raw_code": "with marketing_live as (\n\nSELECT d as jour,country,sum(spent) spent  FROM {{ ref('Marketing_cac_expenses') }}\n\nwhere type<>'SHOP' --and levier  is not null \nand cac ='Oui'\nand d>='2023-10-01'\n group by all\n) \n\n\n, acq as (\nselect dw_country_code as country_code,date(payment_date) as d,cast(date  as string) as m,\ncount(case when acquis_status_lvl2 ='NEW NEW' then sub_id end ) as self,  \ncount(case when acquis_status_lvl2 ='REACTIVATION' then sub_id end ) as reactivations,\ncount(case when acquis_status_lvl2 ='GIFT' then sub_id end ) as gift,\ncount(* ) as total_this_year,\nfrom sales.box_sales\nwhere 1=1\nand acquis_status_lvl1<>'LIVE'\n--and date_trunc(payment_date,month)=date -- les cas pourris ou il ya plusieurs mois pour un jour ex 1 ocotbre 2024\nand day_in_cycle>0\ngroup by all\n)\n\nselect * except (country_code,jour) from marketing_live ml\ninner join acq a on country_code=country and jour=a.d", "language": "sql", "refs": [{"name": "Marketing_cac_expenses", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.Marketing_cac_expenses"]}, "compiled_path": "target/compiled/warehouse/models/schedule/daily/5am/teamdata/Marketing_cac_live.sql", "compiled": true, "compiled_code": "with marketing_live as (\n\nSELECT d as jour,country,sum(spent) spent  FROM `teamdata-291012`.`marketing`.`Marketing_cac_expenses`\n\nwhere type<>'SHOP' --and levier  is not null \nand cac ='Oui'\nand d>='2023-10-01'\n group by all\n) \n\n\n, acq as (\nselect dw_country_code as country_code,date(payment_date) as d,cast(date  as string) as m,\ncount(case when acquis_status_lvl2 ='NEW NEW' then sub_id end ) as self,  \ncount(case when acquis_status_lvl2 ='REACTIVATION' then sub_id end ) as reactivations,\ncount(case when acquis_status_lvl2 ='GIFT' then sub_id end ) as gift,\ncount(* ) as total_this_year,\nfrom sales.box_sales\nwhere 1=1\nand acquis_status_lvl1<>'LIVE'\n--and date_trunc(payment_date,month)=date -- les cas pourris ou il ya plusieurs mois pour un jour ex 1 ocotbre 2024\nand day_in_cycle>0\ngroup by all\n)\n\nselect * except (country_code,jour) from marketing_live ml\ninner join acq a on country_code=country and jour=a.d", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.Choose_by_user": {"database": "teamdata-291012", "schema": "user", "name": "Choose_by_user", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/Choose_by_user.sql", "original_file_path": "models/schedule/custom/Choose_by_user.sql", "unique_id": "model.warehouse.Choose_by_user", "fqn": ["warehouse", "schedule", "custom", "Choose_by_user"], "alias": "Choose_by_user", "checksum": {"name": "sha256", "checksum": "b4d6cd74e6b77e34b71ac91d1e88f008491b27bd34bcbc8bb3eef87c0fc55e55"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.7052312, "relation_name": "`teamdata-291012`.`user`.`Choose_by_user`", "raw_code": "SELECT cu.user_id,\n   concat(cu.dw_country_code,'_',cu.user_id)as user_key,\n    box_id, cc.choice_name, cu.dw_country_code, cu.status_id, cu.created_at as choice_date, cf.name as form_name,cf.id as form_id,\n    cc.id as choice_id\n    FROM {{ ref('choose_users') }} cu\n    JOIN {{ ref('choose_forms') }} cf ON cf.id = cu.form_id AND cf.dw_country_code = cu.dw_country_code\n    JOIN {{ ref('choose_choices') }} cc ON cc.id = cu.choice_id AND cc.dw_country_code = cu.dw_country_code\n    JOIN {{ ref('customers') }} cus ON cus.user_id = cu.user_id AND cus.dw_country_code = cu.dw_country_code\n    group by all", "language": "sql", "refs": [{"name": "choose_users", "package": null, "version": null}, {"name": "choose_forms", "package": null, "version": null}, {"name": "choose_choices", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.choose_users", "model.warehouse.choose_forms", "model.warehouse.choose_choices", "model.warehouse.customers"]}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/Choose_by_user.sql", "compiled": true, "compiled_code": "SELECT cu.user_id,\n   concat(cu.dw_country_code,'_',cu.user_id)as user_key,\n    box_id, cc.choice_name, cu.dw_country_code, cu.status_id, cu.created_at as choice_date, cf.name as form_name,cf.id as form_id,\n    cc.id as choice_id\n    FROM `teamdata-291012`.`inter`.`choose_users` cu\n    JOIN `teamdata-291012`.`inter`.`choose_forms` cf ON cf.id = cu.form_id AND cf.dw_country_code = cu.dw_country_code\n    JOIN `teamdata-291012`.`inter`.`choose_choices` cc ON cc.id = cu.choice_id AND cc.dw_country_code = cu.dw_country_code\n    JOIN `teamdata-291012`.`user`.`customers` cus ON cus.user_id = cu.user_id AND cus.dw_country_code = cu.dw_country_code\n    group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.bank": {"database": "teamdata-291012", "schema": "prod_fr", "name": "bank", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/bank.sql", "original_file_path": "models/schedule/custom/bank.sql", "unique_id": "model.warehouse.bank", "fqn": ["warehouse", "schedule", "custom", "bank"], "alias": "bank", "checksum": {"name": "sha256", "checksum": "e3acb757abb292e3004a95ba98e2cd17ae2cd7252b821a1227df4c35b9c87f4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.70673, "relation_name": "`teamdata-291012`.`prod_fr`.`bank`", "raw_code": "-- PRODUITS AVEC DU STOCK\nWITH products_with_stock as (\n  SELECT sku, MAX(stock) as stock, MAX(stock_sublissim) AS stock_scamp\n  FROM\n(SELECT p.id,p.inventory_item_id, p.sku, p.dw_country_code, p.stock, i.stock as stock_sublissim\nFROM inter.products p -- BRANCHE SUR PRODUCTS\nLEFT JOIN `teamdata-291012.bdd_prod_sublissim.inventory_item` ii on ii.sku = p.sku \nLEFT JOIN `teamdata-291012.bdd_prod_sublissim.inventory` i ON i.inventory_item_id = ii.id \nwhere (p.type_produit <>\"ESHOP\" or (p.special_type is not null AND special_type <> '') or p.logistics_asset_id IN (2,3,4)) -- comment trouver que les produits shop autrement ?\nAND p.stock_scamp > 0\n)\n GROUP BY SKU\n), \n\n-- PRODUITS AVEC DES COMMANDES EN COURS / EN COURS DE RECEPTION \nproducts_with_ongoing_command as (\n  WITH already_delivered_po AS (\n  SELECT DISTINCT po.id\n  FROM bdd_prod_fr.wp_jb_reception_details rd\n  INNER JOIN bdd_prod_fr.wp_jb_expected_inbound_details eid ON rd.expected_inbound_details_id = eid.id\n  INNER JOIN bdd_prod_fr.wp_jb_expected_inbounds ei ON eid.expected_inbound_id = ei.id\n  INNER JOIN bdd_prod_fr.wp_jb_purchase_orders po ON ei.purchase_order_id = po.id\n  -- WHERE po.id = 23770\n)\n\nSELECT poi.sku AS SKU, SUM(poi.quantity_ordered) AS quantity_to_be_received, MAX(po.created_at) AS last_po_date\n  FROM `bdd_prod_fr.wp_jb_purchase_orders` po\n  INNER JOIN `bdd_prod_fr.wp_jb_purchase_order_items` poi ON po.id = poi.po_id\n  -- INNER JOIN `bdd_prod_fr.wp_jb_products` p USING(sku)\n  LEFT JOIN already_delivered_po adp ON po.id = adp.id\n  WHERE po.status_id IN (4,5)\n  AND po.created_at >= '2023-07-01'\n   AND (po.project_id <> 114 OR po.project_id is null)\n  --- AND poi.sku =\"SAB-GELEELAMELLAIRE-JBX2407\"\n  AND adp.id IS NULL\n  GROUP BY poi.sku \n  ), \n\nstock_in_kit as (\n--SELECT p.dw_country_code, p.id, p.inventory_item_id, p.sku, sum(stock_in_kit) as stock_in_kit, CONCAT() FROM \nSELECT  p.sku, MAX(p_kit.stock_scamp) as stock_in_kit, STRING_AGG(distinct p_kit.sku) as kit_list, MAX( b.date) as last_time_box\nFROM `inter.inventory_items` i \nJOIN inter.products p on p.inventory_item_id = i.id AND p.dw_country_code = i.dw_country_code\nLEFT JOIN `product.all_kits` ak ON ak.product_id =p.id and ak.country_code = p.dw_country_code\nLEFT JOIN inter.products p_kit ON p_kit.id = ak.kit_id and p_kit.dw_country_code = ak.country_code\nLEFT JOIN inter.boxes b ON b.ID = p_kit.box_id and b.dw_country_code = p_kit.dw_country_code\nWHERE  p_kit.stock > 0 \n-- AND p.dw_country_code =\"FR\"\n-- and  p.sku = \"MEL-GUASHAJADEBLEUV-JBX2211\"\nGROUP BY  p.sku\n), \nstock_in_kit2 as (\n--SELECT p.dw_country_code, p.id, p.inventory_item_id, p.sku, sum(stock_in_kit) as stock_in_kit, CONCAT() FROM \nSELECT p.sku, MAX(p_kit.stock_scamp) as stock_in_kit,STRING_AGG(p_kit.sku) as kit_list, MAX( b.date) as last_time_box\nFROM `inter.inventory_items` i \nJOIN inter.products p on p.inventory_item_id = i.id AND p.dw_country_code = i.dw_country_code\nLEFT JOIN `product.all_kits` ak ON ak.product_id =p.id and ak.country_code = p.dw_country_code\nLEFT JOIN inter.products p_kit ON p_kit.id = ak.kit_id and p_kit.dw_country_code = ak.country_code\nLEFT JOIN inter.boxes b ON b.ID = p_kit.box_id and b.dw_country_code = p_kit.dw_country_code\n-- WHERE -- p_kit.stock > 0 \n-- p.dw_country_code =\"FR\"\nGROUP BY  p.sku\n), \n-- A BRANCHE SUR WM ensuite\nproducts_in_kit as (\nSELECT p.SKU AS SKU_kit,b.date as date_kit, STRING_AGG(distinct i.nice_name, ', ') AS list_products_in_kit\nFROM product.all_kits kl \nLEFT JOIN inter.products p ON p.id = kl.kit_id and p.dw_country_code = kl.country_code\nLEFT JOIN `inter.products` p2 ON p2.id = kl.product_id and p2.dw_country_code = kl.country_code\nLEFT JOIN `catalog.inventory_item_catalog` i on i.sku = p2.sku \nLEFT join inter.boxes b ON b.id = p.box_id And p.dw_country_code = b.dw_country_code\n\nGROUP BY p.SKU, b.date),\n\n\nmin_dluo as (\n\n  WITH DLUOs as\n(  SELECT SKU, MIN(dluo) as dluo_min ,\nCASE WHEN dluo = MIn(dluo) then t.stock_position else 0 end as stock_dluo_min, \nCASE WHEN dluo = MIn(dluo) then position_key else NULL end as position_dluo_min\nFROM(\nSELECT p.dw_country_code, p.SKU , p.created_at, p.updated_at,  MAX(w.stock) as stock_position, w.position_key, format_date(\"%Y-%m-%d\", SAFE_CAST(w.dluo AS DATE)) as dluo\nFROM inter.products p \nLEFT JOIN  `teamdata-291012.bdd_prod_sublissim.pot_inventory_location` w ON w.SKU = p.SKU AND DATE(w.created_at) >=current_date()\nWHERE  w.stock <> 0 \n-- AND p.dw_country_code = \"FR\"\nAND  DATE(w.created_at) >=current_date()\n-- AND p.sku = \"ADO-TOSCANAVITA-JBX2407\"\nGROUP BY  w.position_key, w.dluo, p.SKU , p.created_at, p.updated_at,p.dw_country_code, p.ID )t\nGROUP BY  SKU, dluo, stock_position, position_key)\n,\nMINI_DLUO AS (\nSELECT d.sku, MIN(d.dluo_min) as dluo_min --, d.stock_dluo_min\nFROM DLUOs d \nGROUP BY d.sku\n\n)\n\nSELECT md.sku, md.dluo_min , sum(d.stock_dluo_min) as stock_dluo_min -- , d.position_dluo_min\n\nFROM MINI_DLUO md \nLEFT JOIN DLUOs d on d.sku = md.sku  and d.dluo_min=md.dluo_min\nGROUP BY md.sku, md.dluo_min ),\n\n-- reservations en cours \ncurrent_reservation as (\n SELECT sku, STRING_AGG(distinct project_reference) as project_reference, sum(Booked_volume) as Booked_volume, string_agg(concat(project_reference,\" - \", Booked_Volume)) as concat\n  FROM(SELECT ic.sku,b.project_reference, MAX(b.Booked_volume) as Booked_Volume\nFROM `catalog.inventory_item_catalog` ic \nJOIN catalog.booking b ON b.sku =ic.sku \nWHERE b.booked_volume > 0 \n-- AND b.sku = \"EGY-BAUMEMULTIUSAGE-JBX2402\"\nGROUP BY ic.sku, b.project_reference)\nGROUP BY sku\n), \ncurrent_project AS \n(select project_full_name as c_project\nFROM `catalog.projects` p \n JOIN inter.boxes b ON b.date = p.start_date and b.dw_country_code = \"FR\"\n Join `snippets.current_box`  cb ON cb.current_box_id = b.id and cb.dw_country_code = \"FR\"\nwhere project_type IN (\"BOX\", \"GWS\", \"BOX ACQUIS\")\n), \ncurrent_box_use AS (\nselect distinct p.sku as sku\nFROM  inter.boxes b\nJoin `snippets.current_box`  cb ON cb.current_box_id= b.id AND b.dw_country_code = cb.dw_country_code \nLEFT JOIN inter.products p ON p.box_id = b.id and p.dw_country_code = b.dw_country_code\nAND p.stock > 0\nUNION ALL \nselect distinct p.sku as sku\nFROM  inter.boxes b\nJoin `snippets.current_box`  cb ON cb.current_box_id +1 = b.id AND b.dw_country_code = cb.dw_country_code \nLEFT JOIN inter.products p ON p.box_id = b.id and p.dw_country_code = b.dw_country_code\nAND p.stock > 0\n\n), \ncurrent_lte_use AS (\n SELECT distinct SKU as sku FROM ( Select distinct ss.sku as sku , format_date ( \"%m-%Y\", min( order_date )) as min_date\n  FROM sales.shop_sales  ss \n  WHERE ss.product_codification NOT IN (\"LOYALTY\", \"ESHOP\", \"GWP\", \"GWS\")\n  GROUP BY ss.sku) \n  WHERE min_date = format_date ( \"%m-%Y\",  current_date()))\n, \ndepreciated_price as \n(SELECT SKU , MAX(date_start) as date_depreciation  , MAX(purchase_price_before) as purchase_price_before ,MIN(purchase_price_depreciated) as purchase_price_depreciated\nFROM `ops.depreciation_detail` \nGROUP BY SKU )\n\n\nSELECT \n\n-- INFORMATION DE INVENTORY ITEM CATALOG\n/*MAX(ic.ID)*/ic.sku, MAX(ic.nice_name) as name, MAX(ic.brand_name) as brand_name,-- remplacer apr\u00e8s par nice _name\nMAX(ic.logistic_category) as logistic_category , MAX(planning_category_name) as planning_category_name, MAX(product_cat_lvl1) as product_cat_lvl1  ,MAX(product_cat_lvl2) as product_cat_lvl2 , MAX(product_cat_lvl3) as product_cat_lvl3,\nMAX(ic.existing_product_types) as existing_product_types, MAX(size_type) as size_type, MAX(capacity) as capacity, MAX(capacity_unit) as capacity_unit, \nMAX(euro_purchase_price) as purchase_price, max(perceived_price) as perceived_price, \n\n-- STOCK \nCOALESCE(pws.stock_scamp,0) as stock_scamp, \npwc.quantity_to_be_received, \nMAX(sik.stock_in_kit) as stock_in_kit, \n\n\n-- TOTAL STOCK\nCOALESCE(pws.stock_scamp,0) +COALESCE(pwc.quantity_to_be_received,0)  AS Forecasted_stock, \nCOALESCE(cr.Booked_Volume,0) as booked_volume, \n-- current available stock = current stock - booked stock\nCASE  when COALESCE(pws.stock_scamp,0) -  COALESCE(cr.Booked_Volume,0)> 0 THEN COALESCE(pws.stock_scamp,0) - COALESCE(cr.Booked_Volume,0)\nELSE 0 END  as current_available_stock_corrected,\n-- forecasted available stock = surrent + commands - booked \nCASE WHEN COALESCE(pws.stock_scamp,0) +COALESCE(quantity_to_be_received,0)- COALESCE(cr.Booked_Volume,0) >0 THEN COALESCE(pws.stock_scamp,0) +COALESCE(quantity_to_be_received,0)- COALESCE(cr.Booked_Volume,0) ELSE 0 END as forecasted_available_stock, \n\n-- SUJET DES SUR-R\u00e9servations ??\n\n-- VALO STOCK \nROUND(COALESCE(pws.stock_scamp,0) * MAX(euro_purchase_price)) as current_stock_value, \n(CASE  when COALESCE(pws.stock_scamp,0) - COALESCE(cr.Booked_Volume,0)> 0 THEN COALESCE(pws.stock_scamp,0) -COALESCE(cr.Booked_Volume,0)\nELSE 0 END) * MAX(euro_purchase_price) as available_stock_value,\n\n\n-- DLUO MIN \nCASE WHEN MIN(md.dluo_min) = \"3000-12-30\" OR MIN(md.dluo_min) is NULL OR MAX(ic.logistic_category) IN (\"print\", \"pack\", \"consumable item\") THEN \"\" ELSE MIN(md.dluo_min) END as MIN_dluo, \nCASE WHEN MIN(md.dluo_min) = \"3000-12-30\" OR MIN(md.dluo_min) is NULL OR MAX(ic.logistic_category) IN (\"print\", \"pack\", \"consumable item\") THEN NULL ELSE MIN(md.stock_dluo_min) END as stock_min_dluo, \nCASE WHEN MIN(md.dluo_min) = \"3000-12-30\"  OR MIN(md.dluo_min) is NULL OR MAX(ic.logistic_category) IN (\"print\", \"pack\", \"consumable item\") then NULL ELSE  round(SAFE_DIVIDE(MIN(md.stock_dluo_min),MAX(pws.stock_scamp)),2) END as percent_dluo_min,\n\n-- Products in kit si assembled product \nMAX(sik2.last_time_box) as last_time_in_box,\nCASE WHEN MAX(ic.logistic_category) = \"assembled product\" then MAX(pik.list_products_in_kit) ELSE NULL END as products_in_kit, \n\n-- produit encore pr\u00e9sent dans les kits affichage des kits\nCASE WHEN MAX(sik.stock_in_kit) > 0 THEN MAX(sik.kit_list) ELSE NULL END AS kit_list, \n\n cr.project_reference as current_booking, \nSTRING_AGG(distinct f.flag_name) as flag, \n\nCOALESCE(pws.stock_scamp,0)+COALESCE(quantity_to_be_received,0) -COALESCE(cr.Booked_Volume,0) as real_forecasted_available_stock, \n\nCASE WHEN MAX(cp.c_project) =cr.project_reference then NULL ELSE\n\n      CASE WHEN (COALESCE(pws.stock_scamp,0)+COALESCE(quantity_to_be_received,0) -COALESCE(cr.Booked_Volume,0)) < -50 then \n\"OVERBOOKING\" ELSE NULL END \nEND AS BOOKING_ALERT,\n\nCASE WHEN MAX(cp.c_project) =cr.project_reference then NULL ELSE\nCASE WHEN (coalesce(pws.stock_scamp,0)+ coalesce(quantity_to_be_received,0)- COALESCE(cr.Booked_Volume,0)) < -50 THEN \nSTRING_AGG(distinct cr.concat ) ELSE NULL END END as alert_resume, \n\nCASE WHEN MAX(ic.logistic_category)= \"assembled product\" THEN \n  CASE WHEN MAX(ic.existing_product_types) = \"BOX\" AND MAX(cbu.sku) is not null then \"YES\" \n       WHEN  MAX(ic.existing_product_types) <> \"BOX\" and MAX(clu.sku) is not null then \"YES\" \n  ELSE NULL END \n  ELSE NULL END as Current_campaign, \n\nMAX(ic.note_moyenne) AS Average_grade, \nMIN ( dp.purchase_price_depreciated) as purchase_price_depreciated, \nMAX(dp.date_depreciation) as date_depreciation, \nMAX( ic.first_product_type  ) as first_product_type, \nSTRING_AGG(distinct bf.brand_flag_name ) as brand_flag, \nMAX (ic.picture_link) as picture_link\n\n\nFROM `catalog.inventory_item_catalog` ic\nLEFT JOIN  products_with_stock pws ON pws.sku =ic.sku\nLEFT JOIN products_with_ongoing_command pwc ON pwc.sku= ic.sku\nLEFT JOIN  stock_in_kit sik ON sik.sku = ic.sku\nLEFT JOIN stock_in_kit2 sik2 ON sik2.sku = ic.sku\nLEFT JOIN catalog.booking b ON b.sku = ic.sku \nLEFT JOIN  min_dluo md ON md.sku = ic.sku\nLEFT JOIN products_in_kit pik on pik.SKU_kit = ic.sku\nLEFT JOIN current_reservation cr on cr.sku = ic.sku\nLEFT JOIN catalog.flag f on f.sku = ic.sku\nLEFT JOIN `teamdata-291012.catalog.brand_flag` bf on bf.brand_name = ic.brand_name\nLEFT JOIN current_project cp ON cp.c_project=b.project_reference\nLEFT JOIN current_box_use cbu ON cbu.sku = ic.sku\nLEFT JOIN current_lte_use clu ON clu.sku = ic.sku\nLEFT JOIN depreciated_price dp ON dp.sku = ic.sku  \nWHERE (pws.stock_scamp > 0\nOR pwc.quantity_to_be_received >0\nOR sik.stock_in_kit > 0 \nOR b.booked_volume > 0)\n-- AND ic.sku= \"AUT-DEFENSEBOTANICA-JBX2407\"\nGROUP BY ic.sku, pws.stock_scamp,  pwc.quantity_to_be_received  , cr.Booked_Volume,  cr.project_reference, cr.concat\nORDER BY pws.stock_scamp desc", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/bank.sql", "compiled": true, "compiled_code": "-- PRODUITS AVEC DU STOCK\nWITH products_with_stock as (\n  SELECT sku, MAX(stock) as stock, MAX(stock_sublissim) AS stock_scamp\n  FROM\n(SELECT p.id,p.inventory_item_id, p.sku, p.dw_country_code, p.stock, i.stock as stock_sublissim\nFROM inter.products p -- BRANCHE SUR PRODUCTS\nLEFT JOIN `teamdata-291012.bdd_prod_sublissim.inventory_item` ii on ii.sku = p.sku \nLEFT JOIN `teamdata-291012.bdd_prod_sublissim.inventory` i ON i.inventory_item_id = ii.id \nwhere (p.type_produit <>\"ESHOP\" or (p.special_type is not null AND special_type <> '') or p.logistics_asset_id IN (2,3,4)) -- comment trouver que les produits shop autrement ?\nAND p.stock_scamp > 0\n)\n GROUP BY SKU\n), \n\n-- PRODUITS AVEC DES COMMANDES EN COURS / EN COURS DE RECEPTION \nproducts_with_ongoing_command as (\n  WITH already_delivered_po AS (\n  SELECT DISTINCT po.id\n  FROM bdd_prod_fr.wp_jb_reception_details rd\n  INNER JOIN bdd_prod_fr.wp_jb_expected_inbound_details eid ON rd.expected_inbound_details_id = eid.id\n  INNER JOIN bdd_prod_fr.wp_jb_expected_inbounds ei ON eid.expected_inbound_id = ei.id\n  INNER JOIN bdd_prod_fr.wp_jb_purchase_orders po ON ei.purchase_order_id = po.id\n  -- WHERE po.id = 23770\n)\n\nSELECT poi.sku AS SKU, SUM(poi.quantity_ordered) AS quantity_to_be_received, MAX(po.created_at) AS last_po_date\n  FROM `bdd_prod_fr.wp_jb_purchase_orders` po\n  INNER JOIN `bdd_prod_fr.wp_jb_purchase_order_items` poi ON po.id = poi.po_id\n  -- INNER JOIN `bdd_prod_fr.wp_jb_products` p USING(sku)\n  LEFT JOIN already_delivered_po adp ON po.id = adp.id\n  WHERE po.status_id IN (4,5)\n  AND po.created_at >= '2023-07-01'\n   AND (po.project_id <> 114 OR po.project_id is null)\n  --- AND poi.sku =\"SAB-GELEELAMELLAIRE-JBX2407\"\n  AND adp.id IS NULL\n  GROUP BY poi.sku \n  ), \n\nstock_in_kit as (\n--SELECT p.dw_country_code, p.id, p.inventory_item_id, p.sku, sum(stock_in_kit) as stock_in_kit, CONCAT() FROM \nSELECT  p.sku, MAX(p_kit.stock_scamp) as stock_in_kit, STRING_AGG(distinct p_kit.sku) as kit_list, MAX( b.date) as last_time_box\nFROM `inter.inventory_items` i \nJOIN inter.products p on p.inventory_item_id = i.id AND p.dw_country_code = i.dw_country_code\nLEFT JOIN `product.all_kits` ak ON ak.product_id =p.id and ak.country_code = p.dw_country_code\nLEFT JOIN inter.products p_kit ON p_kit.id = ak.kit_id and p_kit.dw_country_code = ak.country_code\nLEFT JOIN inter.boxes b ON b.ID = p_kit.box_id and b.dw_country_code = p_kit.dw_country_code\nWHERE  p_kit.stock > 0 \n-- AND p.dw_country_code =\"FR\"\n-- and  p.sku = \"MEL-GUASHAJADEBLEUV-JBX2211\"\nGROUP BY  p.sku\n), \nstock_in_kit2 as (\n--SELECT p.dw_country_code, p.id, p.inventory_item_id, p.sku, sum(stock_in_kit) as stock_in_kit, CONCAT() FROM \nSELECT p.sku, MAX(p_kit.stock_scamp) as stock_in_kit,STRING_AGG(p_kit.sku) as kit_list, MAX( b.date) as last_time_box\nFROM `inter.inventory_items` i \nJOIN inter.products p on p.inventory_item_id = i.id AND p.dw_country_code = i.dw_country_code\nLEFT JOIN `product.all_kits` ak ON ak.product_id =p.id and ak.country_code = p.dw_country_code\nLEFT JOIN inter.products p_kit ON p_kit.id = ak.kit_id and p_kit.dw_country_code = ak.country_code\nLEFT JOIN inter.boxes b ON b.ID = p_kit.box_id and b.dw_country_code = p_kit.dw_country_code\n-- WHERE -- p_kit.stock > 0 \n-- p.dw_country_code =\"FR\"\nGROUP BY  p.sku\n), \n-- A BRANCHE SUR WM ensuite\nproducts_in_kit as (\nSELECT p.SKU AS SKU_kit,b.date as date_kit, STRING_AGG(distinct i.nice_name, ', ') AS list_products_in_kit\nFROM product.all_kits kl \nLEFT JOIN inter.products p ON p.id = kl.kit_id and p.dw_country_code = kl.country_code\nLEFT JOIN `inter.products` p2 ON p2.id = kl.product_id and p2.dw_country_code = kl.country_code\nLEFT JOIN `catalog.inventory_item_catalog` i on i.sku = p2.sku \nLEFT join inter.boxes b ON b.id = p.box_id And p.dw_country_code = b.dw_country_code\n\nGROUP BY p.SKU, b.date),\n\n\nmin_dluo as (\n\n  WITH DLUOs as\n(  SELECT SKU, MIN(dluo) as dluo_min ,\nCASE WHEN dluo = MIn(dluo) then t.stock_position else 0 end as stock_dluo_min, \nCASE WHEN dluo = MIn(dluo) then position_key else NULL end as position_dluo_min\nFROM(\nSELECT p.dw_country_code, p.SKU , p.created_at, p.updated_at,  MAX(w.stock) as stock_position, w.position_key, format_date(\"%Y-%m-%d\", SAFE_CAST(w.dluo AS DATE)) as dluo\nFROM inter.products p \nLEFT JOIN  `teamdata-291012.bdd_prod_sublissim.pot_inventory_location` w ON w.SKU = p.SKU AND DATE(w.created_at) >=current_date()\nWHERE  w.stock <> 0 \n-- AND p.dw_country_code = \"FR\"\nAND  DATE(w.created_at) >=current_date()\n-- AND p.sku = \"ADO-TOSCANAVITA-JBX2407\"\nGROUP BY  w.position_key, w.dluo, p.SKU , p.created_at, p.updated_at,p.dw_country_code, p.ID )t\nGROUP BY  SKU, dluo, stock_position, position_key)\n,\nMINI_DLUO AS (\nSELECT d.sku, MIN(d.dluo_min) as dluo_min --, d.stock_dluo_min\nFROM DLUOs d \nGROUP BY d.sku\n\n)\n\nSELECT md.sku, md.dluo_min , sum(d.stock_dluo_min) as stock_dluo_min -- , d.position_dluo_min\n\nFROM MINI_DLUO md \nLEFT JOIN DLUOs d on d.sku = md.sku  and d.dluo_min=md.dluo_min\nGROUP BY md.sku, md.dluo_min ),\n\n-- reservations en cours \ncurrent_reservation as (\n SELECT sku, STRING_AGG(distinct project_reference) as project_reference, sum(Booked_volume) as Booked_volume, string_agg(concat(project_reference,\" - \", Booked_Volume)) as concat\n  FROM(SELECT ic.sku,b.project_reference, MAX(b.Booked_volume) as Booked_Volume\nFROM `catalog.inventory_item_catalog` ic \nJOIN catalog.booking b ON b.sku =ic.sku \nWHERE b.booked_volume > 0 \n-- AND b.sku = \"EGY-BAUMEMULTIUSAGE-JBX2402\"\nGROUP BY ic.sku, b.project_reference)\nGROUP BY sku\n), \ncurrent_project AS \n(select project_full_name as c_project\nFROM `catalog.projects` p \n JOIN inter.boxes b ON b.date = p.start_date and b.dw_country_code = \"FR\"\n Join `snippets.current_box`  cb ON cb.current_box_id = b.id and cb.dw_country_code = \"FR\"\nwhere project_type IN (\"BOX\", \"GWS\", \"BOX ACQUIS\")\n), \ncurrent_box_use AS (\nselect distinct p.sku as sku\nFROM  inter.boxes b\nJoin `snippets.current_box`  cb ON cb.current_box_id= b.id AND b.dw_country_code = cb.dw_country_code \nLEFT JOIN inter.products p ON p.box_id = b.id and p.dw_country_code = b.dw_country_code\nAND p.stock > 0\nUNION ALL \nselect distinct p.sku as sku\nFROM  inter.boxes b\nJoin `snippets.current_box`  cb ON cb.current_box_id +1 = b.id AND b.dw_country_code = cb.dw_country_code \nLEFT JOIN inter.products p ON p.box_id = b.id and p.dw_country_code = b.dw_country_code\nAND p.stock > 0\n\n), \ncurrent_lte_use AS (\n SELECT distinct SKU as sku FROM ( Select distinct ss.sku as sku , format_date ( \"%m-%Y\", min( order_date )) as min_date\n  FROM sales.shop_sales  ss \n  WHERE ss.product_codification NOT IN (\"LOYALTY\", \"ESHOP\", \"GWP\", \"GWS\")\n  GROUP BY ss.sku) \n  WHERE min_date = format_date ( \"%m-%Y\",  current_date()))\n, \ndepreciated_price as \n(SELECT SKU , MAX(date_start) as date_depreciation  , MAX(purchase_price_before) as purchase_price_before ,MIN(purchase_price_depreciated) as purchase_price_depreciated\nFROM `ops.depreciation_detail` \nGROUP BY SKU )\n\n\nSELECT \n\n-- INFORMATION DE INVENTORY ITEM CATALOG\n/*MAX(ic.ID)*/ic.sku, MAX(ic.nice_name) as name, MAX(ic.brand_name) as brand_name,-- remplacer apr\u00e8s par nice _name\nMAX(ic.logistic_category) as logistic_category , MAX(planning_category_name) as planning_category_name, MAX(product_cat_lvl1) as product_cat_lvl1  ,MAX(product_cat_lvl2) as product_cat_lvl2 , MAX(product_cat_lvl3) as product_cat_lvl3,\nMAX(ic.existing_product_types) as existing_product_types, MAX(size_type) as size_type, MAX(capacity) as capacity, MAX(capacity_unit) as capacity_unit, \nMAX(euro_purchase_price) as purchase_price, max(perceived_price) as perceived_price, \n\n-- STOCK \nCOALESCE(pws.stock_scamp,0) as stock_scamp, \npwc.quantity_to_be_received, \nMAX(sik.stock_in_kit) as stock_in_kit, \n\n\n-- TOTAL STOCK\nCOALESCE(pws.stock_scamp,0) +COALESCE(pwc.quantity_to_be_received,0)  AS Forecasted_stock, \nCOALESCE(cr.Booked_Volume,0) as booked_volume, \n-- current available stock = current stock - booked stock\nCASE  when COALESCE(pws.stock_scamp,0) -  COALESCE(cr.Booked_Volume,0)> 0 THEN COALESCE(pws.stock_scamp,0) - COALESCE(cr.Booked_Volume,0)\nELSE 0 END  as current_available_stock_corrected,\n-- forecasted available stock = surrent + commands - booked \nCASE WHEN COALESCE(pws.stock_scamp,0) +COALESCE(quantity_to_be_received,0)- COALESCE(cr.Booked_Volume,0) >0 THEN COALESCE(pws.stock_scamp,0) +COALESCE(quantity_to_be_received,0)- COALESCE(cr.Booked_Volume,0) ELSE 0 END as forecasted_available_stock, \n\n-- SUJET DES SUR-R\u00e9servations ??\n\n-- VALO STOCK \nROUND(COALESCE(pws.stock_scamp,0) * MAX(euro_purchase_price)) as current_stock_value, \n(CASE  when COALESCE(pws.stock_scamp,0) - COALESCE(cr.Booked_Volume,0)> 0 THEN COALESCE(pws.stock_scamp,0) -COALESCE(cr.Booked_Volume,0)\nELSE 0 END) * MAX(euro_purchase_price) as available_stock_value,\n\n\n-- DLUO MIN \nCASE WHEN MIN(md.dluo_min) = \"3000-12-30\" OR MIN(md.dluo_min) is NULL OR MAX(ic.logistic_category) IN (\"print\", \"pack\", \"consumable item\") THEN \"\" ELSE MIN(md.dluo_min) END as MIN_dluo, \nCASE WHEN MIN(md.dluo_min) = \"3000-12-30\" OR MIN(md.dluo_min) is NULL OR MAX(ic.logistic_category) IN (\"print\", \"pack\", \"consumable item\") THEN NULL ELSE MIN(md.stock_dluo_min) END as stock_min_dluo, \nCASE WHEN MIN(md.dluo_min) = \"3000-12-30\"  OR MIN(md.dluo_min) is NULL OR MAX(ic.logistic_category) IN (\"print\", \"pack\", \"consumable item\") then NULL ELSE  round(SAFE_DIVIDE(MIN(md.stock_dluo_min),MAX(pws.stock_scamp)),2) END as percent_dluo_min,\n\n-- Products in kit si assembled product \nMAX(sik2.last_time_box) as last_time_in_box,\nCASE WHEN MAX(ic.logistic_category) = \"assembled product\" then MAX(pik.list_products_in_kit) ELSE NULL END as products_in_kit, \n\n-- produit encore pr\u00e9sent dans les kits affichage des kits\nCASE WHEN MAX(sik.stock_in_kit) > 0 THEN MAX(sik.kit_list) ELSE NULL END AS kit_list, \n\n cr.project_reference as current_booking, \nSTRING_AGG(distinct f.flag_name) as flag, \n\nCOALESCE(pws.stock_scamp,0)+COALESCE(quantity_to_be_received,0) -COALESCE(cr.Booked_Volume,0) as real_forecasted_available_stock, \n\nCASE WHEN MAX(cp.c_project) =cr.project_reference then NULL ELSE\n\n      CASE WHEN (COALESCE(pws.stock_scamp,0)+COALESCE(quantity_to_be_received,0) -COALESCE(cr.Booked_Volume,0)) < -50 then \n\"OVERBOOKING\" ELSE NULL END \nEND AS BOOKING_ALERT,\n\nCASE WHEN MAX(cp.c_project) =cr.project_reference then NULL ELSE\nCASE WHEN (coalesce(pws.stock_scamp,0)+ coalesce(quantity_to_be_received,0)- COALESCE(cr.Booked_Volume,0)) < -50 THEN \nSTRING_AGG(distinct cr.concat ) ELSE NULL END END as alert_resume, \n\nCASE WHEN MAX(ic.logistic_category)= \"assembled product\" THEN \n  CASE WHEN MAX(ic.existing_product_types) = \"BOX\" AND MAX(cbu.sku) is not null then \"YES\" \n       WHEN  MAX(ic.existing_product_types) <> \"BOX\" and MAX(clu.sku) is not null then \"YES\" \n  ELSE NULL END \n  ELSE NULL END as Current_campaign, \n\nMAX(ic.note_moyenne) AS Average_grade, \nMIN ( dp.purchase_price_depreciated) as purchase_price_depreciated, \nMAX(dp.date_depreciation) as date_depreciation, \nMAX( ic.first_product_type  ) as first_product_type, \nSTRING_AGG(distinct bf.brand_flag_name ) as brand_flag, \nMAX (ic.picture_link) as picture_link\n\n\nFROM `catalog.inventory_item_catalog` ic\nLEFT JOIN  products_with_stock pws ON pws.sku =ic.sku\nLEFT JOIN products_with_ongoing_command pwc ON pwc.sku= ic.sku\nLEFT JOIN  stock_in_kit sik ON sik.sku = ic.sku\nLEFT JOIN stock_in_kit2 sik2 ON sik2.sku = ic.sku\nLEFT JOIN catalog.booking b ON b.sku = ic.sku \nLEFT JOIN  min_dluo md ON md.sku = ic.sku\nLEFT JOIN products_in_kit pik on pik.SKU_kit = ic.sku\nLEFT JOIN current_reservation cr on cr.sku = ic.sku\nLEFT JOIN catalog.flag f on f.sku = ic.sku\nLEFT JOIN `teamdata-291012.catalog.brand_flag` bf on bf.brand_name = ic.brand_name\nLEFT JOIN current_project cp ON cp.c_project=b.project_reference\nLEFT JOIN current_box_use cbu ON cbu.sku = ic.sku\nLEFT JOIN current_lte_use clu ON clu.sku = ic.sku\nLEFT JOIN depreciated_price dp ON dp.sku = ic.sku  \nWHERE (pws.stock_scamp > 0\nOR pwc.quantity_to_be_received >0\nOR sik.stock_in_kit > 0 \nOR b.booked_volume > 0)\n-- AND ic.sku= \"AUT-DEFENSEBOTANICA-JBX2407\"\nGROUP BY ic.sku, pws.stock_scamp,  pwc.quantity_to_be_received  , cr.Booked_Volume,  cr.project_reference, cr.concat\nORDER BY pws.stock_scamp desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.customers_streaming": {"database": "teamdata-291012", "schema": "user", "name": "customers_streaming", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/customers_streaming.sql", "original_file_path": "models/schedule/custom/customers_streaming.sql", "unique_id": "model.warehouse.customers_streaming", "fqn": ["warehouse", "schedule", "custom", "customers_streaming"], "alias": "customers_streaming", "checksum": {"name": "sha256", "checksum": "23cffecac96d767213739c28c9f8385abcdcd4429c9694b2de27b9c68753044f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.708071, "relation_name": "`teamdata-291012`.`user`.`customers_streaming`", "raw_code": "WITH \n\nall_customers AS (\n  SELECT dw_country_code, email, MAX(user_id) AS user_id\n  FROM (\n    SELECT dw_country_code, email, NULL AS user_id\n    FROM inter.optin\n    UNION ALL\n    SELECT dw_country_code, user_email AS email, id AS user_id\n    FROM inter.users\n    WHERE user_login <> 'DELETED'\n    UNION ALL\n    SELECT 'FR' AS dw_country_code, email, NULL AS user_id\n    FROM user.crm_data\n    GROUP BY email\n  )\n  GROUP BY dw_country_code, email\n),\nuser_data AS (\n  SELECT u.dw_country_code,\n         u.user_email AS email,\n         uuid,\n         CASE\n          WHEN uml.list_box = 1 OR uml.list_sms = 1 OR uml.list_news = 1 OR uml.list_splendist = 1 OR uml.list_deals = 1 THEN TRUE\n          ELSE FALSE\n          END  AS optin,\n          CASE\n          WHEN uml.list_box = 1  OR uml.list_news = 1 OR uml.list_splendist = 1 OR uml.list_deals = 1 THEN TRUE\n          ELSE FALSE\n          END  AS optin_email,\n         COALESCE(uml.list_box = 1, false) AS optin_box,\n         COALESCE(uml.list_sms = 1, false) AS optin_sms,\n         COALESCE(uml.list_news = 1, false) AS optin_news,\n         COALESCE(uml.list_splendist = 1, false) AS optin_spl,\n         COALESCE(uml.list_deals = 1, false) AS optin_deals,\n         u.id AS user_id,\n         u.user_email LIKE '%@blissim%' OR u.user_email LIKE '%@birchbox%' AS is_admin,\n         u.user_firstname AS firstname,\n         u.user_lastname AS lastname,\n         CASE WHEN DATE(u.user_registered) >= '2011-01-01' THEN u.user_registered END AS registration_date, # If registration before 2011, consider problem in data\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN u.user_birthday END AS birth_date,\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) END AS age\n  FROM inter.users u\n  LEFT JOIN inter.user_mailing_list uml ON u.dw_country_code = uml.dw_country_code AND u.id = uml.user_id\n),\nrange_of_age_table AS (\n  SELECT ud.dw_country_code,\n         ud.user_id,\n         concat(roa.id,' - ',roa.title) AS range_of_age\n  FROM user_data ud\n  INNER JOIN bdd_prod_fr.wp_jb_range_of_age roa ON ud.age >= roa.age_min AND ud.age <= roa.age_max\n),\ntraffic_table AS (\n  SELECT dw_country_code, user_id, MAX(last_login) AS last_login, MAX(ltm_has_seen_box_page) AS ltm_has_seen_box_page, MAX(ltm_has_seen_product_fullsize_page) AS ltm_has_seen_product_fullsize_page, MAX(ltm_has_seen_search_page) AS ltm_has_seen_search_page, MAX(ltm_has_seen_checkout_page) AS ltm_has_seen_checkout_page\n  FROM (\n    SELECT website_country_code AS dw_country_code, CAST(user_id AS INT64) AS user_id, MAX(session_start) AS last_login, MAX(session_with_box_page) AS ltm_has_seen_box_page, MAX(session_with_product_page) AS ltm_has_seen_product_fullsize_page, MAX(session_with_search_page) AS ltm_has_seen_search_page, MAX(session_with_checkout_step1) AS ltm_has_seen_checkout_page\n    FROM `normalised-417010.traffic.sessions`\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY dw_country_code, user_id\n    UNION ALL\n    SELECT dw_country_code, id AS user_id, TIMESTAMP(last_login) AS last_login, False, False, False, False\n    FROM inter.users\n  )\n  GROUP BY dw_country_code, user_id\n),\nbox_sales_one_line_user AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           sub_id,\n           box_id,\n           self,\n           gift,\n           coupon_engagement,\n           year,\n           month,\n           date,\n           coupon_code,\n           coupon_code_id,\n           payment_status,\n           raffed,\n           discount,\n           net_revenue,\n           gross_profit,\n           coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id, box_id ORDER BY order_detail_id) rn\n    FROM sales.box_sales\n  )\n  WHERE rn = 1\n),\ninitial_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           CASE WHEN self = 1 THEN 'self' WHEN gift = 1 THEN 'gift' END AS initial_sub_type,\n           coupon_engagement = 'engaged' AS initial_is_committed,\n           year AS initial_box_year,\n           month AS initial_box_month,\n           date AS initial_box_date,\n           coupon_code AS initial_coupon_code,\n           CASE WHEN coupon_code_id > 0 THEN coupon_code_id END AS initial_coupon_code_id,\n           bs.coupon_type AS initial_coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id) rn\n    FROM box_sales_one_line_user bs\n  )\n  WHERE rn = 1\n),\ncurrent_box_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         bs.coupon_code AS current_coupon_code,\n         CASE WHEN bs.coupon_code_id > 0 THEN bs.coupon_code_id END AS current_coupon_code_id,\n         CASE WHEN bs.self = 1 THEN 'self' WHEN bs.gift = 1 THEN 'gift' END AS current_sub_type,\n         ibt.order_detail_id IS NOT NULL AS current_is_initial,\n         bs.coupon_engagement = 'engaged' AS current_is_committed,\n         bs.payment_status = 'paid' AS current_box_paid,\n         bs.payment_status = 'forthcoming' AS current_box_forthcoming,\n         COALESCE(bs_next.payment_status = 'paid', False) AS next_box_paid,\n         COALESCE(bs_next.payment_status = 'forthcoming', False) AS next_box_forthcoming,\n         bs_next.box_id IS NOT NULL AS next_box_active,\n         bs_next.box_id IS NULL AS next_box_churn,\n         COALESCE(bs_prev.payment_status = 'paid', False) AS paid_prev_box,\n         COALESCE(bs_prev_prev.payment_status = 'paid', False) AS paid_prev_prev_box\n  FROM box_sales_one_line_user bs\n  INNER JOIN snippets.current_box cb ON bs.dw_country_code = cb.dw_country_code AND bs.box_id = cb.current_box_id\n  INNER JOIN inter.order_detail_sub s ON bs.dw_country_code = s.dw_country_code AND bs.sub_id = s.id\n  LEFT JOIN initial_box_table ibt ON bs.dw_country_code = ibt.dw_country_code AND bs.order_detail_id = ibt.order_detail_id\n  LEFT JOIN box_sales_one_line_user bs_prev ON bs.dw_country_code = bs_prev.dw_country_code AND bs.box_id = bs_prev.box_id + 1 AND bs.user_id = bs_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_prev_prev ON bs.dw_country_code = bs_prev_prev.dw_country_code AND bs.box_id = bs_prev_prev.box_id + 2 AND bs.user_id = bs_prev_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_next ON bs.dw_country_code = bs_next.dw_country_code AND bs.box_id = bs_next.box_id - 1 AND bs.user_id = bs_next.user_id\n),\nlast_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           box_id,\n           year AS last_box_paid_year,\n           month AS last_box_paid_month,\n           date AS last_box_paid_date,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id DESC) rn\n    FROM box_sales_one_line_user\n    WHERE payment_status = 'paid'\n  )\n  WHERE rn = 1\n),\nbox_stats_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         COUNTIF(bs.payment_status = 'paid') AS nb_box_paid,\n         array_agg(struct(bs.box_id as box_id,payment_status as payment_status) order by bs.box_id desc)as array_boxes,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL) AS last_consecutive_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_last_consecutive_box_paid,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN net_revenue ELSE 0 END) AS box_net_revenue,\n         SAFE_DIVIDE(SUM(CASE WHEN bs.payment_status = 'paid' THEN discount ELSE 0 END), COUNTIF(bs.payment_status = 'paid')) AS box_average_discount,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN gross_profit ELSE 0 END) AS box_gross_profit,\n         MAX(gift = 1) AS is_ever_gifted,\n         MAX(self = 1) AS is_ever_self,\n         MAX(raffed = 1) AS is_raffed\n  FROM box_sales_one_line_user bs\n  LEFT JOIN last_box_table lbt ON bs.dw_country_code = lbt.dw_country_code AND bs.order_detail_id = lbt.order_detail_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nsub_status_table AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nsub_status_table_before AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status_before\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id-1\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nraffer_table AS (\n  SELECT DISTINCT dw_country_code,\n         parent_user_id AS user_id,\n         True AS is_raffer\n  FROM inter.raf\n),\nchoose_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         MAX(cu.id IS NOT NULL) AS chose_ever,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL), COUNTIF(bs.payment_status = 'paid')) AS choose_participation_rate,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_choose_participation_rate\n  FROM box_sales_one_line_user bs\n  INNER JOIN (SELECT DISTINCT dw_country_code, box_id FROM inter.choose_forms) cf ON bs.dw_country_code = cf.dw_country_code AND bs.box_id = cf.box_id\n  LEFT JOIN inter.choose_users cu ON bs.dw_country_code = cu.dw_country_code AND bs.user_id = cu.user_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nbox_survey_results AS (\n  SELECT ss.dw_country_code,\n         ss.box_id,\n         sr.user_id\n  FROM inter.survey_surveys ss\n  INNER JOIN inter.survey_results sr ON ss.dw_country_code = sr.dw_country_code AND ss.id = sr.survey_id\n  WHERE ss.open_date >= '2011-01-01'\n  AND ss.type = 'BOX'\n  AND sr.status = 'ANSWERED'\n  AND ss.open_date <= CURRENT_DATE()\n),\nbox_survey_answers AS (\n  SELECT bs.dw_country_code,\n         bsr.user_id,\n         MAX(bsr.user_id IS NOT NULL) AS has_answered_box_survey,\n         MAX(bsr.user_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_has_answered_box_survey,\n         SAFE_DIVIDE(COUNTIF(bsr.user_id IS NOT NULL), COUNT(*)) AS rate_answering_box_survey,\n         SAFE_DIVIDE(COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) AND bsr.user_id IS NOT NULL), COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_rate_answering_box_survey\n  FROM box_sales_one_line_user bs\n  LEFT JOIN box_survey_results bsr ON bs.dw_country_code = bsr.dw_country_code AND bs.user_id = bsr.user_id AND bs.box_id = bsr.box_id\n  WHERE bs.payment_status = 'paid'\n  GROUP BY bs.dw_country_code,\n           bsr.user_id\n),\nshop_table AS (\n  SELECT ac.dw_country_code,\n         ac.user_id,\n         MAX(ss.user_id IS NOT NULL) AS is_shopper,\n         MAX(ss.product_codification_id = 0) AS is_shopper_fullsize,\n         MAX(ss.product_codification_id IN (2, 8, 13)) AS is_shopper_exclusives,\n         MAX(ss.product_codification_id = 2) AS is_shopper_lte,\n         MAX(ss.product_codification_id = 8) AS is_shopper_splendist,\n         MAX(ss.product_codification_id = 13) AS is_shopper_calendar,\n         MIN(ss.order_date) AS first_shop_order_date,\n         MIN(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS first_fullsize_order_date,\n         MIN(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS first_exclusive_order_date,\n         MIN(CASE WHEN ss.product_codification_id =8 THEN ss.order_date END) AS first_splendist_order_date,\n         MIN(CASE WHEN ss.product_codification_id =13 THEN ss.order_date END) AS first_calendar_order_date,\n         MAX(ss.order_date) AS last_shop_order_date,\n         MAX(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS last_fullsize_order_date,\n         MAX(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS last_exclusive_order_date,\n         SUM(ss.net_revenue) AS shop_net_revenue,\n         SUM(CASE WHEN ss.product_codification_id = 0 THEN ss.net_revenue END) AS fullsize_net_revenue\n  FROM all_customers ac\n  LEFT JOIN sales.shop_sales ss ON ac.dw_country_code = ss.dw_country_code AND ac.user_id = ss.user_id\n  GROUP BY ac.dw_country_code,\n           ac.user_id\n),\n\nfirst_order AS \n(\n  SELECT c.dw_country_code,c.user_id,count(distinct o.id)as nb_shop_orders, min(o.id) AS first_order, min(o.date) as first_order_date,min(bs.order_id) as first_box_order,\n    c.initial_box_date\n  FROM user.customers c\n  JOIN {{ ref('orders') }} o ON o.user_id = c.user_id AND o.dw_country_code = c.dw_country_code\n    LEFT JOIN sales.box_sales bs ON o.ID = bs.order_id AND o.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = o.id AND ss.dw_country_code = o.dw_country_code\n  WHERE o.status_id = 1\n  GROUP BY c.dw_country_code, c.user_id,initial_box_date\n),\nfirst_order_type AS\n(\n  SELECT fo.dw_country_code, fo.user_id, fo.first_order, fo.first_order_date,nb_shop_orders, \n  MAX(CASE  WHEN bs.order_id IS NOT NULL THEN 'box' \n        WHEN ss.product_codification_id IN (2,8,13) THEN 'Exclusives'\n      ELSE 'shop' END) AS first_order_type\n  FROM first_order fo\n  LEFT JOIN sales.box_sales bs ON fo.first_order = bs.order_id AND fo.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = fo.first_order AND ss.dw_country_code = fo.dw_country_code\n  GROUP BY fo.dw_country_code, fo.user_id, fo.first_order,fo.first_order_date,nb_shop_orders\n),\nfirst_order_source AS\n(\n  SELECT c.dw_country_code, c.user_id,  MAX(t.source) AS source, MAX(t.campaign) AS campaign, MAX(t.support) AS support, MAX(t.device) AS device\n  FROM first_order c\n  JOIN `inter.ga_transactions` t ON t.order_id = c.first_order AND t.dw_country_code = c.dw_country_code\n  WHERE t.dw_country_code IS NOT NULL\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_box AS\n(\n  --GP box\n SELECT c.dw_country_code, c.user_id, \n  SUM( bs.gross_profit \n           \n      ) AS gp_box_ever,\n  SUM(CASE WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_year1,\n    SUM(CASE WHEN  bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_tmp_year1,  \n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year4\n  FROM first_order c\n  JOIN {{ ref('orders') }}o ON o.id = c.first_box_order AND o.dw_country_code = c.dw_country_code\n  JOIN sales.box_sales as bs ON bs.user_id = c.user_id AND  bs.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_shop AS\n(\n  --GP shop & excl\n  SELECT c.dw_country_code, c.user_id,\n    SUM( ss.gross_profit\n      ) AS gp_shop_ever, \n  SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_year1,\n    SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_tmp_year1,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year4\n  FROM first_order c\n  JOIN {{ ref('orders') }}o ON o.id = c.first_order AND o.dw_country_code = c.dw_country_code\n  JOIN `sales.shop_orders_margin` as ss ON ss.user_id = c.user_id AND  ss.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n)\n\nSELECT ac.dw_country_code,\n       ac.email,\n       ac.user_id,\n       uuid,\n       ud.optin,\n       case when ud.optin and cd.ltm_nb_email>0 then true else false end optin_ctc,\n       ud.optin_email,\n       ud.optin_box,\n       ud.optin_news,\n       ud.optin_spl,\n       ud.optin_deals,\n       ud.optin_sms,\n       ud.is_admin,\n       ud.firstname,\n       ud.lastname,\n       ip.gender,\n       ud.registration_date,\n       ud.birth_date,\n       ud.age,\n       ip.billing_phone,\n       ip.billing_country,\n       ip.billing_zipcode,\n       ip.billing_city,\n       ip.billing_adress,\n       roa.range_of_age,\n       tt.last_login,\n       tt.ltm_has_seen_box_page,\n       tt.ltm_has_seen_product_fullsize_page,\n       tt.ltm_has_seen_search_page,\n       tt.ltm_has_seen_checkout_page,\n       cd.open_email,\n       cd.click,\n       cd.date_last_open_email,\n       cd.date_last_click_email,\n       cd.ltm_client_email_rate,\n       cd.ltm_open_email_rate,\n       cd.ltm_click_email,\n       cd.ltm_open_email,\n       cd.ltm_nb_email,\n       bpt.skin_complexion,\n       bpt.skin_type,\n       bpt.skin_redness,\n       bpt.skin_sensitiveness,\n       bpt.skin_aging,\n       bpt.skin_acne,\n       bpt.skin_dilated_pores,\n       bpt.skin_dehydration,\n       bpt.skin_eye_bags,\n       bpt.skin_dullness,\n       bpt.skin_no_problem,\n       bpt.skin_spots,\n       bpt.skin_wrinkles,\n       bpt.body_stretch_marks,\n       bpt.body_cellulite,\n       bpt.body_lack_firmness,\n       bpt.body_dry_skin,\n       bpt.body_water_retention,\n       bpt.body_no_problem,\n       bpt.body_spots,\n       bpt.hair_color,\n       bpt.hair_dye,\n       bpt.hair_thickness,\n       bpt.hair_type,\n       bpt.hair_scalp,\n       bpt.hair_style,\n       bpt.hair_damaged,\n       bpt.hair_split_end,\n       bpt.hair_greasy,\n       bpt.hair_dried,\n       bpt.hair_dandruff,\n       bpt.hair_no_problem,\n       bpt.hair_falls,\n       bpt.want_hair_straight,\n       bpt.want_hair_frizz_free,\n       bpt.want_hair_volume,\n       bpt.want_hair_shine,\n       bpt.want_hair_soft,\n       bpt.want_hair_less_thinning,\n       bpt.want_hair_curly,\n       bpt.want_hair_grow,\n       bpt.use_hair_dryer,\n       bpt.use_hair_straightener,\n       bpt.use_hair_no_device,\n       bpt.beauty_routine,\n       bpt.fragrance_sweet,\n       bpt.fragrance_floral,\n       bpt.fragrance_spicy,\n       bpt.fragrance_fruity,\n       bpt.fragrance_woody,\n       bpt.shop_perfumery,\n       bpt.shop_brand_store,\n       bpt.shop_hairdressing,\n       bpt.shop_pharmacy,\n       bpt.shop_hypermarket,\n       bpt.shop_bio_store,\n       bpt.shop_internet,\n       bpt.beauty_budget,\n       bpt.skin_tone,\n       bpt.eyebrows,\n       bpt.face_care,\n       bpt.body_care,\n       bpt.bath_products,\n       bpt.makeup_general,\n       bpt.makeup_eyes,\n       bpt.makeup_lips,\n       bpt.makeup_eyebrows,\n       bpt.makeup_complexion,\n       bpt.makeup_nails,\n       bpt.hair_shampoo,\n       bpt.hair_conditioner,\n       bpt.hair_mask,\n       bpt.hair_styling,\n       bpt.accessories,\n       bpt.food_supplements,\n       bpt.green_natural_products,\n       bpt.slimming_products,\n       bpt.perfumes,\n      bpt.self_taining, \n          bpt.solid_cosmetics,\n          bpt.hair_products, \n          bpt.discovery_glitter,\n          bpt.discovery_liners_mascaras,\n          bpt.discovery_colored_lipstick,\n          bpt.discovery_colored_nail_varnish,\n          bpt.discovery_colored_nude_makeup,\n          bpt.discovery_makeup,\n       sst.box_sub_status,\n       sstb.box_sub_status_before,\n       ibt.initial_sub_type,\n       ibt.initial_is_committed,\n       ibt.initial_box_year,\n       ibt.initial_box_month,\n       ibt.initial_box_date,\n       ibt.initial_coupon_code,\n       ibt.initial_coupon_code_id,\n       ibt.initial_coupon_type,\n       cbt.current_coupon_code,\n       cbt.current_coupon_code_id,\n       cbt.current_sub_type,\n       cbt.current_is_initial,\n       cbt.current_is_committed,\n       cbt.current_box_paid,\n       cbt.current_box_forthcoming,\n       cbt.next_box_paid,\n       cbt.next_box_forthcoming,\n       cbt.next_box_active,\n       cbt.next_box_churn,\n       cbt.paid_prev_box,\n       cbt.paid_prev_prev_box,\n       lbt.last_box_paid_year,\n       lbt.last_box_paid_month,\n       lbt.last_box_paid_date,\n       bst.array_boxes,\n       bst.nb_box_paid,\n       bst.last_consecutive_box_paid,\n       bst.ltm_nb_box_paid,\n       bst.ltm_last_consecutive_box_paid,\n       bst.box_net_revenue,\n       bst.box_average_discount,\n       bst.box_gross_profit,\n       bst.is_ever_gifted,\n       bst.is_ever_self,\n       bst.is_raffed,\n       rt.is_raffer,\n       ct.chose_ever,\n       ct.choose_participation_rate,\n       ct.ltm_choose_participation_rate,\n       bsa.has_answered_box_survey,\n       bsa.ltm_has_answered_box_survey,\n       bsa.rate_answering_box_survey,\n       bsa.ltm_rate_answering_box_survey,\n       st.is_shopper,\n       st.is_shopper_fullsize,\n       st.is_shopper_exclusives,\n       st.is_shopper_lte,\n       st.is_shopper_splendist,\n       st.is_shopper_calendar,\n       st.first_shop_order_date,\n       st.first_fullsize_order_date,\n       st.first_exclusive_order_date,\n       first_splendist_order_date,\n       first_calendar_order_date,\n       st.last_shop_order_date,\n       st.last_fullsize_order_date,\n       st.last_exclusive_order_date,\n       fot.first_order,\n       fot.first_order_type,\n       fot.first_order_date,\n       fos.source AS first_order_source,\n       fos.campaign AS first_order_campaign,\n       fos.support AS first_order_support,\n       fos.device AS first_order_device,\n       nb_shop_orders,\n       case when nb_shop_orders = 1 then '1'\n       when nb_shop_orders between 2 and 5 then '2-5'\n       when nb_shop_orders between 6 and 10 then '6-10'\n       when nb_shop_orders >10 then '10+' end as group_shop_orders,\n       ifnull(gp_box.gp_box_year1,0) AS ltv_box_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) AS ltv_box_tmp_year1,\n       ifnull(gp_box.gp_box_year2,0) AS ltv_box_year2,\n       ifnull(gp_box.gp_box_year3,0) AS ltv_box_year3,\n       ifnull(gp_box.gp_box_year4,0) AS ltv_box_year4,\n       ifnull(gp_box.gp_box_ever,0) AS ltv_Box_ever,\n       ifnull(gp_shop.gp_shop_ever,0) AS ltv_shop_ever,\n       ifnull(gp_shop.gp_shop_year1,0) AS ltv_shop_year1, -- ltv fin de la premi\u00e8re ann\u00e9e compl\u00e9t\u00e9e\n       ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_shop_tmp_year1, -- ltv sur l'ann\u00e9e en cours \n       ifnull(gp_shop.gp_shop_year2,0) AS ltv_shop_year2,\n       ifnull(gp_shop.gp_shop_year3,0) AS ltv_shop_year3,\n       ifnull(gp_shop.gp_shop_year4,0) AS ltv_shop_year4,\n       ifnull(gp_box.gp_box_ever,0) + ifnull(gp_shop.gp_shop_ever,0) AS ltv_ever,\n       ifnull(gp_box.gp_box_year1,0) + ifnull(gp_shop.gp_shop_year1,0) AS ltv_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) + ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_tmp_year1,\n        ifnull(gp_box.gp_box_year2,0) + ifnull(gp_shop.gp_shop_year2,0) AS ltv_year2,\n       ifnull(gp_box.gp_box_year3,0) + ifnull(gp_shop.gp_shop_year3,0) AS ltv_year3,\n       ifnull(gp_box.gp_box_year4,0) + ifnull(gp_shop.gp_shop_year4,0) AS ltv_year4,\n       ltv.predicted_ltv AS predicted_ltv_year1\nFROM all_customers ac\nLEFT JOIN user_data ud ON ac.dw_country_code = ud.dw_country_code AND ac.user_id = ud.user_id\nLEFT JOIN range_of_age_table roa ON ac.dw_country_code = roa.dw_country_code AND ac.user_id = roa.user_id\nLEFT JOIN traffic_table tt ON ac.dw_country_code = tt.dw_country_code AND ac.user_id = tt.user_id\nLEFT JOIN {{ ref('crm_data') }}  cd ON ac.dw_country_code = 'FR' AND ac.email = cd.email\nLEFT JOIN {{ ref('customers_beauty_profile') }}  bpt ON ac.dw_country_code = bpt.dw_country_code AND ac.user_id = bpt.user_id\nLEFT JOIN sub_status_table sst ON ac.dw_country_code = sst.dw_country_code AND ac.email = sst.email\nLEFT JOIN sub_status_table_before sstb ON ac.dw_country_code = sstb.dw_country_code AND ac.email = sstb.email\nLEFT JOIN initial_box_table ibt ON ac.dw_country_code = ibt.dw_country_code AND ac.user_id = ibt.user_id\nLEFT JOIN current_box_table cbt ON ac.dw_country_code = cbt.dw_country_code AND ac.user_id = cbt.user_id\nLEFT JOIN last_box_table lbt ON ac.dw_country_code = lbt.dw_country_code AND ac.user_id = lbt.user_id\nLEFT JOIN box_stats_table bst ON ac.dw_country_code = bst.dw_country_code AND ac.user_id = bst.user_id\nLEFT JOIN raffer_table rt ON ac.dw_country_code = rt.dw_country_code AND ac.user_id = rt.user_id\nleft join {{ ref('customers_info_perso') }}  ip on ip.user_id= ac.user_id and ip.dw_country_code=ac.dw_country_code\nLEFT JOIN choose_table ct ON ac.dw_country_code = ct.dw_country_code AND ac.user_id = ct.user_id\nLEFT JOIN box_survey_answers bsa ON ac.dw_country_code = bsa.dw_country_code AND ac.user_id = bsa.user_id\nLEFT JOIN shop_table st ON ac.dw_country_code = st.dw_country_code AND ac.user_id = st.user_id\nLEFT JOIN first_order_type fot ON fot.dw_country_code = ac.dw_country_code AND fot.user_id = ac.user_id\nLEFT JOIN first_order_source fos ON fos.dw_country_code = ac.dw_country_code AND fos.user_id = ac.user_id\nLEFT JOIN gp_box ON gp_box.dw_country_code = ac.dw_country_code AND gp_box.user_id = ac.user_id\nLEFT JOIN gp_shop ON gp_shop.dw_country_code = ac.dw_country_code AND gp_shop.user_id = ac.user_id\nLEFT JOIN `teamdata-291012.predictive_ltv.ltv` ltv ON ltv.user_id = ac.user_id AND ac.dw_country_code = 'FR'", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "crm_data", "package": null, "version": null}, {"name": "customers_beauty_profile", "package": null, "version": null}, {"name": "customers_info_perso", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.orders", "model.warehouse.crm_data", "model.warehouse.customers_beauty_profile", "model.warehouse.customers_info_perso"]}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/customers_streaming.sql", "compiled": true, "compiled_code": "WITH \n\nall_customers AS (\n  SELECT dw_country_code, email, MAX(user_id) AS user_id\n  FROM (\n    SELECT dw_country_code, email, NULL AS user_id\n    FROM inter.optin\n    UNION ALL\n    SELECT dw_country_code, user_email AS email, id AS user_id\n    FROM inter.users\n    WHERE user_login <> 'DELETED'\n    UNION ALL\n    SELECT 'FR' AS dw_country_code, email, NULL AS user_id\n    FROM user.crm_data\n    GROUP BY email\n  )\n  GROUP BY dw_country_code, email\n),\nuser_data AS (\n  SELECT u.dw_country_code,\n         u.user_email AS email,\n         uuid,\n         CASE\n          WHEN uml.list_box = 1 OR uml.list_sms = 1 OR uml.list_news = 1 OR uml.list_splendist = 1 OR uml.list_deals = 1 THEN TRUE\n          ELSE FALSE\n          END  AS optin,\n          CASE\n          WHEN uml.list_box = 1  OR uml.list_news = 1 OR uml.list_splendist = 1 OR uml.list_deals = 1 THEN TRUE\n          ELSE FALSE\n          END  AS optin_email,\n         COALESCE(uml.list_box = 1, false) AS optin_box,\n         COALESCE(uml.list_sms = 1, false) AS optin_sms,\n         COALESCE(uml.list_news = 1, false) AS optin_news,\n         COALESCE(uml.list_splendist = 1, false) AS optin_spl,\n         COALESCE(uml.list_deals = 1, false) AS optin_deals,\n         u.id AS user_id,\n         u.user_email LIKE '%@blissim%' OR u.user_email LIKE '%@birchbox%' AS is_admin,\n         u.user_firstname AS firstname,\n         u.user_lastname AS lastname,\n         CASE WHEN DATE(u.user_registered) >= '2011-01-01' THEN u.user_registered END AS registration_date, # If registration before 2011, consider problem in data\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN u.user_birthday END AS birth_date,\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) END AS age\n  FROM inter.users u\n  LEFT JOIN inter.user_mailing_list uml ON u.dw_country_code = uml.dw_country_code AND u.id = uml.user_id\n),\nrange_of_age_table AS (\n  SELECT ud.dw_country_code,\n         ud.user_id,\n         concat(roa.id,' - ',roa.title) AS range_of_age\n  FROM user_data ud\n  INNER JOIN bdd_prod_fr.wp_jb_range_of_age roa ON ud.age >= roa.age_min AND ud.age <= roa.age_max\n),\ntraffic_table AS (\n  SELECT dw_country_code, user_id, MAX(last_login) AS last_login, MAX(ltm_has_seen_box_page) AS ltm_has_seen_box_page, MAX(ltm_has_seen_product_fullsize_page) AS ltm_has_seen_product_fullsize_page, MAX(ltm_has_seen_search_page) AS ltm_has_seen_search_page, MAX(ltm_has_seen_checkout_page) AS ltm_has_seen_checkout_page\n  FROM (\n    SELECT website_country_code AS dw_country_code, CAST(user_id AS INT64) AS user_id, MAX(session_start) AS last_login, MAX(session_with_box_page) AS ltm_has_seen_box_page, MAX(session_with_product_page) AS ltm_has_seen_product_fullsize_page, MAX(session_with_search_page) AS ltm_has_seen_search_page, MAX(session_with_checkout_step1) AS ltm_has_seen_checkout_page\n    FROM `normalised-417010.traffic.sessions`\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY dw_country_code, user_id\n    UNION ALL\n    SELECT dw_country_code, id AS user_id, TIMESTAMP(last_login) AS last_login, False, False, False, False\n    FROM inter.users\n  )\n  GROUP BY dw_country_code, user_id\n),\nbox_sales_one_line_user AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           sub_id,\n           box_id,\n           self,\n           gift,\n           coupon_engagement,\n           year,\n           month,\n           date,\n           coupon_code,\n           coupon_code_id,\n           payment_status,\n           raffed,\n           discount,\n           net_revenue,\n           gross_profit,\n           coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id, box_id ORDER BY order_detail_id) rn\n    FROM sales.box_sales\n  )\n  WHERE rn = 1\n),\ninitial_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           CASE WHEN self = 1 THEN 'self' WHEN gift = 1 THEN 'gift' END AS initial_sub_type,\n           coupon_engagement = 'engaged' AS initial_is_committed,\n           year AS initial_box_year,\n           month AS initial_box_month,\n           date AS initial_box_date,\n           coupon_code AS initial_coupon_code,\n           CASE WHEN coupon_code_id > 0 THEN coupon_code_id END AS initial_coupon_code_id,\n           bs.coupon_type AS initial_coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id) rn\n    FROM box_sales_one_line_user bs\n  )\n  WHERE rn = 1\n),\ncurrent_box_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         bs.coupon_code AS current_coupon_code,\n         CASE WHEN bs.coupon_code_id > 0 THEN bs.coupon_code_id END AS current_coupon_code_id,\n         CASE WHEN bs.self = 1 THEN 'self' WHEN bs.gift = 1 THEN 'gift' END AS current_sub_type,\n         ibt.order_detail_id IS NOT NULL AS current_is_initial,\n         bs.coupon_engagement = 'engaged' AS current_is_committed,\n         bs.payment_status = 'paid' AS current_box_paid,\n         bs.payment_status = 'forthcoming' AS current_box_forthcoming,\n         COALESCE(bs_next.payment_status = 'paid', False) AS next_box_paid,\n         COALESCE(bs_next.payment_status = 'forthcoming', False) AS next_box_forthcoming,\n         bs_next.box_id IS NOT NULL AS next_box_active,\n         bs_next.box_id IS NULL AS next_box_churn,\n         COALESCE(bs_prev.payment_status = 'paid', False) AS paid_prev_box,\n         COALESCE(bs_prev_prev.payment_status = 'paid', False) AS paid_prev_prev_box\n  FROM box_sales_one_line_user bs\n  INNER JOIN snippets.current_box cb ON bs.dw_country_code = cb.dw_country_code AND bs.box_id = cb.current_box_id\n  INNER JOIN inter.order_detail_sub s ON bs.dw_country_code = s.dw_country_code AND bs.sub_id = s.id\n  LEFT JOIN initial_box_table ibt ON bs.dw_country_code = ibt.dw_country_code AND bs.order_detail_id = ibt.order_detail_id\n  LEFT JOIN box_sales_one_line_user bs_prev ON bs.dw_country_code = bs_prev.dw_country_code AND bs.box_id = bs_prev.box_id + 1 AND bs.user_id = bs_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_prev_prev ON bs.dw_country_code = bs_prev_prev.dw_country_code AND bs.box_id = bs_prev_prev.box_id + 2 AND bs.user_id = bs_prev_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_next ON bs.dw_country_code = bs_next.dw_country_code AND bs.box_id = bs_next.box_id - 1 AND bs.user_id = bs_next.user_id\n),\nlast_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           box_id,\n           year AS last_box_paid_year,\n           month AS last_box_paid_month,\n           date AS last_box_paid_date,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id DESC) rn\n    FROM box_sales_one_line_user\n    WHERE payment_status = 'paid'\n  )\n  WHERE rn = 1\n),\nbox_stats_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         COUNTIF(bs.payment_status = 'paid') AS nb_box_paid,\n         array_agg(struct(bs.box_id as box_id,payment_status as payment_status) order by bs.box_id desc)as array_boxes,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL) AS last_consecutive_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_last_consecutive_box_paid,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN net_revenue ELSE 0 END) AS box_net_revenue,\n         SAFE_DIVIDE(SUM(CASE WHEN bs.payment_status = 'paid' THEN discount ELSE 0 END), COUNTIF(bs.payment_status = 'paid')) AS box_average_discount,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN gross_profit ELSE 0 END) AS box_gross_profit,\n         MAX(gift = 1) AS is_ever_gifted,\n         MAX(self = 1) AS is_ever_self,\n         MAX(raffed = 1) AS is_raffed\n  FROM box_sales_one_line_user bs\n  LEFT JOIN last_box_table lbt ON bs.dw_country_code = lbt.dw_country_code AND bs.order_detail_id = lbt.order_detail_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nsub_status_table AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nsub_status_table_before AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status_before\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id-1\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nraffer_table AS (\n  SELECT DISTINCT dw_country_code,\n         parent_user_id AS user_id,\n         True AS is_raffer\n  FROM inter.raf\n),\nchoose_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         MAX(cu.id IS NOT NULL) AS chose_ever,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL), COUNTIF(bs.payment_status = 'paid')) AS choose_participation_rate,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_choose_participation_rate\n  FROM box_sales_one_line_user bs\n  INNER JOIN (SELECT DISTINCT dw_country_code, box_id FROM inter.choose_forms) cf ON bs.dw_country_code = cf.dw_country_code AND bs.box_id = cf.box_id\n  LEFT JOIN inter.choose_users cu ON bs.dw_country_code = cu.dw_country_code AND bs.user_id = cu.user_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nbox_survey_results AS (\n  SELECT ss.dw_country_code,\n         ss.box_id,\n         sr.user_id\n  FROM inter.survey_surveys ss\n  INNER JOIN inter.survey_results sr ON ss.dw_country_code = sr.dw_country_code AND ss.id = sr.survey_id\n  WHERE ss.open_date >= '2011-01-01'\n  AND ss.type = 'BOX'\n  AND sr.status = 'ANSWERED'\n  AND ss.open_date <= CURRENT_DATE()\n),\nbox_survey_answers AS (\n  SELECT bs.dw_country_code,\n         bsr.user_id,\n         MAX(bsr.user_id IS NOT NULL) AS has_answered_box_survey,\n         MAX(bsr.user_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_has_answered_box_survey,\n         SAFE_DIVIDE(COUNTIF(bsr.user_id IS NOT NULL), COUNT(*)) AS rate_answering_box_survey,\n         SAFE_DIVIDE(COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) AND bsr.user_id IS NOT NULL), COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_rate_answering_box_survey\n  FROM box_sales_one_line_user bs\n  LEFT JOIN box_survey_results bsr ON bs.dw_country_code = bsr.dw_country_code AND bs.user_id = bsr.user_id AND bs.box_id = bsr.box_id\n  WHERE bs.payment_status = 'paid'\n  GROUP BY bs.dw_country_code,\n           bsr.user_id\n),\nshop_table AS (\n  SELECT ac.dw_country_code,\n         ac.user_id,\n         MAX(ss.user_id IS NOT NULL) AS is_shopper,\n         MAX(ss.product_codification_id = 0) AS is_shopper_fullsize,\n         MAX(ss.product_codification_id IN (2, 8, 13)) AS is_shopper_exclusives,\n         MAX(ss.product_codification_id = 2) AS is_shopper_lte,\n         MAX(ss.product_codification_id = 8) AS is_shopper_splendist,\n         MAX(ss.product_codification_id = 13) AS is_shopper_calendar,\n         MIN(ss.order_date) AS first_shop_order_date,\n         MIN(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS first_fullsize_order_date,\n         MIN(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS first_exclusive_order_date,\n         MIN(CASE WHEN ss.product_codification_id =8 THEN ss.order_date END) AS first_splendist_order_date,\n         MIN(CASE WHEN ss.product_codification_id =13 THEN ss.order_date END) AS first_calendar_order_date,\n         MAX(ss.order_date) AS last_shop_order_date,\n         MAX(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS last_fullsize_order_date,\n         MAX(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS last_exclusive_order_date,\n         SUM(ss.net_revenue) AS shop_net_revenue,\n         SUM(CASE WHEN ss.product_codification_id = 0 THEN ss.net_revenue END) AS fullsize_net_revenue\n  FROM all_customers ac\n  LEFT JOIN sales.shop_sales ss ON ac.dw_country_code = ss.dw_country_code AND ac.user_id = ss.user_id\n  GROUP BY ac.dw_country_code,\n           ac.user_id\n),\n\nfirst_order AS \n(\n  SELECT c.dw_country_code,c.user_id,count(distinct o.id)as nb_shop_orders, min(o.id) AS first_order, min(o.date) as first_order_date,min(bs.order_id) as first_box_order,\n    c.initial_box_date\n  FROM user.customers c\n  JOIN `teamdata-291012`.`inter`.`orders` o ON o.user_id = c.user_id AND o.dw_country_code = c.dw_country_code\n    LEFT JOIN sales.box_sales bs ON o.ID = bs.order_id AND o.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = o.id AND ss.dw_country_code = o.dw_country_code\n  WHERE o.status_id = 1\n  GROUP BY c.dw_country_code, c.user_id,initial_box_date\n),\nfirst_order_type AS\n(\n  SELECT fo.dw_country_code, fo.user_id, fo.first_order, fo.first_order_date,nb_shop_orders, \n  MAX(CASE  WHEN bs.order_id IS NOT NULL THEN 'box' \n        WHEN ss.product_codification_id IN (2,8,13) THEN 'Exclusives'\n      ELSE 'shop' END) AS first_order_type\n  FROM first_order fo\n  LEFT JOIN sales.box_sales bs ON fo.first_order = bs.order_id AND fo.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = fo.first_order AND ss.dw_country_code = fo.dw_country_code\n  GROUP BY fo.dw_country_code, fo.user_id, fo.first_order,fo.first_order_date,nb_shop_orders\n),\nfirst_order_source AS\n(\n  SELECT c.dw_country_code, c.user_id,  MAX(t.source) AS source, MAX(t.campaign) AS campaign, MAX(t.support) AS support, MAX(t.device) AS device\n  FROM first_order c\n  JOIN `inter.ga_transactions` t ON t.order_id = c.first_order AND t.dw_country_code = c.dw_country_code\n  WHERE t.dw_country_code IS NOT NULL\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_box AS\n(\n  --GP box\n SELECT c.dw_country_code, c.user_id, \n  SUM( bs.gross_profit \n           \n      ) AS gp_box_ever,\n  SUM(CASE WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_year1,\n    SUM(CASE WHEN  bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_tmp_year1,  \n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year4\n  FROM first_order c\n  JOIN `teamdata-291012`.`inter`.`orders`o ON o.id = c.first_box_order AND o.dw_country_code = c.dw_country_code\n  JOIN sales.box_sales as bs ON bs.user_id = c.user_id AND  bs.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_shop AS\n(\n  --GP shop & excl\n  SELECT c.dw_country_code, c.user_id,\n    SUM( ss.gross_profit\n      ) AS gp_shop_ever, \n  SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_year1,\n    SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_tmp_year1,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year4\n  FROM first_order c\n  JOIN `teamdata-291012`.`inter`.`orders`o ON o.id = c.first_order AND o.dw_country_code = c.dw_country_code\n  JOIN `sales.shop_orders_margin` as ss ON ss.user_id = c.user_id AND  ss.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n)\n\nSELECT ac.dw_country_code,\n       ac.email,\n       ac.user_id,\n       uuid,\n       ud.optin,\n       case when ud.optin and cd.ltm_nb_email>0 then true else false end optin_ctc,\n       ud.optin_email,\n       ud.optin_box,\n       ud.optin_news,\n       ud.optin_spl,\n       ud.optin_deals,\n       ud.optin_sms,\n       ud.is_admin,\n       ud.firstname,\n       ud.lastname,\n       ip.gender,\n       ud.registration_date,\n       ud.birth_date,\n       ud.age,\n       ip.billing_phone,\n       ip.billing_country,\n       ip.billing_zipcode,\n       ip.billing_city,\n       ip.billing_adress,\n       roa.range_of_age,\n       tt.last_login,\n       tt.ltm_has_seen_box_page,\n       tt.ltm_has_seen_product_fullsize_page,\n       tt.ltm_has_seen_search_page,\n       tt.ltm_has_seen_checkout_page,\n       cd.open_email,\n       cd.click,\n       cd.date_last_open_email,\n       cd.date_last_click_email,\n       cd.ltm_client_email_rate,\n       cd.ltm_open_email_rate,\n       cd.ltm_click_email,\n       cd.ltm_open_email,\n       cd.ltm_nb_email,\n       bpt.skin_complexion,\n       bpt.skin_type,\n       bpt.skin_redness,\n       bpt.skin_sensitiveness,\n       bpt.skin_aging,\n       bpt.skin_acne,\n       bpt.skin_dilated_pores,\n       bpt.skin_dehydration,\n       bpt.skin_eye_bags,\n       bpt.skin_dullness,\n       bpt.skin_no_problem,\n       bpt.skin_spots,\n       bpt.skin_wrinkles,\n       bpt.body_stretch_marks,\n       bpt.body_cellulite,\n       bpt.body_lack_firmness,\n       bpt.body_dry_skin,\n       bpt.body_water_retention,\n       bpt.body_no_problem,\n       bpt.body_spots,\n       bpt.hair_color,\n       bpt.hair_dye,\n       bpt.hair_thickness,\n       bpt.hair_type,\n       bpt.hair_scalp,\n       bpt.hair_style,\n       bpt.hair_damaged,\n       bpt.hair_split_end,\n       bpt.hair_greasy,\n       bpt.hair_dried,\n       bpt.hair_dandruff,\n       bpt.hair_no_problem,\n       bpt.hair_falls,\n       bpt.want_hair_straight,\n       bpt.want_hair_frizz_free,\n       bpt.want_hair_volume,\n       bpt.want_hair_shine,\n       bpt.want_hair_soft,\n       bpt.want_hair_less_thinning,\n       bpt.want_hair_curly,\n       bpt.want_hair_grow,\n       bpt.use_hair_dryer,\n       bpt.use_hair_straightener,\n       bpt.use_hair_no_device,\n       bpt.beauty_routine,\n       bpt.fragrance_sweet,\n       bpt.fragrance_floral,\n       bpt.fragrance_spicy,\n       bpt.fragrance_fruity,\n       bpt.fragrance_woody,\n       bpt.shop_perfumery,\n       bpt.shop_brand_store,\n       bpt.shop_hairdressing,\n       bpt.shop_pharmacy,\n       bpt.shop_hypermarket,\n       bpt.shop_bio_store,\n       bpt.shop_internet,\n       bpt.beauty_budget,\n       bpt.skin_tone,\n       bpt.eyebrows,\n       bpt.face_care,\n       bpt.body_care,\n       bpt.bath_products,\n       bpt.makeup_general,\n       bpt.makeup_eyes,\n       bpt.makeup_lips,\n       bpt.makeup_eyebrows,\n       bpt.makeup_complexion,\n       bpt.makeup_nails,\n       bpt.hair_shampoo,\n       bpt.hair_conditioner,\n       bpt.hair_mask,\n       bpt.hair_styling,\n       bpt.accessories,\n       bpt.food_supplements,\n       bpt.green_natural_products,\n       bpt.slimming_products,\n       bpt.perfumes,\n      bpt.self_taining, \n          bpt.solid_cosmetics,\n          bpt.hair_products, \n          bpt.discovery_glitter,\n          bpt.discovery_liners_mascaras,\n          bpt.discovery_colored_lipstick,\n          bpt.discovery_colored_nail_varnish,\n          bpt.discovery_colored_nude_makeup,\n          bpt.discovery_makeup,\n       sst.box_sub_status,\n       sstb.box_sub_status_before,\n       ibt.initial_sub_type,\n       ibt.initial_is_committed,\n       ibt.initial_box_year,\n       ibt.initial_box_month,\n       ibt.initial_box_date,\n       ibt.initial_coupon_code,\n       ibt.initial_coupon_code_id,\n       ibt.initial_coupon_type,\n       cbt.current_coupon_code,\n       cbt.current_coupon_code_id,\n       cbt.current_sub_type,\n       cbt.current_is_initial,\n       cbt.current_is_committed,\n       cbt.current_box_paid,\n       cbt.current_box_forthcoming,\n       cbt.next_box_paid,\n       cbt.next_box_forthcoming,\n       cbt.next_box_active,\n       cbt.next_box_churn,\n       cbt.paid_prev_box,\n       cbt.paid_prev_prev_box,\n       lbt.last_box_paid_year,\n       lbt.last_box_paid_month,\n       lbt.last_box_paid_date,\n       bst.array_boxes,\n       bst.nb_box_paid,\n       bst.last_consecutive_box_paid,\n       bst.ltm_nb_box_paid,\n       bst.ltm_last_consecutive_box_paid,\n       bst.box_net_revenue,\n       bst.box_average_discount,\n       bst.box_gross_profit,\n       bst.is_ever_gifted,\n       bst.is_ever_self,\n       bst.is_raffed,\n       rt.is_raffer,\n       ct.chose_ever,\n       ct.choose_participation_rate,\n       ct.ltm_choose_participation_rate,\n       bsa.has_answered_box_survey,\n       bsa.ltm_has_answered_box_survey,\n       bsa.rate_answering_box_survey,\n       bsa.ltm_rate_answering_box_survey,\n       st.is_shopper,\n       st.is_shopper_fullsize,\n       st.is_shopper_exclusives,\n       st.is_shopper_lte,\n       st.is_shopper_splendist,\n       st.is_shopper_calendar,\n       st.first_shop_order_date,\n       st.first_fullsize_order_date,\n       st.first_exclusive_order_date,\n       first_splendist_order_date,\n       first_calendar_order_date,\n       st.last_shop_order_date,\n       st.last_fullsize_order_date,\n       st.last_exclusive_order_date,\n       fot.first_order,\n       fot.first_order_type,\n       fot.first_order_date,\n       fos.source AS first_order_source,\n       fos.campaign AS first_order_campaign,\n       fos.support AS first_order_support,\n       fos.device AS first_order_device,\n       nb_shop_orders,\n       case when nb_shop_orders = 1 then '1'\n       when nb_shop_orders between 2 and 5 then '2-5'\n       when nb_shop_orders between 6 and 10 then '6-10'\n       when nb_shop_orders >10 then '10+' end as group_shop_orders,\n       ifnull(gp_box.gp_box_year1,0) AS ltv_box_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) AS ltv_box_tmp_year1,\n       ifnull(gp_box.gp_box_year2,0) AS ltv_box_year2,\n       ifnull(gp_box.gp_box_year3,0) AS ltv_box_year3,\n       ifnull(gp_box.gp_box_year4,0) AS ltv_box_year4,\n       ifnull(gp_box.gp_box_ever,0) AS ltv_Box_ever,\n       ifnull(gp_shop.gp_shop_ever,0) AS ltv_shop_ever,\n       ifnull(gp_shop.gp_shop_year1,0) AS ltv_shop_year1, -- ltv fin de la premi\u00e8re ann\u00e9e compl\u00e9t\u00e9e\n       ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_shop_tmp_year1, -- ltv sur l'ann\u00e9e en cours \n       ifnull(gp_shop.gp_shop_year2,0) AS ltv_shop_year2,\n       ifnull(gp_shop.gp_shop_year3,0) AS ltv_shop_year3,\n       ifnull(gp_shop.gp_shop_year4,0) AS ltv_shop_year4,\n       ifnull(gp_box.gp_box_ever,0) + ifnull(gp_shop.gp_shop_ever,0) AS ltv_ever,\n       ifnull(gp_box.gp_box_year1,0) + ifnull(gp_shop.gp_shop_year1,0) AS ltv_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) + ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_tmp_year1,\n        ifnull(gp_box.gp_box_year2,0) + ifnull(gp_shop.gp_shop_year2,0) AS ltv_year2,\n       ifnull(gp_box.gp_box_year3,0) + ifnull(gp_shop.gp_shop_year3,0) AS ltv_year3,\n       ifnull(gp_box.gp_box_year4,0) + ifnull(gp_shop.gp_shop_year4,0) AS ltv_year4,\n       ltv.predicted_ltv AS predicted_ltv_year1\nFROM all_customers ac\nLEFT JOIN user_data ud ON ac.dw_country_code = ud.dw_country_code AND ac.user_id = ud.user_id\nLEFT JOIN range_of_age_table roa ON ac.dw_country_code = roa.dw_country_code AND ac.user_id = roa.user_id\nLEFT JOIN traffic_table tt ON ac.dw_country_code = tt.dw_country_code AND ac.user_id = tt.user_id\nLEFT JOIN `teamdata-291012`.`user`.`crm_data`  cd ON ac.dw_country_code = 'FR' AND ac.email = cd.email\nLEFT JOIN `teamdata-291012`.`user`.`customers_beauty_profile`  bpt ON ac.dw_country_code = bpt.dw_country_code AND ac.user_id = bpt.user_id\nLEFT JOIN sub_status_table sst ON ac.dw_country_code = sst.dw_country_code AND ac.email = sst.email\nLEFT JOIN sub_status_table_before sstb ON ac.dw_country_code = sstb.dw_country_code AND ac.email = sstb.email\nLEFT JOIN initial_box_table ibt ON ac.dw_country_code = ibt.dw_country_code AND ac.user_id = ibt.user_id\nLEFT JOIN current_box_table cbt ON ac.dw_country_code = cbt.dw_country_code AND ac.user_id = cbt.user_id\nLEFT JOIN last_box_table lbt ON ac.dw_country_code = lbt.dw_country_code AND ac.user_id = lbt.user_id\nLEFT JOIN box_stats_table bst ON ac.dw_country_code = bst.dw_country_code AND ac.user_id = bst.user_id\nLEFT JOIN raffer_table rt ON ac.dw_country_code = rt.dw_country_code AND ac.user_id = rt.user_id\nleft join `teamdata-291012`.`user`.`customers_info_perso`  ip on ip.user_id= ac.user_id and ip.dw_country_code=ac.dw_country_code\nLEFT JOIN choose_table ct ON ac.dw_country_code = ct.dw_country_code AND ac.user_id = ct.user_id\nLEFT JOIN box_survey_answers bsa ON ac.dw_country_code = bsa.dw_country_code AND ac.user_id = bsa.user_id\nLEFT JOIN shop_table st ON ac.dw_country_code = st.dw_country_code AND ac.user_id = st.user_id\nLEFT JOIN first_order_type fot ON fot.dw_country_code = ac.dw_country_code AND fot.user_id = ac.user_id\nLEFT JOIN first_order_source fos ON fos.dw_country_code = ac.dw_country_code AND fos.user_id = ac.user_id\nLEFT JOIN gp_box ON gp_box.dw_country_code = ac.dw_country_code AND gp_box.user_id = ac.user_id\nLEFT JOIN gp_shop ON gp_shop.dw_country_code = ac.dw_country_code AND gp_shop.user_id = ac.user_id\nLEFT JOIN `teamdata-291012.predictive_ltv.ltv` ltv ON ltv.user_id = ac.user_id AND ac.dw_country_code = 'FR'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.classement_groupe_marque": {"database": "teamdata-291012", "schema": "forecast", "name": "classement_groupe_marque", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/classement_groupe_marque.sql", "original_file_path": "models/schedule/custom/classement_groupe_marque.sql", "unique_id": "model.warehouse.classement_groupe_marque", "fqn": ["warehouse", "schedule", "custom", "classement_groupe_marque"], "alias": "classement_groupe_marque", "checksum": {"name": "sha256", "checksum": "6666331d0e3cfa30caf6bf65a00c479753149c472cb68ea3abd9613b63834f95"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.70979, "relation_name": "`teamdata-291012`.`forecast`.`classement_groupe_marque`", "raw_code": "with moyenne_marque as  ( \nselect p.dw_country_code , p.raw_brand_name,\n count (distinct p.coupon)as nb_operation, round ( AVG(p.taux_capping) , 3) AS moyenne_capping , round ( AVG(p.nb_totale_use) , 3) AS moyenne_nb_utilisation_totale \nfrom forecast.analyse_offre_gws p\n\nwhere p.Type_ope_market is not null \nand raw_brand_name is not null\nand p.jour_ope < 35\nand p.Type_ope_market in (\"GWS No1\", \"GWS No2\",\"GWS No3\", \"GWS No4\")\nAND p.to_consider_analysis = 1\ngroup by p.dw_country_code ,p.raw_brand_name \nhaving   moyenne_capping  is not null\norder by dw_country_code,   moyenne_capping  DESC\n)\n,\nClassement_capping as (\nselect c.dw_country_code, raw_brand_name, nb_operation ,  moyenne_capping  , moyenne_nb_utilisation_totale , ROW_NUMBER() OVER (PARTITION BY c.dw_country_code ORDER BY    moyenne_capping  DESC) AS numero_ligne, safe_divide(nb_marque_classement_pays,4) as nb_marque_groupe , \nfrom moyenne_marque c\nleft join ( \n  select dw_country_code , count(*) as nb_marque_classement_pays\n  from moyenne_marque\n  group by dw_country_code\n) s on s.dw_country_code = c.dw_country_code\norder by dw_country_code ,  moyenne_capping   DESC\n)\n,\nClassement_volume as (\nselect c.dw_country_code, raw_brand_name, nb_operation ,  moyenne_capping  , moyenne_nb_utilisation_totale , ROW_NUMBER() OVER (PARTITION BY c.dw_country_code ORDER BY    moyenne_nb_utilisation_totale  DESC) AS numero_ligne, safe_divide(nb_marque_classement_pays,4) as nb_marque_groupe , \nfrom moyenne_marque c\nleft join ( \n  select dw_country_code , count(*) as nb_marque_classement_pays\n  from moyenne_marque\n  group by dw_country_code\n) s on s.dw_country_code = c.dw_country_code\norder by dw_country_code ,  moyenne_nb_utilisation_totale  DESC\n)\n\nselect cc.dw_country_code, cc.raw_brand_name, cc.nb_operation ,  cc.moyenne_capping  , cc.moyenne_nb_utilisation_totale  ,\ncase when (cc.numero_ligne <  cc.nb_marque_groupe ) then 1\n when (cc.numero_ligne < 2 *  cc.nb_marque_groupe) then 2\n when (cc.numero_ligne < 3*  cc.nb_marque_groupe ) then 3\nelse 4\nend as classement_groupe_marque ,\ncase when (cv.numero_ligne <  cv.nb_marque_groupe ) then 1\n when (cv.numero_ligne < 2 *  cv.nb_marque_groupe) then 2\n when (cv.numero_ligne < 3*  cv.nb_marque_groupe ) then 3\nelse 4\nend as classement_groupe_marque_volume \nfrom Classement_capping cc \nLEFT JOIN Classement_volume cv ON cc.dw_country_code = cv.dw_country_code and cc.raw_brand_name = cv.raw_brand_name\n\nORDER BY classement_groupe_marque ASC", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/classement_groupe_marque.sql", "compiled": true, "compiled_code": "with moyenne_marque as  ( \nselect p.dw_country_code , p.raw_brand_name,\n count (distinct p.coupon)as nb_operation, round ( AVG(p.taux_capping) , 3) AS moyenne_capping , round ( AVG(p.nb_totale_use) , 3) AS moyenne_nb_utilisation_totale \nfrom forecast.analyse_offre_gws p\n\nwhere p.Type_ope_market is not null \nand raw_brand_name is not null\nand p.jour_ope < 35\nand p.Type_ope_market in (\"GWS No1\", \"GWS No2\",\"GWS No3\", \"GWS No4\")\nAND p.to_consider_analysis = 1\ngroup by p.dw_country_code ,p.raw_brand_name \nhaving   moyenne_capping  is not null\norder by dw_country_code,   moyenne_capping  DESC\n)\n,\nClassement_capping as (\nselect c.dw_country_code, raw_brand_name, nb_operation ,  moyenne_capping  , moyenne_nb_utilisation_totale , ROW_NUMBER() OVER (PARTITION BY c.dw_country_code ORDER BY    moyenne_capping  DESC) AS numero_ligne, safe_divide(nb_marque_classement_pays,4) as nb_marque_groupe , \nfrom moyenne_marque c\nleft join ( \n  select dw_country_code , count(*) as nb_marque_classement_pays\n  from moyenne_marque\n  group by dw_country_code\n) s on s.dw_country_code = c.dw_country_code\norder by dw_country_code ,  moyenne_capping   DESC\n)\n,\nClassement_volume as (\nselect c.dw_country_code, raw_brand_name, nb_operation ,  moyenne_capping  , moyenne_nb_utilisation_totale , ROW_NUMBER() OVER (PARTITION BY c.dw_country_code ORDER BY    moyenne_nb_utilisation_totale  DESC) AS numero_ligne, safe_divide(nb_marque_classement_pays,4) as nb_marque_groupe , \nfrom moyenne_marque c\nleft join ( \n  select dw_country_code , count(*) as nb_marque_classement_pays\n  from moyenne_marque\n  group by dw_country_code\n) s on s.dw_country_code = c.dw_country_code\norder by dw_country_code ,  moyenne_nb_utilisation_totale  DESC\n)\n\nselect cc.dw_country_code, cc.raw_brand_name, cc.nb_operation ,  cc.moyenne_capping  , cc.moyenne_nb_utilisation_totale  ,\ncase when (cc.numero_ligne <  cc.nb_marque_groupe ) then 1\n when (cc.numero_ligne < 2 *  cc.nb_marque_groupe) then 2\n when (cc.numero_ligne < 3*  cc.nb_marque_groupe ) then 3\nelse 4\nend as classement_groupe_marque ,\ncase when (cv.numero_ligne <  cv.nb_marque_groupe ) then 1\n when (cv.numero_ligne < 2 *  cv.nb_marque_groupe) then 2\n when (cv.numero_ligne < 3*  cv.nb_marque_groupe ) then 3\nelse 4\nend as classement_groupe_marque_volume \nfrom Classement_capping cc \nLEFT JOIN Classement_volume cv ON cc.dw_country_code = cv.dw_country_code and cc.raw_brand_name = cv.raw_brand_name\n\nORDER BY classement_groupe_marque ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.customers": {"database": "teamdata-291012", "schema": "user", "name": "customers", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/customers.sql", "original_file_path": "models/schedule/custom/customers.sql", "unique_id": "model.warehouse.customers", "fqn": ["warehouse", "schedule", "custom", "customers"], "alias": "customers", "checksum": {"name": "sha256", "checksum": "71ebe5dde8a795149805cfcef78ab8aea42528ea24a5d323918eb9722b24ee53"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.711081, "relation_name": "`teamdata-291012`.`user`.`customers`", "raw_code": "WITH \n\nall_customers AS (\n  SELECT dw_country_code, mail as email, MAX(user_id) AS user_id\n  FROM (\n    SELECT dw_country_code, lower(email) as mail, NULL AS user_id\n    FROM inter.optin\n    UNION ALL\n    SELECT dw_country_code, lower(user_email) as mail, NULL AS user_id\n    FROM inter.user_consent\n    union all\n    SELECT dw_country_code, lower(user_email) AS mail, id AS user_id\n    FROM inter.users\n    WHERE user_login <> 'DELETED'\n    UNION ALL\n    SELECT 'FR' AS dw_country_code, lower(email) as mail, NULL AS user_id\n    FROM user.crm_data\n    where dw_country_code='FR'\n    GROUP BY mail\n  )\n  GROUP BY dw_country_code, email\n),\nuser_data AS (\n  SELECT u.dw_country_code,\n         u.user_email AS email,\n         uuid,\n         CASE\n          WHEN uc_email.consent_status   OR uc_sms.consent_status  THEN TRUE\n          ELSE FALSE\n          END  AS optin,\n          CASE\n          WHEN uc_email.consent_status  THEN TRUE\n          ELSE FALSE\n          END  AS optin_email,\n          CASE\n          WHEN uc_email.consent_status  THEN TRUE\n          ELSE FALSE\n          END   AS optin_partner,\n         COALESCE(uc_sms.consent_status, false) AS optin_sms,\n         u.id AS user_id,\n         u.user_email LIKE '%@blissim%' OR u.user_email LIKE '%@birchbox%' AS is_admin,\n         u.user_firstname AS firstname,\n         u.user_lastname AS lastname,\n         CASE WHEN DATE(u.user_registered) >= '2011-01-01' THEN u.user_registered END AS registration_date, # If registration before 2011, consider problem in data\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN u.user_birthday END AS birth_date,\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) END AS age\n  FROM inter.users u\n  LEFT JOIN {{ ref('user_consent') }} uc_email ON u.dw_country_code = uc_email.dw_country_code AND u.user_email= uc_email.user_email and uc_email.consent_topic_id=3\n  LEFT JOIN {{ ref('user_consent') }} uc_sms ON u.dw_country_code = uc_sms.dw_country_code AND u.user_email = uc_sms.user_email and uc_sms.consent_topic_id=4\n  LEFT JOIN {{ ref('user_consent') }} uc_partner ON u.dw_country_code = uc_partner.dw_country_code AND u.user_email = uc_partner.user_email and uc_partner.consent_topic_id=1\n),\nrange_of_age_table AS (\n  SELECT ud.dw_country_code,\n         ud.user_id,\n         concat(roa.id,' - ',roa.title) AS range_of_age\n  FROM user_data ud\n  INNER JOIN bdd_prod_fr.wp_jb_range_of_age roa ON ud.age >= roa.age_min AND ud.age <= roa.age_max\n),\ntraffic_table AS (\n  SELECT dw_country_code, user_id, MAX(last_login) AS last_login, MAX(ltm_has_seen_box_page) AS ltm_has_seen_box_page, MAX(ltm_has_seen_product_fullsize_page) AS ltm_has_seen_product_fullsize_page, MAX(ltm_has_seen_search_page) AS ltm_has_seen_search_page, MAX(ltm_has_seen_checkout_page) AS ltm_has_seen_checkout_page\n  FROM (\n    SELECT website_country_code AS dw_country_code, CAST(user_id AS INT64) AS user_id, MAX(session_start) AS last_login, MAX(session_with_box_page) AS ltm_has_seen_box_page, MAX(session_with_product_page) AS ltm_has_seen_product_fullsize_page, MAX(session_with_search_page) AS ltm_has_seen_search_page, MAX(session_with_checkout_step1) AS ltm_has_seen_checkout_page\n    FROM `normalised-417010.traffic.sessions`\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY dw_country_code, user_id\n    UNION ALL\n    SELECT dw_country_code, id AS user_id, TIMESTAMP(last_login) AS last_login, False, False, False, False\n    FROM inter.users\n  )\n  GROUP BY dw_country_code, user_id\n),\nbox_sales_one_line_user AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           sub_id,\n           box_id,\n           self,\n           acquis_status_lvl1,\n           gift,\n           coupon_engagement,\n           year,\n           month,\n           date,\n           coupon_code,\n           coupon_code_id,\n           payment_status,\n           raffed,\n           discount,\n           net_revenue,\n           gross_profit,\n           coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id, box_id ORDER BY order_detail_id) rn\n    FROM sales.box_sales\n  )\n  WHERE rn = 1\n),\ninitial_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           CASE WHEN self = 1 THEN 'self' WHEN gift = 1 THEN 'gift' END AS initial_sub_type,\n           coupon_engagement = 'engaged' AS initial_is_committed,\n           year AS initial_box_year,\n           month AS initial_box_month,\n           date AS initial_box_date,\n           coupon_code AS initial_coupon_code,\n           CASE WHEN coupon_code_id > 0 THEN coupon_code_id END AS initial_coupon_code_id,\n           bs.coupon_type AS initial_coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id) rn\n    FROM box_sales_one_line_user bs\n  )\n  WHERE rn = 1\n),\ncurrent_box_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         bs.coupon_code AS current_coupon_code,\n         CASE WHEN bs.coupon_code_id > 0 THEN bs.coupon_code_id END AS current_coupon_code_id,\n         CASE WHEN bs.self = 1 THEN 'self' WHEN bs.gift = 1 THEN 'gift' END AS current_sub_type,\n         ibt.order_detail_id IS NOT NULL AS current_is_initial,\n         bs.coupon_engagement = 'engaged' AS current_is_committed,\n         bs.payment_status = 'paid' AS current_box_paid,\n         bs.payment_status = 'forthcoming' AS current_box_forthcoming,\n         COALESCE(bs_next.payment_status = 'paid', False) AS next_box_paid,\n         COALESCE(bs_next.payment_status = 'forthcoming', False) AS next_box_forthcoming,\n         bs_next.box_id IS NOT NULL AS next_box_active,\n         bs_next.box_id IS NULL AS next_box_churn,\n         COALESCE(bs_prev.payment_status = 'paid', False) AS paid_prev_box,\n         COALESCE(bs_prev_prev.payment_status = 'paid', False) AS paid_prev_prev_box\n  FROM box_sales_one_line_user bs\n  INNER JOIN snippets.current_box cb ON bs.dw_country_code = cb.dw_country_code AND bs.box_id = cb.current_box_id\n  INNER JOIN inter.order_detail_sub s ON bs.dw_country_code = s.dw_country_code AND bs.sub_id = s.id\n  LEFT JOIN initial_box_table ibt ON bs.dw_country_code = ibt.dw_country_code AND bs.order_detail_id = ibt.order_detail_id\n  LEFT JOIN box_sales_one_line_user bs_prev ON bs.dw_country_code = bs_prev.dw_country_code AND bs.box_id = bs_prev.box_id + 1 AND bs.user_id = bs_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_prev_prev ON bs.dw_country_code = bs_prev_prev.dw_country_code AND bs.box_id = bs_prev_prev.box_id + 2 AND bs.user_id = bs_prev_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_next ON bs.dw_country_code = bs_next.dw_country_code AND bs.box_id = bs_next.box_id - 1 AND bs.user_id = bs_next.user_id\n),\nlast_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           box_id,\n           year AS last_box_paid_year,\n           month AS last_box_paid_month,\n           date AS last_box_paid_date,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id DESC) rn\n    FROM box_sales_one_line_user\n    WHERE payment_status = 'paid'\n  )\n  WHERE rn = 1\n),\nlast_box_acquis AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           box_id,\n           year AS last_box_acquis_year,\n           month AS last_box_acquis_month,\n           date AS last_box_acquis_date,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id DESC) rn\n    FROM box_sales_one_line_user\n    WHERE acquis_status_lvl1='ACQUISITION'\n  )\n  WHERE rn = 1\n),\n\n\nbox_stats_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         COUNTIF(bs.payment_status = 'paid') AS nb_box_paid,\n         array_agg(struct(bs.box_id as box_id,payment_status as payment_status) order by bs.box_id desc)as array_boxes,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL) AS last_consecutive_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_last_consecutive_box_paid,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN net_revenue ELSE 0 END) AS box_net_revenue,\n         SAFE_DIVIDE(SUM(CASE WHEN bs.payment_status = 'paid' THEN discount ELSE 0 END), COUNTIF(bs.payment_status = 'paid')) AS box_average_discount,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN gross_profit ELSE 0 END) AS box_gross_profit,\n         MAX(gift = 1) AS is_ever_gifted,\n         MAX(self = 1) AS is_ever_self,\n         MAX(raffed = 1) AS is_raffed\n  FROM box_sales_one_line_user bs\n  LEFT JOIN last_box_table lbt ON bs.dw_country_code = lbt.dw_country_code AND bs.order_detail_id = lbt.order_detail_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nsub_status_table AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nsub_status_table_before AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status_before\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id-1\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nraffer_table AS (\n  SELECT DISTINCT dw_country_code,\n         parent_user_id AS user_id,\n         True AS is_raffer\n  FROM inter.raf\n),\nchoose_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         MAX(cu.id IS NOT NULL) AS chose_ever,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL), COUNTIF(bs.payment_status = 'paid')) AS choose_participation_rate,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_choose_participation_rate\n  FROM box_sales_one_line_user bs\n  INNER JOIN (SELECT DISTINCT dw_country_code, box_id FROM inter.choose_forms) cf ON bs.dw_country_code = cf.dw_country_code AND bs.box_id = cf.box_id\n  LEFT JOIN inter.choose_users cu ON bs.dw_country_code = cu.dw_country_code AND bs.user_id = cu.user_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nbox_survey_results AS (\n  SELECT ss.dw_country_code,\n         ss.box_id,\n         sr.user_id\n  FROM inter.survey_surveys ss\n  INNER JOIN inter.survey_results sr ON ss.dw_country_code = sr.dw_country_code AND ss.id = sr.survey_id\n  WHERE ss.open_date >= '2011-01-01'\n  AND ss.type = 'BOX'\n  AND sr.status = 'ANSWERED'\n  AND ss.open_date <= CURRENT_DATE()\n),\nbox_survey_answers AS (\n  SELECT bs.dw_country_code,\n         bsr.user_id,\n         MAX(bsr.user_id IS NOT NULL) AS has_answered_box_survey,\n         MAX(bsr.user_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_has_answered_box_survey,\n         SAFE_DIVIDE(COUNTIF(bsr.user_id IS NOT NULL), COUNT(*)) AS rate_answering_box_survey,\n         SAFE_DIVIDE(COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) AND bsr.user_id IS NOT NULL), COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_rate_answering_box_survey\n  FROM box_sales_one_line_user bs\n  LEFT JOIN box_survey_results bsr ON bs.dw_country_code = bsr.dw_country_code AND bs.user_id = bsr.user_id AND bs.box_id = bsr.box_id\n  WHERE bs.payment_status = 'paid'\n  GROUP BY bs.dw_country_code,\n           bsr.user_id\n),\nshop_table AS (\n  SELECT ac.dw_country_code,\n         ac.user_id,\n         MAX(ss.user_id IS NOT NULL) AS is_shopper,\n         MAX(ss.product_codification_id = 0) AS is_shopper_fullsize,\n         MAX(ss.product_codification_id IN (2, 8, 13)) AS is_shopper_exclusives,\n         MAX(ss.product_codification_id = 2) AS is_shopper_lte,\n         MAX(ss.product_codification_id = 8) AS is_shopper_splendist,\n         MAX(ss.product_codification_id = 13) AS is_shopper_calendar,\n         MIN(ss.order_date) AS first_shop_order_date,\n         MIN(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS first_fullsize_order_date,\n         MIN(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS first_exclusive_order_date,\n         MIN(CASE WHEN ss.product_codification_id =8 THEN ss.order_date END) AS first_splendist_order_date,\n         MIN(CASE WHEN ss.product_codification_id =13 THEN ss.order_date END) AS first_calendar_order_date,\n         MAX(ss.order_date) AS last_shop_order_date,\n         MAX(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS last_fullsize_order_date,\n         MAX(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS last_exclusive_order_date,\n         SUM(ss.net_revenue) AS shop_net_revenue,\n         SUM(CASE WHEN ss.product_codification_id = 0 THEN ss.net_revenue END) AS fullsize_net_revenue\n  FROM all_customers ac\n  LEFT JOIN sales.shop_sales ss ON ac.dw_country_code = ss.dw_country_code AND ac.user_id = ss.user_id\n  GROUP BY ac.dw_country_code,\n           ac.user_id\n),\n\nfirst_order AS \n(\n  SELECT c.dw_country_code,c.user_id,count(distinct o.id)as nb_shop_orders, min(o.id) AS first_order, min(o.date) as first_order_date,min(bs.order_id) as first_box_order,\n    c.initial_box_date\n  FROM user.customers c\n  JOIN {{ ref('orders') }} o ON o.user_id = c.user_id AND o.dw_country_code = c.dw_country_code\n    LEFT JOIN sales.box_sales bs ON o.ID = bs.order_id AND o.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = o.id AND ss.dw_country_code = o.dw_country_code\n  WHERE o.status_id = 1\n  GROUP BY c.dw_country_code, c.user_id,initial_box_date\n),\nfirst_order_type AS\n(\n  SELECT fo.dw_country_code, fo.user_id, fo.first_order, fo.first_order_date,nb_shop_orders, \n  MAX(CASE  WHEN bs.order_id IS NOT NULL THEN 'box' \n        WHEN ss.product_codification_id IN (2,8,13) THEN 'Exclusives'\n      ELSE 'shop' END) AS first_order_type\n  FROM first_order fo\n  LEFT JOIN sales.box_sales bs ON fo.first_order = bs.order_id AND fo.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = fo.first_order AND ss.dw_country_code = fo.dw_country_code\n  GROUP BY fo.dw_country_code, fo.user_id, fo.first_order,fo.first_order_date,nb_shop_orders\n),\nfirst_order_source AS\n(\n  SELECT c.dw_country_code, c.user_id,  MAX(t.source) AS source, MAX(t.campaign) AS campaign, MAX(t.support) AS support, MAX(t.device) AS device\n  FROM first_order c\n  JOIN `inter.ga_transactions` t ON t.order_id = c.first_order AND t.dw_country_code = c.dw_country_code\n  WHERE t.dw_country_code IS NOT NULL\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_box AS\n(\n  --GP box\n SELECT c.dw_country_code, c.user_id, \n  SUM( bs.gross_profit \n           \n      ) AS gp_box_ever,\n  SUM(CASE WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_year1,\n    SUM(CASE WHEN  bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_tmp_year1,  \n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year4\n  FROM first_order c\n  JOIN {{ ref('orders') }}o ON o.id = c.first_box_order AND o.dw_country_code = c.dw_country_code\n  JOIN sales.box_sales as bs ON bs.user_id = c.user_id AND  bs.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_shop AS\n(\n  --GP shop & excl\n  SELECT c.dw_country_code, c.user_id,\n    SUM( ss.gross_profit\n      ) AS gp_shop_ever, \n  SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_year1,\n    SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_tmp_year1,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year4\n  FROM first_order c\n  JOIN {{ ref('orders') }}o ON o.id = c.first_order AND o.dw_country_code = c.dw_country_code\n  JOIN `sales.shop_orders_margin` as ss ON ss.user_id = c.user_id AND  ss.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n)\n\nSELECT \ndistinct \nac.dw_country_code,\n       ac.email,\n       case when ac.user_id =3065143 then TRUE else null end as slack_bot,\n       ac.user_id,\n       case when ac.user_id is not null then concat(ac.dw_country_code,'_',ac.user_id)\n       else  concat(ac.dw_country_code,'_',lower(ac.email)) end as user_key,\n       uuid,\n        case when ucs.consent_status then true else false end as user_consent_optin_email,\n       case when ac.user_id=3065143 then TRUE else ud.optin end as optin,\n       case when ud.optin and cd.ltm_nb_email>0 then true else false end optin_ctc,\n        case when ac.user_id=3065143 then TRUE\n        when\n        ucs.consent_status then true else false end as optin_email,\n       ud.optin_partner,\n       ud.optin_sms,\n       ud.is_admin,\n       ud.firstname,\n       ud.lastname,\n       ip.gender,\n       ud.registration_date,\n       ud.birth_date,\n       ud.age,\n       ip.billing_phone,\n       functions.standardize_phone(billing_phone, ac.dw_country_code) AS billing_phone_standardized,\n       case when billing_country='FR' then functions.get_region_from_zipcode(billing_zipcode, billing_country)\n        else null end as billing_region,\n       ip.billing_country,\n       ip.billing_zipcode,\n       ip.billing_city,\n       ip.billing_adress,\n       roa.range_of_age,\n       tt.last_login,\n       tt.ltm_has_seen_box_page,\n       tt.ltm_has_seen_product_fullsize_page,\n       tt.ltm_has_seen_search_page,\n       tt.ltm_has_seen_checkout_page,\n       cd.open_email,\n       cd.click,\n       cd.date_last_open_email,\n       cd.date_last_click_email,\n       cd.ltm_client_email_rate,\n       cd.ltm_open_email_rate,\n       cd.ltm_click_email,\n       cd.ltm_open_email,\n       cd.ltm_nb_email,\n       bpt.skin_complexion,\n       bpt.skin_type,\n       bpt.skin_redness,\n       bpt.skin_sensitiveness,\n       bpt.skin_aging,\n       bpt.skin_acne,\n       bpt.skin_dilated_pores,\n       bpt.skin_dehydration,\n       bpt.skin_eye_bags,\n       bpt.skin_dullness,\n       bpt.skin_no_problem,\n       bpt.skin_spots,\n       bpt.skin_wrinkles,\n       bpt.body_stretch_marks,\n       bpt.body_cellulite,\n       bpt.body_lack_firmness,\n       bpt.body_dry_skin,\n       bpt.body_water_retention,\n       bpt.body_no_problem,\n       bpt.body_spots,\n       bpt.hair_color,\n       bpt.hair_dye,\n       bpt.hair_thickness,\n       bpt.hair_type,\n       bpt.hair_scalp,\n       bpt.hair_style,\n       bpt.hair_damaged,\n       bpt.hair_split_end,\n       bpt.hair_greasy,\n       bpt.hair_dried,\n       bpt.hair_dandruff,\n       bpt.hair_no_problem,\n       bpt.hair_falls,\n       bpt.want_hair_straight,\n       bpt.want_hair_frizz_free,\n       bpt.want_hair_volume,\n       bpt.want_hair_shine,\n       bpt.want_hair_soft,\n       bpt.want_hair_less_thinning,\n       bpt.want_hair_curly,\n       bpt.want_hair_grow,\n       bpt.use_hair_dryer,\n       bpt.use_hair_straightener,\n       bpt.use_hair_no_device,\n       bpt.beauty_routine,\n       bpt.fragrance_sweet,\n       bpt.fragrance_floral,\n       bpt.fragrance_spicy,\n       bpt.fragrance_fruity,\n       bpt.fragrance_woody,\n       bpt.shop_perfumery,\n       bpt.shop_brand_store,\n       bpt.shop_hairdressing,\n       bpt.shop_pharmacy,\n       bpt.shop_hypermarket,\n       bpt.shop_bio_store,\n       bpt.shop_internet,\n       bpt.beauty_budget,\n       bpt.skin_tone,\n       bpt.eyebrows,\n       bpt.face_care,\n       bpt.body_care,\n       bpt.bath_products,\n       bpt.makeup_general,\n       bpt.makeup_eyes,\n       bpt.makeup_lips,\n       bpt.makeup_eyebrows,\n       bpt.makeup_complexion,\n       bpt.makeup_nails,\n       bpt.hair_shampoo,\n       bpt.hair_conditioner,\n       bpt.hair_mask,\n       bpt.hair_styling,\n       bpt.accessories,\n       bpt.food_supplements,\n       bpt.green_natural_products,\n       bpt.slimming_products,\n       bpt.perfumes,\n      bpt.self_taining, \n          bpt.solid_cosmetics,\n          bpt.hair_products, \n          bpt.discovery_glitter,\n          bpt.discovery_liners_mascaras,\n          bpt.discovery_colored_lipstick,\n          bpt.discovery_colored_nail_varnish,\n          bpt.discovery_colored_nude_makeup,\n          bpt.discovery_makeup,\n       sst.box_sub_status,\n       sstb.box_sub_status_before,\n       ibt.initial_sub_type,\n       ibt.initial_is_committed,\n       ibt.initial_box_year,\n       ibt.initial_box_month,\n       ibt.initial_box_date,\n       ibt.initial_coupon_code,\n       ibt.initial_coupon_code_id,\n       ibt.initial_coupon_type,\n       cbt.current_coupon_code,\n       cbt.current_coupon_code_id,\n       cbt.current_sub_type,\n       cbt.current_is_initial,\n       cbt.current_is_committed,\n       cbt.current_box_paid,\n       cbt.current_box_forthcoming,\n       cbt.next_box_paid,\n       cbt.next_box_forthcoming,\n       cbt.next_box_active,\n       cbt.next_box_churn,\n       cbt.paid_prev_box,\n       cbt.paid_prev_prev_box,\n       lbt.last_box_paid_year,\n       lbt.last_box_paid_month,\n       lbt.last_box_paid_date,\n       lba.last_box_acquis_year,\n       lba.last_box_acquis_month,\n       lba.last_box_acquis_date,\n       bst.array_boxes,\n       bst.nb_box_paid,\n       bst.last_consecutive_box_paid,\n       bst.ltm_nb_box_paid,\n       bst.ltm_last_consecutive_box_paid,\n       bst.box_net_revenue,\n       bst.box_average_discount,\n       bst.box_gross_profit,\n       bst.is_ever_gifted,\n       bst.is_ever_self,\n       bst.is_raffed,\n       rt.is_raffer,\n       ct.chose_ever,\n       ct.choose_participation_rate,\n       ct.ltm_choose_participation_rate,\n       bsa.has_answered_box_survey,\n       bsa.ltm_has_answered_box_survey,\n       bsa.rate_answering_box_survey,\n       bsa.ltm_rate_answering_box_survey,\n       st.is_shopper,\n       st.is_shopper_fullsize,\n       st.is_shopper_exclusives,\n       st.is_shopper_lte,\n       st.is_shopper_splendist,\n       st.is_shopper_calendar,\n       st.first_shop_order_date,\n       st.first_fullsize_order_date,\n       st.first_exclusive_order_date,\n       first_splendist_order_date,\n       first_calendar_order_date,\n       st.last_shop_order_date,\n       st.last_fullsize_order_date,\n       st.last_exclusive_order_date,\n       fot.first_order,\n       fot.first_order_type,\n       fot.first_order_date,\n       fos.source AS first_order_source,\n       fos.campaign AS first_order_campaign,\n       fos.support AS first_order_support,\n       fos.device AS first_order_device,\n       nb_shop_orders,\n       cpb.balance,\n       cpb.points_soon_to_expire,\n       case when nb_shop_orders = 1 then '1'\n       when nb_shop_orders between 2 and 5 then '2-5'\n       when nb_shop_orders between 6 and 10 then '6-10'\n       when nb_shop_orders >10 then '10+' end as group_shop_orders,\n       ifnull(gp_box.gp_box_year1,0) AS ltv_box_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) AS ltv_box_tmp_year1,\n       ifnull(gp_box.gp_box_year2,0) AS ltv_box_year2,\n       ifnull(gp_box.gp_box_year3,0) AS ltv_box_year3,\n       ifnull(gp_box.gp_box_year4,0) AS ltv_box_year4,\n       ifnull(gp_box.gp_box_ever,0) AS ltv_Box_ever,\n       ifnull(gp_shop.gp_shop_ever,0) AS ltv_shop_ever,\n       ifnull(gp_shop.gp_shop_year1,0) AS ltv_shop_year1, -- ltv fin de la premi\u00e8re ann\u00e9e compl\u00e9t\u00e9e\n       ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_shop_tmp_year1, -- ltv sur l'ann\u00e9e en cours \n       ifnull(gp_shop.gp_shop_year2,0) AS ltv_shop_year2,\n       ifnull(gp_shop.gp_shop_year3,0) AS ltv_shop_year3,\n       ifnull(gp_shop.gp_shop_year4,0) AS ltv_shop_year4,\n       ifnull(gp_box.gp_box_ever,0) + ifnull(gp_shop.gp_shop_ever,0) AS ltv_ever,\n       ifnull(gp_box.gp_box_year1,0) + ifnull(gp_shop.gp_shop_year1,0) AS ltv_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) + ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_tmp_year1,\n        ifnull(gp_box.gp_box_year2,0) + ifnull(gp_shop.gp_shop_year2,0) AS ltv_year2,\n       ifnull(gp_box.gp_box_year3,0) + ifnull(gp_shop.gp_shop_year3,0) AS ltv_year3,\n       ifnull(gp_box.gp_box_year4,0) + ifnull(gp_shop.gp_shop_year4,0) AS ltv_year4,\n       ltv.predicted_ltv AS predicted_ltv_year1\nFROM all_customers ac\nLEFT JOIN user_data ud ON ac.dw_country_code = ud.dw_country_code AND ac.user_id = ud.user_id\nLEFT JOIN range_of_age_table roa ON ac.dw_country_code = roa.dw_country_code AND ac.user_id = roa.user_id\nLEFT JOIN traffic_table tt ON ac.dw_country_code = tt.dw_country_code AND ac.user_id = tt.user_id\nLEFT JOIN {{ ref('crm_data') }}  cd ON case when ac.dw_country_code = 'FR' then 'FR' else 'EU' end  = cd.dw_country_code AND ac.email = cd.email\nLEFT JOIN {{ ref('customers_beauty_profile') }}  bpt ON ac.dw_country_code = bpt.dw_country_code AND ac.user_id = bpt.user_id\nLEFT JOIN sub_status_table sst ON ac.dw_country_code = sst.dw_country_code AND ac.email = sst.email\nLEFT JOIN sub_status_table_before sstb ON ac.dw_country_code = sstb.dw_country_code AND ac.email = sstb.email\nLEFT JOIN initial_box_table ibt ON ac.dw_country_code = ibt.dw_country_code AND ac.user_id = ibt.user_id\nLEFT JOIN current_box_table cbt ON ac.dw_country_code = cbt.dw_country_code AND ac.user_id = cbt.user_id\nLEFT JOIN last_box_table lbt ON ac.dw_country_code = lbt.dw_country_code AND ac.user_id = lbt.user_id\nLEFT JOIN last_box_acquis lba ON ac.dw_country_code = lba.dw_country_code AND ac.user_id = lba.user_id\nLEFT JOIN box_stats_table bst ON ac.dw_country_code = bst.dw_country_code AND ac.user_id = bst.user_id\nLEFT JOIN raffer_table rt ON ac.dw_country_code = rt.dw_country_code AND ac.user_id = rt.user_id\nleft join {{ ref('customers_info_perso') }}  ip on ip.user_id= ac.user_id and ip.dw_country_code=ac.dw_country_code\nLEFT JOIN choose_table ct ON ac.dw_country_code = ct.dw_country_code AND ac.user_id = ct.user_id\nLEFT JOIN box_survey_answers bsa ON ac.dw_country_code = bsa.dw_country_code AND ac.user_id = bsa.user_id\nLEFT JOIN shop_table st ON ac.dw_country_code = st.dw_country_code AND ac.user_id = st.user_id\nLEFT JOIN first_order_type fot ON fot.dw_country_code = ac.dw_country_code AND fot.user_id = ac.user_id\nLEFT JOIN first_order_source fos ON fos.dw_country_code = ac.dw_country_code AND fos.user_id = ac.user_id\nLEFT JOIN gp_box ON gp_box.dw_country_code = ac.dw_country_code AND gp_box.user_id = ac.user_id\nLEFT JOIN gp_shop ON gp_shop.dw_country_code = ac.dw_country_code AND gp_shop.user_id = ac.user_id\nLEFT JOIN `teamdata-291012.predictive_ltv.ltv` ltv ON ltv.user_id = ac.user_id AND ac.dw_country_code = 'FR'\nLEFT JOIN user.customers_points_balance cpb on cpb.user_id=ac.user_id and cpb.dw_country_code=ac.dw_country_code\nLEFT JOIN inter.user_consent ucs on lower(ucs.user_email)=ac.email and ucs.dw_country_code=ac.dw_country_code and consent_topic_id=3\n-- where ac.user_id=3065143", "language": "sql", "refs": [{"name": "user_consent", "package": null, "version": null}, {"name": "user_consent", "package": null, "version": null}, {"name": "user_consent", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "crm_data", "package": null, "version": null}, {"name": "customers_beauty_profile", "package": null, "version": null}, {"name": "customers_info_perso", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.user_consent", "model.warehouse.orders", "model.warehouse.crm_data", "model.warehouse.customers_beauty_profile", "model.warehouse.customers_info_perso"]}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/customers.sql", "compiled": true, "compiled_code": "WITH \n\nall_customers AS (\n  SELECT dw_country_code, mail as email, MAX(user_id) AS user_id\n  FROM (\n    SELECT dw_country_code, lower(email) as mail, NULL AS user_id\n    FROM inter.optin\n    UNION ALL\n    SELECT dw_country_code, lower(user_email) as mail, NULL AS user_id\n    FROM inter.user_consent\n    union all\n    SELECT dw_country_code, lower(user_email) AS mail, id AS user_id\n    FROM inter.users\n    WHERE user_login <> 'DELETED'\n    UNION ALL\n    SELECT 'FR' AS dw_country_code, lower(email) as mail, NULL AS user_id\n    FROM user.crm_data\n    where dw_country_code='FR'\n    GROUP BY mail\n  )\n  GROUP BY dw_country_code, email\n),\nuser_data AS (\n  SELECT u.dw_country_code,\n         u.user_email AS email,\n         uuid,\n         CASE\n          WHEN uc_email.consent_status   OR uc_sms.consent_status  THEN TRUE\n          ELSE FALSE\n          END  AS optin,\n          CASE\n          WHEN uc_email.consent_status  THEN TRUE\n          ELSE FALSE\n          END  AS optin_email,\n          CASE\n          WHEN uc_email.consent_status  THEN TRUE\n          ELSE FALSE\n          END   AS optin_partner,\n         COALESCE(uc_sms.consent_status, false) AS optin_sms,\n         u.id AS user_id,\n         u.user_email LIKE '%@blissim%' OR u.user_email LIKE '%@birchbox%' AS is_admin,\n         u.user_firstname AS firstname,\n         u.user_lastname AS lastname,\n         CASE WHEN DATE(u.user_registered) >= '2011-01-01' THEN u.user_registered END AS registration_date, # If registration before 2011, consider problem in data\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN u.user_birthday END AS birth_date,\n         CASE WHEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) <= 100 AND DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) >= 12 THEN DATE_DIFF(CURRENT_DATE(), DATE(u.user_birthday), YEAR) END AS age\n  FROM inter.users u\n  LEFT JOIN `teamdata-291012`.`inter`.`user_consent` uc_email ON u.dw_country_code = uc_email.dw_country_code AND u.user_email= uc_email.user_email and uc_email.consent_topic_id=3\n  LEFT JOIN `teamdata-291012`.`inter`.`user_consent` uc_sms ON u.dw_country_code = uc_sms.dw_country_code AND u.user_email = uc_sms.user_email and uc_sms.consent_topic_id=4\n  LEFT JOIN `teamdata-291012`.`inter`.`user_consent` uc_partner ON u.dw_country_code = uc_partner.dw_country_code AND u.user_email = uc_partner.user_email and uc_partner.consent_topic_id=1\n),\nrange_of_age_table AS (\n  SELECT ud.dw_country_code,\n         ud.user_id,\n         concat(roa.id,' - ',roa.title) AS range_of_age\n  FROM user_data ud\n  INNER JOIN bdd_prod_fr.wp_jb_range_of_age roa ON ud.age >= roa.age_min AND ud.age <= roa.age_max\n),\ntraffic_table AS (\n  SELECT dw_country_code, user_id, MAX(last_login) AS last_login, MAX(ltm_has_seen_box_page) AS ltm_has_seen_box_page, MAX(ltm_has_seen_product_fullsize_page) AS ltm_has_seen_product_fullsize_page, MAX(ltm_has_seen_search_page) AS ltm_has_seen_search_page, MAX(ltm_has_seen_checkout_page) AS ltm_has_seen_checkout_page\n  FROM (\n    SELECT website_country_code AS dw_country_code, CAST(user_id AS INT64) AS user_id, MAX(session_start) AS last_login, MAX(session_with_box_page) AS ltm_has_seen_box_page, MAX(session_with_product_page) AS ltm_has_seen_product_fullsize_page, MAX(session_with_search_page) AS ltm_has_seen_search_page, MAX(session_with_checkout_step1) AS ltm_has_seen_checkout_page\n    FROM `normalised-417010.traffic.sessions`\n    WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n    GROUP BY dw_country_code, user_id\n    UNION ALL\n    SELECT dw_country_code, id AS user_id, TIMESTAMP(last_login) AS last_login, False, False, False, False\n    FROM inter.users\n  )\n  GROUP BY dw_country_code, user_id\n),\nbox_sales_one_line_user AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           sub_id,\n           box_id,\n           self,\n           acquis_status_lvl1,\n           gift,\n           coupon_engagement,\n           year,\n           month,\n           date,\n           coupon_code,\n           coupon_code_id,\n           payment_status,\n           raffed,\n           discount,\n           net_revenue,\n           gross_profit,\n           coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id, box_id ORDER BY order_detail_id) rn\n    FROM sales.box_sales\n  )\n  WHERE rn = 1\n),\ninitial_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           CASE WHEN self = 1 THEN 'self' WHEN gift = 1 THEN 'gift' END AS initial_sub_type,\n           coupon_engagement = 'engaged' AS initial_is_committed,\n           year AS initial_box_year,\n           month AS initial_box_month,\n           date AS initial_box_date,\n           coupon_code AS initial_coupon_code,\n           CASE WHEN coupon_code_id > 0 THEN coupon_code_id END AS initial_coupon_code_id,\n           bs.coupon_type AS initial_coupon_type,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id) rn\n    FROM box_sales_one_line_user bs\n  )\n  WHERE rn = 1\n),\ncurrent_box_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         bs.coupon_code AS current_coupon_code,\n         CASE WHEN bs.coupon_code_id > 0 THEN bs.coupon_code_id END AS current_coupon_code_id,\n         CASE WHEN bs.self = 1 THEN 'self' WHEN bs.gift = 1 THEN 'gift' END AS current_sub_type,\n         ibt.order_detail_id IS NOT NULL AS current_is_initial,\n         bs.coupon_engagement = 'engaged' AS current_is_committed,\n         bs.payment_status = 'paid' AS current_box_paid,\n         bs.payment_status = 'forthcoming' AS current_box_forthcoming,\n         COALESCE(bs_next.payment_status = 'paid', False) AS next_box_paid,\n         COALESCE(bs_next.payment_status = 'forthcoming', False) AS next_box_forthcoming,\n         bs_next.box_id IS NOT NULL AS next_box_active,\n         bs_next.box_id IS NULL AS next_box_churn,\n         COALESCE(bs_prev.payment_status = 'paid', False) AS paid_prev_box,\n         COALESCE(bs_prev_prev.payment_status = 'paid', False) AS paid_prev_prev_box\n  FROM box_sales_one_line_user bs\n  INNER JOIN snippets.current_box cb ON bs.dw_country_code = cb.dw_country_code AND bs.box_id = cb.current_box_id\n  INNER JOIN inter.order_detail_sub s ON bs.dw_country_code = s.dw_country_code AND bs.sub_id = s.id\n  LEFT JOIN initial_box_table ibt ON bs.dw_country_code = ibt.dw_country_code AND bs.order_detail_id = ibt.order_detail_id\n  LEFT JOIN box_sales_one_line_user bs_prev ON bs.dw_country_code = bs_prev.dw_country_code AND bs.box_id = bs_prev.box_id + 1 AND bs.user_id = bs_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_prev_prev ON bs.dw_country_code = bs_prev_prev.dw_country_code AND bs.box_id = bs_prev_prev.box_id + 2 AND bs.user_id = bs_prev_prev.user_id\n  LEFT JOIN box_sales_one_line_user bs_next ON bs.dw_country_code = bs_next.dw_country_code AND bs.box_id = bs_next.box_id - 1 AND bs.user_id = bs_next.user_id\n),\nlast_box_table AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           box_id,\n           year AS last_box_paid_year,\n           month AS last_box_paid_month,\n           date AS last_box_paid_date,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id DESC) rn\n    FROM box_sales_one_line_user\n    WHERE payment_status = 'paid'\n  )\n  WHERE rn = 1\n),\nlast_box_acquis AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT dw_country_code,\n           user_id,\n           order_detail_id,\n           box_id,\n           year AS last_box_acquis_year,\n           month AS last_box_acquis_month,\n           date AS last_box_acquis_date,\n           ROW_NUMBER() OVER (PARTITION BY dw_country_code, user_id ORDER BY box_id DESC) rn\n    FROM box_sales_one_line_user\n    WHERE acquis_status_lvl1='ACQUISITION'\n  )\n  WHERE rn = 1\n),\n\n\nbox_stats_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         COUNTIF(bs.payment_status = 'paid') AS nb_box_paid,\n         array_agg(struct(bs.box_id as box_id,payment_status as payment_status) order by bs.box_id desc)as array_boxes,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL) AS last_consecutive_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_nb_box_paid,\n         COUNTIF(bs.payment_status = 'paid' AND lbt.order_detail_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_last_consecutive_box_paid,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN net_revenue ELSE 0 END) AS box_net_revenue,\n         SAFE_DIVIDE(SUM(CASE WHEN bs.payment_status = 'paid' THEN discount ELSE 0 END), COUNTIF(bs.payment_status = 'paid')) AS box_average_discount,\n         SUM(CASE WHEN bs.payment_status = 'paid' THEN gross_profit ELSE 0 END) AS box_gross_profit,\n         MAX(gift = 1) AS is_ever_gifted,\n         MAX(self = 1) AS is_ever_self,\n         MAX(raffed = 1) AS is_raffed\n  FROM box_sales_one_line_user bs\n  LEFT JOIN last_box_table lbt ON bs.dw_country_code = lbt.dw_country_code AND bs.order_detail_id = lbt.order_detail_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nsub_status_table AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nsub_status_table_before AS (\n  SELECT ac.dw_country_code,\n         ac.email,\n         ac.user_id,\n         CASE WHEN MAX(bs_ever.user_id) IS NULL THEN 'NEVERSUB'\n              WHEN MAX(bs.user_id IS NOT NULL) THEN 'SUB'\n              ELSE 'CHURN'\n         END AS box_sub_status_before\n  FROM all_customers ac\n  INNER JOIN snippets.current_box cb ON ac.dw_country_code = cb.dw_country_code\n  LEFT JOIN box_sales_one_line_user bs_ever ON ac.dw_country_code = bs_ever.dw_country_code AND ac.user_id = bs_ever.user_id\n  LEFT JOIN sales.box_sales bs ON ac.dw_country_code = bs.dw_country_code AND ac.user_id = bs.user_id AND bs.box_id = cb.current_box_id-1\n  GROUP BY ac.dw_country_code,\n           ac.email,\n           ac.user_id\n),\nraffer_table AS (\n  SELECT DISTINCT dw_country_code,\n         parent_user_id AS user_id,\n         True AS is_raffer\n  FROM inter.raf\n),\nchoose_table AS (\n  SELECT bs.dw_country_code,\n         bs.user_id,\n         MAX(cu.id IS NOT NULL) AS chose_ever,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL), COUNTIF(bs.payment_status = 'paid')) AS choose_participation_rate,\n         SAFE_DIVIDE(COUNTIF(bs.payment_status = 'paid' AND cu.id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), COUNTIF(bs.payment_status = 'paid' AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_choose_participation_rate\n  FROM box_sales_one_line_user bs\n  INNER JOIN (SELECT DISTINCT dw_country_code, box_id FROM inter.choose_forms) cf ON bs.dw_country_code = cf.dw_country_code AND bs.box_id = cf.box_id\n  LEFT JOIN inter.choose_users cu ON bs.dw_country_code = cu.dw_country_code AND bs.user_id = cu.user_id\n  GROUP BY bs.dw_country_code,\n           bs.user_id\n),\nbox_survey_results AS (\n  SELECT ss.dw_country_code,\n         ss.box_id,\n         sr.user_id\n  FROM inter.survey_surveys ss\n  INNER JOIN inter.survey_results sr ON ss.dw_country_code = sr.dw_country_code AND ss.id = sr.survey_id\n  WHERE ss.open_date >= '2011-01-01'\n  AND ss.type = 'BOX'\n  AND sr.status = 'ANSWERED'\n  AND ss.open_date <= CURRENT_DATE()\n),\nbox_survey_answers AS (\n  SELECT bs.dw_country_code,\n         bsr.user_id,\n         MAX(bsr.user_id IS NOT NULL) AS has_answered_box_survey,\n         MAX(bsr.user_id IS NOT NULL AND bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)) AS ltm_has_answered_box_survey,\n         SAFE_DIVIDE(COUNTIF(bsr.user_id IS NOT NULL), COUNT(*)) AS rate_answering_box_survey,\n         SAFE_DIVIDE(COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) AND bsr.user_id IS NOT NULL), COUNTIF(bs.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))) AS ltm_rate_answering_box_survey\n  FROM box_sales_one_line_user bs\n  LEFT JOIN box_survey_results bsr ON bs.dw_country_code = bsr.dw_country_code AND bs.user_id = bsr.user_id AND bs.box_id = bsr.box_id\n  WHERE bs.payment_status = 'paid'\n  GROUP BY bs.dw_country_code,\n           bsr.user_id\n),\nshop_table AS (\n  SELECT ac.dw_country_code,\n         ac.user_id,\n         MAX(ss.user_id IS NOT NULL) AS is_shopper,\n         MAX(ss.product_codification_id = 0) AS is_shopper_fullsize,\n         MAX(ss.product_codification_id IN (2, 8, 13)) AS is_shopper_exclusives,\n         MAX(ss.product_codification_id = 2) AS is_shopper_lte,\n         MAX(ss.product_codification_id = 8) AS is_shopper_splendist,\n         MAX(ss.product_codification_id = 13) AS is_shopper_calendar,\n         MIN(ss.order_date) AS first_shop_order_date,\n         MIN(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS first_fullsize_order_date,\n         MIN(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS first_exclusive_order_date,\n         MIN(CASE WHEN ss.product_codification_id =8 THEN ss.order_date END) AS first_splendist_order_date,\n         MIN(CASE WHEN ss.product_codification_id =13 THEN ss.order_date END) AS first_calendar_order_date,\n         MAX(ss.order_date) AS last_shop_order_date,\n         MAX(CASE WHEN ss.product_codification_id = 0 THEN ss.order_date END) AS last_fullsize_order_date,\n         MAX(CASE WHEN ss.product_codification_id IN (2, 8, 13) THEN ss.order_date END) AS last_exclusive_order_date,\n         SUM(ss.net_revenue) AS shop_net_revenue,\n         SUM(CASE WHEN ss.product_codification_id = 0 THEN ss.net_revenue END) AS fullsize_net_revenue\n  FROM all_customers ac\n  LEFT JOIN sales.shop_sales ss ON ac.dw_country_code = ss.dw_country_code AND ac.user_id = ss.user_id\n  GROUP BY ac.dw_country_code,\n           ac.user_id\n),\n\nfirst_order AS \n(\n  SELECT c.dw_country_code,c.user_id,count(distinct o.id)as nb_shop_orders, min(o.id) AS first_order, min(o.date) as first_order_date,min(bs.order_id) as first_box_order,\n    c.initial_box_date\n  FROM user.customers c\n  JOIN `teamdata-291012`.`inter`.`orders` o ON o.user_id = c.user_id AND o.dw_country_code = c.dw_country_code\n    LEFT JOIN sales.box_sales bs ON o.ID = bs.order_id AND o.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = o.id AND ss.dw_country_code = o.dw_country_code\n  WHERE o.status_id = 1\n  GROUP BY c.dw_country_code, c.user_id,initial_box_date\n),\nfirst_order_type AS\n(\n  SELECT fo.dw_country_code, fo.user_id, fo.first_order, fo.first_order_date,nb_shop_orders, \n  MAX(CASE  WHEN bs.order_id IS NOT NULL THEN 'box' \n        WHEN ss.product_codification_id IN (2,8,13) THEN 'Exclusives'\n      ELSE 'shop' END) AS first_order_type\n  FROM first_order fo\n  LEFT JOIN sales.box_sales bs ON fo.first_order = bs.order_id AND fo.dw_country_code = bs.dw_country_code\n  LEFT JOIN sales.shop_sales as ss ON ss.order_id = fo.first_order AND ss.dw_country_code = fo.dw_country_code\n  GROUP BY fo.dw_country_code, fo.user_id, fo.first_order,fo.first_order_date,nb_shop_orders\n),\nfirst_order_source AS\n(\n  SELECT c.dw_country_code, c.user_id,  MAX(t.source) AS source, MAX(t.campaign) AS campaign, MAX(t.support) AS support, MAX(t.device) AS device\n  FROM first_order c\n  JOIN `inter.ga_transactions` t ON t.order_id = c.first_order AND t.dw_country_code = c.dw_country_code\n  WHERE t.dw_country_code IS NOT NULL\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_box AS\n(\n  --GP box\n SELECT c.dw_country_code, c.user_id, \n  SUM( bs.gross_profit \n           \n      ) AS gp_box_ever,\n  SUM(CASE WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_year1,\n    SUM(CASE WHEN  bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 1 YEAR) THEN bs.gross_profit \n            ELSE 0 END\n      ) AS gp_box_tmp_year1,  \n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 2 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 3 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN bs.date <= DATE_ADD(DATE(c.initial_box_date), INTERVAL 4 YEAR) THEN bs.gross_profit \n            ELSE 0 END) AS gp_box_year4\n  FROM first_order c\n  JOIN `teamdata-291012`.`inter`.`orders`o ON o.id = c.first_box_order AND o.dw_country_code = c.dw_country_code\n  JOIN sales.box_sales as bs ON bs.user_id = c.user_id AND  bs.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n),\ngp_shop AS\n(\n  --GP shop & excl\n  SELECT c.dw_country_code, c.user_id,\n    SUM( ss.gross_profit\n      ) AS gp_shop_ever, \n  SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_year1,\n    SUM(CASE WHEN DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 1 YEAR) THEN ss.gross_profit \n            ELSE 0 END\n      ) AS gp_shop_tmp_year1,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 2 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year2,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 3 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year3,\n  SUM(CASE  WHEN DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) > CURRENT_DATE THEN NULL\n            WHEN ss.order_date <= DATE_ADD(DATE(o.date), INTERVAL 4 YEAR) THEN ss.gross_profit \n            ELSE 0 END) AS gp_shop_year4\n  FROM first_order c\n  JOIN `teamdata-291012`.`inter`.`orders`o ON o.id = c.first_order AND o.dw_country_code = c.dw_country_code\n  JOIN `sales.shop_orders_margin` as ss ON ss.user_id = c.user_id AND  ss.dw_country_code = c.dw_country_code\n  GROUP BY c.dw_country_code, c.user_id\n)\n\nSELECT \ndistinct \nac.dw_country_code,\n       ac.email,\n       case when ac.user_id =3065143 then TRUE else null end as slack_bot,\n       ac.user_id,\n       case when ac.user_id is not null then concat(ac.dw_country_code,'_',ac.user_id)\n       else  concat(ac.dw_country_code,'_',lower(ac.email)) end as user_key,\n       uuid,\n        case when ucs.consent_status then true else false end as user_consent_optin_email,\n       case when ac.user_id=3065143 then TRUE else ud.optin end as optin,\n       case when ud.optin and cd.ltm_nb_email>0 then true else false end optin_ctc,\n        case when ac.user_id=3065143 then TRUE\n        when\n        ucs.consent_status then true else false end as optin_email,\n       ud.optin_partner,\n       ud.optin_sms,\n       ud.is_admin,\n       ud.firstname,\n       ud.lastname,\n       ip.gender,\n       ud.registration_date,\n       ud.birth_date,\n       ud.age,\n       ip.billing_phone,\n       functions.standardize_phone(billing_phone, ac.dw_country_code) AS billing_phone_standardized,\n       case when billing_country='FR' then functions.get_region_from_zipcode(billing_zipcode, billing_country)\n        else null end as billing_region,\n       ip.billing_country,\n       ip.billing_zipcode,\n       ip.billing_city,\n       ip.billing_adress,\n       roa.range_of_age,\n       tt.last_login,\n       tt.ltm_has_seen_box_page,\n       tt.ltm_has_seen_product_fullsize_page,\n       tt.ltm_has_seen_search_page,\n       tt.ltm_has_seen_checkout_page,\n       cd.open_email,\n       cd.click,\n       cd.date_last_open_email,\n       cd.date_last_click_email,\n       cd.ltm_client_email_rate,\n       cd.ltm_open_email_rate,\n       cd.ltm_click_email,\n       cd.ltm_open_email,\n       cd.ltm_nb_email,\n       bpt.skin_complexion,\n       bpt.skin_type,\n       bpt.skin_redness,\n       bpt.skin_sensitiveness,\n       bpt.skin_aging,\n       bpt.skin_acne,\n       bpt.skin_dilated_pores,\n       bpt.skin_dehydration,\n       bpt.skin_eye_bags,\n       bpt.skin_dullness,\n       bpt.skin_no_problem,\n       bpt.skin_spots,\n       bpt.skin_wrinkles,\n       bpt.body_stretch_marks,\n       bpt.body_cellulite,\n       bpt.body_lack_firmness,\n       bpt.body_dry_skin,\n       bpt.body_water_retention,\n       bpt.body_no_problem,\n       bpt.body_spots,\n       bpt.hair_color,\n       bpt.hair_dye,\n       bpt.hair_thickness,\n       bpt.hair_type,\n       bpt.hair_scalp,\n       bpt.hair_style,\n       bpt.hair_damaged,\n       bpt.hair_split_end,\n       bpt.hair_greasy,\n       bpt.hair_dried,\n       bpt.hair_dandruff,\n       bpt.hair_no_problem,\n       bpt.hair_falls,\n       bpt.want_hair_straight,\n       bpt.want_hair_frizz_free,\n       bpt.want_hair_volume,\n       bpt.want_hair_shine,\n       bpt.want_hair_soft,\n       bpt.want_hair_less_thinning,\n       bpt.want_hair_curly,\n       bpt.want_hair_grow,\n       bpt.use_hair_dryer,\n       bpt.use_hair_straightener,\n       bpt.use_hair_no_device,\n       bpt.beauty_routine,\n       bpt.fragrance_sweet,\n       bpt.fragrance_floral,\n       bpt.fragrance_spicy,\n       bpt.fragrance_fruity,\n       bpt.fragrance_woody,\n       bpt.shop_perfumery,\n       bpt.shop_brand_store,\n       bpt.shop_hairdressing,\n       bpt.shop_pharmacy,\n       bpt.shop_hypermarket,\n       bpt.shop_bio_store,\n       bpt.shop_internet,\n       bpt.beauty_budget,\n       bpt.skin_tone,\n       bpt.eyebrows,\n       bpt.face_care,\n       bpt.body_care,\n       bpt.bath_products,\n       bpt.makeup_general,\n       bpt.makeup_eyes,\n       bpt.makeup_lips,\n       bpt.makeup_eyebrows,\n       bpt.makeup_complexion,\n       bpt.makeup_nails,\n       bpt.hair_shampoo,\n       bpt.hair_conditioner,\n       bpt.hair_mask,\n       bpt.hair_styling,\n       bpt.accessories,\n       bpt.food_supplements,\n       bpt.green_natural_products,\n       bpt.slimming_products,\n       bpt.perfumes,\n      bpt.self_taining, \n          bpt.solid_cosmetics,\n          bpt.hair_products, \n          bpt.discovery_glitter,\n          bpt.discovery_liners_mascaras,\n          bpt.discovery_colored_lipstick,\n          bpt.discovery_colored_nail_varnish,\n          bpt.discovery_colored_nude_makeup,\n          bpt.discovery_makeup,\n       sst.box_sub_status,\n       sstb.box_sub_status_before,\n       ibt.initial_sub_type,\n       ibt.initial_is_committed,\n       ibt.initial_box_year,\n       ibt.initial_box_month,\n       ibt.initial_box_date,\n       ibt.initial_coupon_code,\n       ibt.initial_coupon_code_id,\n       ibt.initial_coupon_type,\n       cbt.current_coupon_code,\n       cbt.current_coupon_code_id,\n       cbt.current_sub_type,\n       cbt.current_is_initial,\n       cbt.current_is_committed,\n       cbt.current_box_paid,\n       cbt.current_box_forthcoming,\n       cbt.next_box_paid,\n       cbt.next_box_forthcoming,\n       cbt.next_box_active,\n       cbt.next_box_churn,\n       cbt.paid_prev_box,\n       cbt.paid_prev_prev_box,\n       lbt.last_box_paid_year,\n       lbt.last_box_paid_month,\n       lbt.last_box_paid_date,\n       lba.last_box_acquis_year,\n       lba.last_box_acquis_month,\n       lba.last_box_acquis_date,\n       bst.array_boxes,\n       bst.nb_box_paid,\n       bst.last_consecutive_box_paid,\n       bst.ltm_nb_box_paid,\n       bst.ltm_last_consecutive_box_paid,\n       bst.box_net_revenue,\n       bst.box_average_discount,\n       bst.box_gross_profit,\n       bst.is_ever_gifted,\n       bst.is_ever_self,\n       bst.is_raffed,\n       rt.is_raffer,\n       ct.chose_ever,\n       ct.choose_participation_rate,\n       ct.ltm_choose_participation_rate,\n       bsa.has_answered_box_survey,\n       bsa.ltm_has_answered_box_survey,\n       bsa.rate_answering_box_survey,\n       bsa.ltm_rate_answering_box_survey,\n       st.is_shopper,\n       st.is_shopper_fullsize,\n       st.is_shopper_exclusives,\n       st.is_shopper_lte,\n       st.is_shopper_splendist,\n       st.is_shopper_calendar,\n       st.first_shop_order_date,\n       st.first_fullsize_order_date,\n       st.first_exclusive_order_date,\n       first_splendist_order_date,\n       first_calendar_order_date,\n       st.last_shop_order_date,\n       st.last_fullsize_order_date,\n       st.last_exclusive_order_date,\n       fot.first_order,\n       fot.first_order_type,\n       fot.first_order_date,\n       fos.source AS first_order_source,\n       fos.campaign AS first_order_campaign,\n       fos.support AS first_order_support,\n       fos.device AS first_order_device,\n       nb_shop_orders,\n       cpb.balance,\n       cpb.points_soon_to_expire,\n       case when nb_shop_orders = 1 then '1'\n       when nb_shop_orders between 2 and 5 then '2-5'\n       when nb_shop_orders between 6 and 10 then '6-10'\n       when nb_shop_orders >10 then '10+' end as group_shop_orders,\n       ifnull(gp_box.gp_box_year1,0) AS ltv_box_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) AS ltv_box_tmp_year1,\n       ifnull(gp_box.gp_box_year2,0) AS ltv_box_year2,\n       ifnull(gp_box.gp_box_year3,0) AS ltv_box_year3,\n       ifnull(gp_box.gp_box_year4,0) AS ltv_box_year4,\n       ifnull(gp_box.gp_box_ever,0) AS ltv_Box_ever,\n       ifnull(gp_shop.gp_shop_ever,0) AS ltv_shop_ever,\n       ifnull(gp_shop.gp_shop_year1,0) AS ltv_shop_year1, -- ltv fin de la premi\u00e8re ann\u00e9e compl\u00e9t\u00e9e\n       ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_shop_tmp_year1, -- ltv sur l'ann\u00e9e en cours \n       ifnull(gp_shop.gp_shop_year2,0) AS ltv_shop_year2,\n       ifnull(gp_shop.gp_shop_year3,0) AS ltv_shop_year3,\n       ifnull(gp_shop.gp_shop_year4,0) AS ltv_shop_year4,\n       ifnull(gp_box.gp_box_ever,0) + ifnull(gp_shop.gp_shop_ever,0) AS ltv_ever,\n       ifnull(gp_box.gp_box_year1,0) + ifnull(gp_shop.gp_shop_year1,0) AS ltv_year1,\n       ifnull(gp_box.gp_box_tmp_year1,0) + ifnull(gp_shop.gp_shop_tmp_year1,0) AS ltv_tmp_year1,\n        ifnull(gp_box.gp_box_year2,0) + ifnull(gp_shop.gp_shop_year2,0) AS ltv_year2,\n       ifnull(gp_box.gp_box_year3,0) + ifnull(gp_shop.gp_shop_year3,0) AS ltv_year3,\n       ifnull(gp_box.gp_box_year4,0) + ifnull(gp_shop.gp_shop_year4,0) AS ltv_year4,\n       ltv.predicted_ltv AS predicted_ltv_year1\nFROM all_customers ac\nLEFT JOIN user_data ud ON ac.dw_country_code = ud.dw_country_code AND ac.user_id = ud.user_id\nLEFT JOIN range_of_age_table roa ON ac.dw_country_code = roa.dw_country_code AND ac.user_id = roa.user_id\nLEFT JOIN traffic_table tt ON ac.dw_country_code = tt.dw_country_code AND ac.user_id = tt.user_id\nLEFT JOIN `teamdata-291012`.`user`.`crm_data`  cd ON case when ac.dw_country_code = 'FR' then 'FR' else 'EU' end  = cd.dw_country_code AND ac.email = cd.email\nLEFT JOIN `teamdata-291012`.`user`.`customers_beauty_profile`  bpt ON ac.dw_country_code = bpt.dw_country_code AND ac.user_id = bpt.user_id\nLEFT JOIN sub_status_table sst ON ac.dw_country_code = sst.dw_country_code AND ac.email = sst.email\nLEFT JOIN sub_status_table_before sstb ON ac.dw_country_code = sstb.dw_country_code AND ac.email = sstb.email\nLEFT JOIN initial_box_table ibt ON ac.dw_country_code = ibt.dw_country_code AND ac.user_id = ibt.user_id\nLEFT JOIN current_box_table cbt ON ac.dw_country_code = cbt.dw_country_code AND ac.user_id = cbt.user_id\nLEFT JOIN last_box_table lbt ON ac.dw_country_code = lbt.dw_country_code AND ac.user_id = lbt.user_id\nLEFT JOIN last_box_acquis lba ON ac.dw_country_code = lba.dw_country_code AND ac.user_id = lba.user_id\nLEFT JOIN box_stats_table bst ON ac.dw_country_code = bst.dw_country_code AND ac.user_id = bst.user_id\nLEFT JOIN raffer_table rt ON ac.dw_country_code = rt.dw_country_code AND ac.user_id = rt.user_id\nleft join `teamdata-291012`.`user`.`customers_info_perso`  ip on ip.user_id= ac.user_id and ip.dw_country_code=ac.dw_country_code\nLEFT JOIN choose_table ct ON ac.dw_country_code = ct.dw_country_code AND ac.user_id = ct.user_id\nLEFT JOIN box_survey_answers bsa ON ac.dw_country_code = bsa.dw_country_code AND ac.user_id = bsa.user_id\nLEFT JOIN shop_table st ON ac.dw_country_code = st.dw_country_code AND ac.user_id = st.user_id\nLEFT JOIN first_order_type fot ON fot.dw_country_code = ac.dw_country_code AND fot.user_id = ac.user_id\nLEFT JOIN first_order_source fos ON fos.dw_country_code = ac.dw_country_code AND fos.user_id = ac.user_id\nLEFT JOIN gp_box ON gp_box.dw_country_code = ac.dw_country_code AND gp_box.user_id = ac.user_id\nLEFT JOIN gp_shop ON gp_shop.dw_country_code = ac.dw_country_code AND gp_shop.user_id = ac.user_id\nLEFT JOIN `teamdata-291012.predictive_ltv.ltv` ltv ON ltv.user_id = ac.user_id AND ac.dw_country_code = 'FR'\nLEFT JOIN user.customers_points_balance cpb on cpb.user_id=ac.user_id and cpb.dw_country_code=ac.dw_country_code\nLEFT JOIN inter.user_consent ucs on lower(ucs.user_email)=ac.email and ucs.dw_country_code=ac.dw_country_code and consent_topic_id=3\n-- where ac.user_id=3065143", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.catalog__stock": {"database": "normalised-417010", "schema": "history_table", "name": "catalog__stock", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/history_table/normalised/catalog__stock.sql", "original_file_path": "models/schedule/custom/history_table/normalised/catalog__stock.sql", "unique_id": "model.warehouse.catalog__stock", "fqn": ["warehouse", "schedule", "custom", "history_table", "normalised", "catalog__stock"], "alias": "catalog__stock", "checksum": {"name": "sha256", "checksum": "2f59f1607511292c228de82c2da1f667f7eadd0ebefb8153e103c2da04baec4f"}, "config": {"enabled": true, "alias": null, "schema": "history_table", "database": "normalised-417010", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "archive_date", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "partition_by": {"field": "archive_date", "data_type": "date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "incremental", "database": "normalised-417010", "unique_key": "archive_date", "partition_by": {"field": "archive_date", "data_type": "date"}, "schema": "history_table"}, "created_at": 1759995464.712901, "relation_name": "`normalised-417010`.`history_table`.`catalog__stock`", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key='archive_date',\n    partition_by={\n      \"field\": \"archive_date\", \n      \"data_type\": \"date\"\n    },\n    schema='history_table'\n) }}\n\n\n\nSELECT current_date AS archive_date,  \ns.sku, s.pc_cat1, s.pc_cat2, s.codification, s.brand_full_name, s.name, s.stock, cast(s.sale_price as float64) as sale_price, s.euro_purchase_price, s.bank_reservations, s.available_stock, s.valo_stock, s.valo_available_stock,\nSAFE_CAST(s.dluo_min AS DATE) f0_, s.stock_POT1, s.stock_POT2, s.product_class, s.stock_coverage, SAFE_CAST(s.dluo_min AS DATE) AS dluo_min, NULL AS row_num\n FROM `normalised-417010.catalog.stock` s", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/history_table/normalised/catalog__stock.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT current_date AS archive_date,  \ns.sku, s.pc_cat1, s.pc_cat2, s.codification, s.brand_full_name, s.name, s.stock, cast(s.sale_price as float64) as sale_price, s.euro_purchase_price, s.bank_reservations, s.available_stock, s.valo_stock, s.valo_available_stock,\nSAFE_CAST(s.dluo_min AS DATE) f0_, s.stock_POT1, s.stock_POT2, s.product_class, s.stock_coverage, SAFE_CAST(s.dluo_min AS DATE) AS dluo_min, NULL AS row_num\n FROM `normalised-417010.catalog.stock` s", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.catalog__bank": {"database": "teamdata-291012", "schema": "history_table", "name": "catalog__bank", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/history_table/teamdata/catalog__bank.sql", "original_file_path": "models/schedule/custom/history_table/teamdata/catalog__bank.sql", "unique_id": "model.warehouse.catalog__bank", "fqn": ["warehouse", "schedule", "custom", "history_table", "teamdata", "catalog__bank"], "alias": "catalog__bank", "checksum": {"name": "sha256", "checksum": "ef6302f06cf6e3560f4bcb43328721d21cbb2a372e5f20f677c25c9c2cebdb03"}, "config": {"enabled": true, "alias": null, "schema": "history_table", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "archive_date", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "partition_by": {"field": "archive_date", "data_type": "date"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "incremental", "unique_key": "archive_date", "partition_by": {"field": "archive_date", "data_type": "date"}, "schema": "history_table"}, "created_at": 1759995464.71431, "relation_name": "`teamdata-291012`.`history_table`.`catalog__bank`", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key='archive_date',\n    partition_by={\n      \"field\": \"archive_date\", \n      \"data_type\": \"date\"\n    },\n    schema='history_table'\n) }}\n\nSELECT\n  CURRENT_DATE('Europe/Paris') AS archive_date,\n  p.* EXCEPT(purchase_price_depreciated, date_depreciation, first_product_type, brand_flag, picture_link)\n  REPLACE(\n    SAFE_CAST(perceived_price AS FLOAT64) AS perceived_price\n  )\nFROM `teamdata-291012.catalog.bank` AS p\n\n{% if is_incremental() %}\n  WHERE NOT EXISTS (\n    SELECT 1 \n    FROM {{ this }} h \n    WHERE h.archive_date = CURRENT_DATE('Europe/Paris')\n  )\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/history_table/teamdata/catalog__bank.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  CURRENT_DATE('Europe/Paris') AS archive_date,\n  p.* EXCEPT(purchase_price_depreciated, date_depreciation, first_product_type, brand_flag, picture_link)\n  REPLACE(\n    SAFE_CAST(perceived_price AS FLOAT64) AS perceived_price\n  )\nFROM `teamdata-291012.catalog.bank` AS p\n\n\n  WHERE NOT EXISTS (\n    SELECT 1 \n    FROM `teamdata-291012`.`history_table`.`catalog__bank` h \n    WHERE h.archive_date = CURRENT_DATE('Europe/Paris')\n  )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.archives_survey_answers": {"database": "teamdata-291012", "schema": "survey", "name": "archives_survey_answers", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/archives/archives_survey_answers.sql", "original_file_path": "models/schedule/custom/archives/archives_survey_answers.sql", "unique_id": "model.warehouse.archives_survey_answers", "fqn": ["warehouse", "schedule", "custom", "archives", "archives_survey_answers"], "alias": "archives_survey_answers", "checksum": {"name": "sha256", "checksum": "79d8a8b99aa9760e817653bc3ab1f71073d07952fe43a632a355959cff78b1eb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.717879, "relation_name": "`teamdata-291012`.`survey`.`archives_survey_answers`", "raw_code": "{{ config(\n    materialized='table'\n) }}\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM `teamdata-291012.Archives.survey_result_answers_archives_box_2022`\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM `teamdata-291012.Archives.survey_result_answers_archives_box_2017`\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM `teamdata-291012.Archives.wp_jb_survey_result_answers_archives_backup_2025`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/archives/archives_survey_answers.sql", "compiled": true, "compiled_code": "\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM `teamdata-291012.Archives.survey_result_answers_archives_box_2022`\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM `teamdata-291012.Archives.survey_result_answers_archives_box_2017`\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  date,\n  ranking,\n  answer_id,\n  result_id,\n  created_at,\n  updated_at,\n  question_id,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM `teamdata-291012.Archives.wp_jb_survey_result_answers_archives_backup_2025`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.archives_products_stock_log": {"database": "teamdata-291012", "schema": "inter", "name": "archives_products_stock_log", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/archives/archives_products_stock_log.sql", "original_file_path": "models/schedule/custom/archives/archives_products_stock_log.sql", "unique_id": "model.warehouse.archives_products_stock_log", "fqn": ["warehouse", "schedule", "custom", "archives", "archives_products_stock_log"], "alias": "archives_products_stock_log", "checksum": {"name": "sha256", "checksum": "a01ba46108ec500511401c5dae10d4980ff8644308d95c34a486cfe349a7b85e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.7192361, "relation_name": "`teamdata-291012`.`inter`.`archives_products_stock_log`", "raw_code": "{{ config(\n    materialized='table'\n) }}\n\n\n{{ config(\n    materialized='table'\n) }}\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2012\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2013\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2014\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2015\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2016\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2017\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2018\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2019\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2020\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2021\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2022\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2023", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/archives/archives_products_stock_log.sql", "compiled": true, "compiled_code": "\n\n\n\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2012\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2013\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2014\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2015\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2016\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2017\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2018\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2019\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2020\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2021\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2022\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  ID,\n  SKU,\n  date,\n  stock,\n  tampon,\n  created_at,\n  product_id,\n  updated_at,\n  stock_scamp,\n  stock_physique,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_products_stock_log_2023", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.warehouse.archives_payments": {"database": "teamdata-291012", "schema": "Archives", "name": "archives_payments", "resource_type": "model", "package_name": "warehouse", "path": "schedule/custom/archives/archives_payments.sql", "original_file_path": "models/schedule/custom/archives/archives_payments.sql", "unique_id": "model.warehouse.archives_payments", "fqn": ["warehouse", "schedule", "custom", "archives", "archives_payments"], "alias": "archives_payments", "checksum": {"name": "sha256", "checksum": "3afa5ae9e819d303cf0f6523f05e2d0a6d04b31bd0fed2a7fecea56ce5e405d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "materialized": "table"}, "created_at": 1759995464.7206998, "relation_name": "`teamdata-291012`.`Archives`.`archives_payments`", "raw_code": "{{ config(\n    materialized='table'\n) }}\n\n\n{{ config(\n    materialized='table'\n) }}\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2012\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2013\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2014\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2015\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2016\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2017\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2018\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2019\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2020\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2021\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2022\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2023", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/schedule/custom/archives/archives_payments.sql", "compiled": true, "compiled_code": "\n\n\n\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2012\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2013\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2014\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2015\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2016\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2017\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2018\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2019\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2020\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2021\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2022\n\nUNION ALL\n\nSELECT \n  'FR' as dw_country_code,\n  id,\n  user_id,\n  order_id,\n  sub_id,\n  payment_gateway_id,\n  transaction_id,\n  amount,\n  payment_profile_id,\n  auto,\n  status_id,\n  payment_method_id,\n  data,\n  date(date) AS date,\n  created_at,\n  updated_at,\n  CURRENT_TIMESTAMP() as _airbyte_extracted_at\nFROM teamdata-291012.Archives.wp_jb_payments_2023", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "snapshot.warehouse.history_segments": {"database": "normalised-417010", "schema": "user", "name": "history_segments", "resource_type": "snapshot", "package_name": "warehouse", "path": "history_segments.sql", "original_file_path": "snapshots/history_segments.sql", "unique_id": "snapshot.warehouse.history_segments", "fqn": ["warehouse", "history_segments", "history_segments"], "alias": "history_segments", "checksum": {"name": "sha256", "checksum": "67a2107af26b410bbbcbaaa76750e0d71b60bcaa3e085c9be1deccede419ef65"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "user_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": "user", "target_database": "normalised-417010", "updated_at": null, "check_cols": ["status"], "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"target_database": "normalised-417010", "target_schema": "user", "strategy": "check", "check_cols": ["status"], "invalidate_hard_deletes": true, "unique_key": "user_id"}, "created_at": 1759995464.726003, "relation_name": "`normalised-417010`.`user`.`history_segments`", "raw_code": "\n\n    {{\n        config(\n          target_database='normalised-417010',  \n          target_schema='user',\n           strategy='check',\n          check_cols=['status'], \n          invalidate_hard_deletes=True,\n          unique_key='user_id',\n        )\n    }}\n\n    SELECT \n    user_id,\n    status,\n    CURRENT_TIMESTAMP() AS snapshot_date\n    FROM {{ref('today_segments')}}\n\n", "language": "sql", "refs": [{"name": "today_segments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.today_segments"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n    \n\n    SELECT \n    user_id,\n    status,\n    CURRENT_TIMESTAMP() AS snapshot_date\n    FROM `normalised-417010`.`user`.`today_segments`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.warehouse.unique_id_country_test": {"database": "teamdata-291012", "schema": "dbt_test_failures", "name": "unique_id_country_test", "resource_type": "test", "package_name": "warehouse", "path": "unique_id_country_test.sql", "original_file_path": "tests/unique_id_country_test.sql", "unique_id": "test.warehouse.unique_id_country_test", "fqn": ["warehouse", "unique_id_country_test"], "alias": "unique_id_country_test", "checksum": {"name": "sha256", "checksum": "a02f1fd89d64ce9390d53e0eb03bc995f21325fd35b0789bf53c48c56de1ce5c"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759995464.7336051, "relation_name": null, "raw_code": "{% set models_to_test = [\n'adyen_notifications', 'allocation_history', 'b2c_exported_orders', 'b2c_order_notifications', 'boxes', 'brands', 'brands_correspondances', 'choose_choices', 'choose_forms', 'choose_users', 'christmas_offer', 'company', 'consent', 'coupons', 'expected_inbound_details', 'expected_inbounds', 'ga_transactions', 'gift_cards', 'gift_codes_generated', 'inventory_items', 'invoice_credit_notes', 'invoice_details', 'invoices', 'lte_kits', 'mini_byob_reexp', 'mini_lte_reexp', 'mini_reexp', 'open_comment_posts', 'optin', 'order_detail_sub', 'order_detail_sub_options', 'order_details', 'order_status', 'orders', 'partial_box_paid', 'partial_cancelations', 'payment_profiles', 'payments', 'posts', 'prepacked_products', 'product_codification', 'product_warehouse_location', 'products', 'products_bundle_component', 'products_stock_log', 'purchase_order_items', 'purchase_orders', 'raf', 'raf_offer_details', 'raf_offers', 'raf_order_link', 'raf_reward_moment', 'raf_reward_type', 'raf_sub_link', 'range_of_age', 'reception_details', 'reward_points_history', 'reward_points_history_uses', 'shipping_modes', 'shipup_tracking', 'store_mouvements', 'store_products', 'sub_history', 'sub_offers', 'sub_order_link', 'sub_payments_status', 'survey_answer_meanings', 'survey_answers', 'survey_question_categories', 'survey_questions', 'survey_result_answers', 'survey_results', 'survey_surveys', 'tags', 'user_campaign', 'user_consent', 'user_consent_history', 'users', 'warehouse'\n] %}\n\n{% for model_name in models_to_test %}\n    {% if not loop.first %}\n        union all\n    {% endif %}\n    \n    select\n        '{{ model_name }}' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from {{ ref(model_name) }}\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n{% endfor %}", "language": "sql", "refs": [{"name": "adyen_notifications", "package": null, "version": null}, {"name": "allocation_history", "package": null, "version": null}, {"name": "b2c_exported_orders", "package": null, "version": null}, {"name": "b2c_order_notifications", "package": null, "version": null}, {"name": "boxes", "package": null, "version": null}, {"name": "brands", "package": null, "version": null}, {"name": "brands_correspondances", "package": null, "version": null}, {"name": "choose_choices", "package": null, "version": null}, {"name": "choose_forms", "package": null, "version": null}, {"name": "choose_users", "package": null, "version": null}, {"name": "christmas_offer", "package": null, "version": null}, {"name": "company", "package": null, "version": null}, {"name": "consent", "package": null, "version": null}, {"name": "coupons", "package": null, "version": null}, {"name": "expected_inbound_details", "package": null, "version": null}, {"name": "expected_inbounds", "package": null, "version": null}, {"name": "ga_transactions", "package": null, "version": null}, {"name": "gift_cards", "package": null, "version": null}, {"name": "gift_codes_generated", "package": null, "version": null}, {"name": "inventory_items", "package": null, "version": null}, {"name": "invoice_credit_notes", "package": null, "version": null}, {"name": "invoice_details", "package": null, "version": null}, {"name": "invoices", "package": null, "version": null}, {"name": "lte_kits", "package": null, "version": null}, {"name": "mini_byob_reexp", "package": null, "version": null}, {"name": "mini_lte_reexp", "package": null, "version": null}, {"name": "mini_reexp", "package": null, "version": null}, {"name": "open_comment_posts", "package": null, "version": null}, {"name": "optin", "package": null, "version": null}, {"name": "order_detail_sub", "package": null, "version": null}, {"name": "order_detail_sub_options", "package": null, "version": null}, {"name": "order_details", "package": null, "version": null}, {"name": "order_status", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "partial_box_paid", "package": null, "version": null}, {"name": "partial_cancelations", "package": null, "version": null}, {"name": "payment_profiles", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}, {"name": "posts", "package": null, "version": null}, {"name": "prepacked_products", "package": null, "version": null}, {"name": "product_codification", "package": null, "version": null}, {"name": "product_warehouse_location", "package": null, "version": null}, {"name": "products", "package": null, "version": null}, {"name": "products_bundle_component", "package": null, "version": null}, {"name": "products_stock_log", "package": null, "version": null}, {"name": "purchase_order_items", "package": null, "version": null}, {"name": "purchase_orders", "package": null, "version": null}, {"name": "raf", "package": null, "version": null}, {"name": "raf_offer_details", "package": null, "version": null}, {"name": "raf_offers", "package": null, "version": null}, {"name": "raf_order_link", "package": null, "version": null}, {"name": "raf_reward_moment", "package": null, "version": null}, {"name": "raf_reward_type", "package": null, "version": null}, {"name": "raf_sub_link", "package": null, "version": null}, {"name": "range_of_age", "package": null, "version": null}, {"name": "reception_details", "package": null, "version": null}, {"name": "reward_points_history", "package": null, "version": null}, {"name": "reward_points_history_uses", "package": null, "version": null}, {"name": "shipping_modes", "package": null, "version": null}, {"name": "shipup_tracking", "package": null, "version": null}, {"name": "store_mouvements", "package": null, "version": null}, {"name": "store_products", "package": null, "version": null}, {"name": "sub_history", "package": null, "version": null}, {"name": "sub_offers", "package": null, "version": null}, {"name": "sub_order_link", "package": null, "version": null}, {"name": "sub_payments_status", "package": null, "version": null}, {"name": "survey_answer_meanings", "package": null, "version": null}, {"name": "survey_answers", "package": null, "version": null}, {"name": "survey_question_categories", "package": null, "version": null}, {"name": "survey_questions", "package": null, "version": null}, {"name": "survey_result_answers", "package": null, "version": null}, {"name": "survey_results", "package": null, "version": null}, {"name": "survey_surveys", "package": null, "version": null}, {"name": "tags", "package": null, "version": null}, {"name": "user_campaign", "package": null, "version": null}, {"name": "user_consent", "package": null, "version": null}, {"name": "user_consent_history", "package": null, "version": null}, {"name": "users", "package": null, "version": null}, {"name": "warehouse", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.warehouse.adyen_notifications", "model.warehouse.allocation_history", "model.warehouse.b2c_exported_orders", "model.warehouse.b2c_order_notifications", "model.warehouse.boxes", "model.warehouse.brands", "model.warehouse.brands_correspondances", "model.warehouse.choose_choices", "model.warehouse.choose_forms", "model.warehouse.choose_users", "model.warehouse.christmas_offer", "model.warehouse.company", "model.warehouse.consent", "model.warehouse.coupons", "model.warehouse.expected_inbound_details", "model.warehouse.expected_inbounds", "model.warehouse.ga_transactions", "model.warehouse.gift_cards", "model.warehouse.gift_codes_generated", "model.warehouse.inventory_items", "model.warehouse.invoice_credit_notes", "model.warehouse.invoice_details", "model.warehouse.invoices", "model.warehouse.lte_kits", "model.warehouse.mini_byob_reexp", "model.warehouse.mini_lte_reexp", "model.warehouse.mini_reexp", "model.warehouse.open_comment_posts", "model.warehouse.optin", "model.warehouse.order_detail_sub", "model.warehouse.order_detail_sub_options", "model.warehouse.order_details", "model.warehouse.order_status", "model.warehouse.orders", "model.warehouse.partial_box_paid", "model.warehouse.partial_cancelations", "model.warehouse.payment_profiles", "model.warehouse.payments", "model.warehouse.posts", "model.warehouse.prepacked_products", "model.warehouse.product_codification", "model.warehouse.product_warehouse_location", "model.warehouse.products", "model.warehouse.products_bundle_component", "model.warehouse.products_stock_log", "model.warehouse.purchase_order_items", "model.warehouse.purchase_orders", "model.warehouse.raf", "model.warehouse.raf_offer_details", "model.warehouse.raf_offers", "model.warehouse.raf_order_link", "model.warehouse.raf_reward_moment", "model.warehouse.raf_reward_type", "model.warehouse.raf_sub_link", "model.warehouse.range_of_age", "model.warehouse.reception_details", "model.warehouse.reward_points_history", "model.warehouse.reward_points_history_uses", "model.warehouse.shipping_modes", "model.warehouse.shipup_tracking", "model.warehouse.store_mouvements", "model.warehouse.store_products", "model.warehouse.sub_history", "model.warehouse.sub_offers", "model.warehouse.sub_order_link", "model.warehouse.sub_payments_status", "model.warehouse.survey_answer_meanings", "model.warehouse.survey_answers", "model.warehouse.survey_question_categories", "model.warehouse.survey_questions", "model.warehouse.survey_result_answers", "model.warehouse.survey_results", "model.warehouse.survey_surveys", "model.warehouse.tags", "model.warehouse.user_campaign", "model.warehouse.user_consent", "model.warehouse.user_consent_history", "model.warehouse.users", "model.warehouse.warehouse"]}, "compiled_path": "target/compiled/warehouse/tests/unique_id_country_test.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n    select\n        'adyen_notifications' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`adyen_notifications`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'allocation_history' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`allocation_history`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'b2c_exported_orders' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`b2c_exported_orders`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'b2c_order_notifications' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`b2c_order_notifications`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'boxes' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`boxes`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'brands' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`brands`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'brands_correspondances' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`brands_correspondances`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'choose_choices' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`choose_choices`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'choose_forms' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`choose_forms`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'choose_users' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`choose_users`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'christmas_offer' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`christmas_offer`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'company' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`company`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'consent' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`consent`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'coupons' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`coupons`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'expected_inbound_details' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`expected_inbound_details`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'expected_inbounds' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`expected_inbounds`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'ga_transactions' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`ga_transactions`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'gift_cards' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`gift_cards`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'gift_codes_generated' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`gift_codes_generated`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'inventory_items' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`inventory_items`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'invoice_credit_notes' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`invoice_credit_notes`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'invoice_details' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`invoice_details`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'invoices' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`invoices`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'lte_kits' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`lte_kits`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'mini_byob_reexp' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`mini_byob_reexp`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'mini_lte_reexp' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`mini_lte_reexp`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'mini_reexp' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`mini_reexp`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'open_comment_posts' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`open_comment_posts`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'optin' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`optin`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'order_detail_sub' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`order_detail_sub`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'order_detail_sub_options' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`order_detail_sub_options`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'order_details' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`order_details`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'order_status' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`order_status`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'orders' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`orders`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'partial_box_paid' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`partial_box_paid`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'partial_cancelations' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`partial_cancelations`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'payment_profiles' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`payment_profiles`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'payments' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`payments`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'posts' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`posts`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'prepacked_products' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`prepacked_products`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'product_codification' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`product_codification`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'product_warehouse_location' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`product_warehouse_location`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'products' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`products`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'products_bundle_component' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`products_bundle_component`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'products_stock_log' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`products_stock_log`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'purchase_order_items' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`purchase_order_items`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'purchase_orders' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`purchase_orders`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'raf' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`raf`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'raf_offer_details' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`raf_offer_details`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'raf_offers' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`raf_offers`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'raf_order_link' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`raf_order_link`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'raf_reward_moment' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`raf_reward_moment`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'raf_reward_type' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`raf_reward_type`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'raf_sub_link' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`raf_sub_link`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'range_of_age' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`range_of_age`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'reception_details' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`reception_details`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'reward_points_history' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`reward_points_history`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'reward_points_history_uses' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`reward_points_history_uses`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'shipping_modes' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`shipping_modes`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'shipup_tracking' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`shipup_tracking`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'store_mouvements' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`store_mouvements`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'store_products' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`store_products`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'sub_history' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`sub_history`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'sub_offers' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`sub_offers`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'sub_order_link' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`sub_order_link`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'sub_payments_status' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`sub_payments_status`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'survey_answer_meanings' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`survey_answer_meanings`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'survey_answers' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`survey_answers`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'survey_question_categories' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`survey_question_categories`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'survey_questions' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`survey_questions`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'survey_result_answers' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`survey_result_answers`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'survey_results' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`survey_results`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'survey_surveys' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`survey_surveys`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'tags' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`tags`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'user_campaign' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`user_campaign`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'user_consent' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`user_consent`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'user_consent_history' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`user_consent_history`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'users' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`users`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n\n    \n        union all\n    \n    \n    select\n        'warehouse' as model_name,\n        id,\n        dw_country_code,\n        count(*) as records_count\n    from `teamdata-291012`.`inter`.`warehouse`\n    where id is not null\n      and dw_country_code is not null\n    group by id, dw_country_code\n    having count(*) > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.warehouse.dbt_utils_unique_combination_of_columns_box_sales_sub_id__dw_country_code.6ebb177269": {"database": "teamdata-291012", "schema": "dbt_test_failures", "name": "dbt_utils_unique_combination_of_columns_box_sales_sub_id__dw_country_code", "resource_type": "test", "package_name": "warehouse", "path": "dbt_utils_unique_combination_o_ef3baec0450d092335f2ac8edda0c195.sql", "original_file_path": "models/dwh/sales/schema.yml", "unique_id": "test.warehouse.dbt_utils_unique_combination_of_columns_box_sales_sub_id__dw_country_code.6ebb177269", "fqn": ["warehouse", "dwh", "sales", "dbt_utils_unique_combination_of_columns_box_sales_sub_id__dw_country_code"], "alias": "dbt_utils_unique_combination_o_ef3baec0450d092335f2ac8edda0c195", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ef3baec0450d092335f2ac8edda0c195", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "name": "Doublons box_sales"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "store_failures": true, "name": "Doublons box_sales", "alias": "dbt_utils_unique_combination_o_ef3baec0450d092335f2ac8edda0c195"}, "created_at": 1759995464.8191512, "relation_name": "`teamdata-291012`.`dbt_test_failures`.`dbt_utils_unique_combination_o_ef3baec0450d092335f2ac8edda0c195`", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",store_failures=True,name=\"Doublons box_sales\",alias=\"dbt_utils_unique_combination_o_ef3baec0450d092335f2ac8edda0c195\") }}", "language": "sql", "refs": [{"name": "box_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.warehouse.box_sales"]}, "compiled_path": "target/compiled/warehouse/models/dwh/sales/schema.yml/dbt_utils_unique_combination_o_ef3baec0450d092335f2ac8edda0c195.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sub_id, dw_country_code\n    from `teamdata-291012`.`sales`.`box_sales`\n    group by sub_id, dw_country_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.box_sales", "attached_node": "model.warehouse.box_sales", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sub_id", "dw_country_code"], "model": "{{ get_where_subquery(ref('box_sales')) }}"}, "namespace": "dbt_utils"}}, "test.warehouse.dbt_utils_unique_combination_of_columns_partial_box_paid_sub_id__dw_country_code.6b11f8bcd3": {"database": "teamdata-291012", "schema": "dbt_test_failures", "name": "dbt_utils_unique_combination_of_columns_partial_box_paid_sub_id__dw_country_code", "resource_type": "test", "package_name": "warehouse", "path": "dbt_utils_unique_combination_o_105b2c0091561a15f9a5e6a977e7b400.sql", "original_file_path": "models/dwh/inter/table/schema.yml", "unique_id": "test.warehouse.dbt_utils_unique_combination_of_columns_partial_box_paid_sub_id__dw_country_code.6b11f8bcd3", "fqn": ["warehouse", "dwh", "inter", "table", "dbt_utils_unique_combination_of_columns_partial_box_paid_sub_id__dw_country_code"], "alias": "dbt_utils_unique_combination_o_105b2c0091561a15f9a5e6a977e7b400", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_105b2c0091561a15f9a5e6a977e7b400", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "name": "Doublons partial_box_paid"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "store_failures": true, "name": "Doublons partial_box_paid", "alias": "dbt_utils_unique_combination_o_105b2c0091561a15f9a5e6a977e7b400"}, "created_at": 1759995464.82209, "relation_name": "`teamdata-291012`.`dbt_test_failures`.`dbt_utils_unique_combination_o_105b2c0091561a15f9a5e6a977e7b400`", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",store_failures=True,name=\"Doublons partial_box_paid\",alias=\"dbt_utils_unique_combination_o_105b2c0091561a15f9a5e6a977e7b400\") }}", "language": "sql", "refs": [{"name": "partial_box_paid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.warehouse.partial_box_paid"]}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/table/schema.yml/dbt_utils_unique_combination_o_105b2c0091561a15f9a5e6a977e7b400.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sub_id, dw_country_code\n    from `teamdata-291012`.`inter`.`partial_box_paid`\n    group by sub_id, dw_country_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.partial_box_paid", "attached_node": "model.warehouse.partial_box_paid", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sub_id", "dw_country_code"], "model": "{{ get_where_subquery(ref('partial_box_paid')) }}"}, "namespace": "dbt_utils"}}, "model.warehouse.adyen_notifications": {"database": "teamdata-291012", "schema": "inter", "name": "adyen_notifications", "resource_type": "model", "package_name": "warehouse", "path": "dwh/inter/merge/adyen_notifications.sql", "original_file_path": "models/dwh/inter/merge/adyen_notifications.sql", "unique_id": "model.warehouse.adyen_notifications", "fqn": ["warehouse", "dwh", "inter", "merge", "adyen_notifications"], "alias": "adyen_notifications", "checksum": {"name": "sha256", "checksum": "8b0826068f23c94ee907052fc6c0c1a317224dde5cbd633df2dfaa42dcf2ef5b"}, "config": {"enabled": true, "alias": null, "schema": "inter", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_adyen_notifications', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dw_country_code", "id"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "store_failures": true, "query_tag": "no_cache", "region": "europe-west1", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "cluster_by": ["dw_country_code", "id"], "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "query_tag": "no_cache", "materialized": "incremental", "region": "europe-west1", "schema": "inter", "accounting": null, "allocation": null, "blissim_analytics": null, "marketing": null, "ops": null, "payment": null, "pnl": null, "product": null, "snippets": null, "on_schema_change": "sync_all_columns", "unique_key": ["dw_country_code", "id"], "incremental_strategy": "merge", "partition_by": {"field": "_airbyte_extracted_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["dw_country_code", "id"], "post-hook": ["{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), 'wp_jb_adyen_notifications', 'TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)') }} {% endif %}"]}, "created_at": 1759995486.91697, "relation_name": "`teamdata-291012`.`inter`.`adyen_notifications`", "raw_code": "{# ==========================\n   PARAM\u00c8TRES \u00c0 CHANGER\n   ========================== #}\n{%- set source_table = \"wp_jb_adyen_notifications\" -%}   \n{%- set target_table = \"inter.adyen_notifications\" -%}   \n{%- set countries = var('survey_countries') -%}\n{%- set window_hours = 4 -%}\n{%- set window_start -%}\nTIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ window_hours }} HOUR)\n{%- endset -%}\n\n{{ config(\n  materialized='incremental',\n  incremental_strategy='merge',\n  unique_key=['dw_country_code','id'],\n  partition_by={\"field\": \"_airbyte_extracted_at\", \"data_type\": \"timestamp\", \"granularity\": \"day\"},\n  cluster_by=[\"dw_country_code\",\"id\"],\n  post_hook=[\n    \"{% if is_incremental() %} {{ delete_soft_deleted(var('survey_countries'), '\" ~ source_table ~ \"', '\" ~ window_start ~ \"') }} {% endif %}\"\n  ]\n) }}\n\n{# ---------- BUILD ---------- #}\n{%- if is_incremental() -%}\n  {# INCR\u00c9MENTAL : actifs + fen\u00eatre pour le pruning source #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= {{ window_start }}\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- else -%}\n  {# PREMIER RUN ou FULL REFRESH : pas de fen\u00eatre, on charge tous les actifs #}\n  {%- for country in countries %}\n  SELECT\n    '{{ country.code }}' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.{{ country.dataset }}.{{ source_table }}` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n  {{ \"UNION ALL\" if not loop.last }}\n  {%- endfor %}\n{%- endif -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/warehouse/models/dwh/inter/merge/adyen_notifications.sql", "compiled": true, "compiled_code": "\n\n\n  SELECT\n    'FR' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_fr.wp_jb_adyen_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'DE' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.prod_de.wp_jb_adyen_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'ES' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_es.wp_jb_adyen_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  UNION ALL\n  SELECT\n    'IT' AS dw_country_code,\n    CAST(b.id AS INT64) AS id,\n    b.* EXCEPT(id)\n  FROM `teamdata-291012.bdd_prod_it.wp_jb_adyen_notifications` AS b\n  WHERE NULLIF(b._ab_cdc_deleted_at, '') IS NULL\n    AND b._airbyte_extracted_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 4 HOUR)\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}}, "sources": {}, "macros": {"macro.warehouse.delete_soft_deleted": {"name": "delete_soft_deleted", "resource_type": "macro", "package_name": "warehouse", "path": "macros/delete_soft_deleted.sql", "original_file_path": "macros/delete_soft_deleted.sql", "unique_id": "macro.warehouse.delete_soft_deleted", "macro_sql": "{% macro delete_soft_deleted(countries, source_table, window_start) %}\n  DELETE FROM {{ this }}\n  WHERE STRUCT(dw_country_code, id) IN (\n    {% for c in countries -%}\n    SELECT AS STRUCT\n      '{{ c.code }}' AS dw_country_code, \n      CAST(d.id AS INT64) AS id\n    FROM `teamdata-291012.{{ c.dataset }}.{{ source_table }}` d\n    WHERE d._airbyte_extracted_at >= {{ window_start }}\n      AND SAFE.TIMESTAMP(NULLIF(d._ab_cdc_deleted_at,'')) IS NOT NULL\n    {{ 'UNION ALL' if not loop.last }}\n    {% endfor -%}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1533508, "supported_languages": null}, "macro.warehouse.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "warehouse", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.warehouse.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {%- set default_schema = target.schema -%}\n\n    {# Listes des tables sp\u00e9cifiques pour chaque sch\u00e9ma #}\n    {%- set sales_tmp_tables = ['box_mono','box_sales','box_refunds','box_gift','kpi_box','box_sales_by_user_by_type','box_acquisition_daily','shop_sales','box_acquisition_detail','shop_orders_margin','shop_refunds','obj_by_country','shop_sales_with_gross_profit','box_committed_not_paid','box_paused'] -%}\n    {%- set ops_tmp_tables = ['pom_seasonality_table','bq_inventory_to_update','logistics_costs','shipping_costs','box_shipments','shop_shipments','shipments_all'] -%}\n    {%- set snippets_tmp_tables = ['current_box'] -%}\n    {%- set allocation_tmp_tables = ['index_user_samples','box_choose'] -%}\n    {%- set payment_tmp_tables = ['adyen_notifications_authorization'] -%}\n    {%- set product_tmp_tables = ['catalog', 'algolia_product_categories', 'categories','kit_costs','all_kits','nice_names','codification_bundle_product','stock','stock_bs','stock_store','kit_details','reviews','product_classes','product_classes_3m'] -%}\n    {%- set marketing_tmp_tables = ['Export_predictive_ltv_per_campaign_agg','Export_predictive_ltv_per_campaign','Export_Yearly_Live','Export_GWS_LIVE','Export_Acquisition_Daily','Export_Discount_Live','live_expenses','Marketing_cac_live','Marketing_cac_expenses','Marketing_cac_budget_vs_expenses'] -%}\n    {%- set accounting_tmp_tables = ['reconciliation_live','shop_detailed','box_turnover','box_detailed'] -%}\n    {%- set blissim_analytics_tmp_tables = ['monthly_rank_brands'] -%}\n    {%- set sublissim_tmp_tables = ['kit'] -%}\n    {%- set inter_tmp_tables = ['order_detail_sub_merged','order_details_merged','survey_surveys','choose_users','products','users','tags','comments','products_stock_log','product_warehouse_location','kit_links','products_bundle_component','posts','adyen_notifications','products_stock_log','orders','order_details','order_detail_sub','sub_offers','coupons','sub_order_link','gift_cards','sub_history','sub_suspend_survey_result','sub_suspend_survey_result_answer','inventory_items','partial_cancelations'] -%}\n    {%- set inter_view_tmp_tables = ['archives_products_stock_log','christmas_offer','b2c_order_notifications','cc_orders_status','boxes','boxes_by_day', 'brands', 'brands_correspondances', 'business_objectives', 'byob_product_link', 'choose_choices', 'choose_forms', 'company', 'da_box_acquisition_detail', 'da_box_shipped_detail', 'da_eu_countries', 'da_monthly_sub_baseline', 'expected_inbound_details', 'expected_inbounds', 'invoice_credit_notes', 'invoices', 'invoice_details', 'lte_kits', 'mini_byob_reexp', 'mini_lte_reexp', 'open_comment_posts', 'order_detail_sub_options', 'order_status', 'partial_box_paid', 'prepacked_products', 'product_codification', 'purchase_orders', 'purchase_order_items', 'raf_offer_details', 'raf_offers', 'raf_reward_moment', 'raf_reward_type', 'raf_sub_link', 'range_of_age', 'sample_product_link', 'shipping_modes', 'store_products', 'sub_payments_status', 'sub_suspend_survey_question', 'sub_suspend_survey_question_answer', 'sub_suspended_reasons', 'survey_answer_meanings', 'survey_question_categories', 'term_taxonomy', 'terms'] -%}  \n    {%- set user_tmp_tables = ['Choose_by_user','customers_carts','test_merge','crm_data','customers_info_perso','customers_beauty_profile','user_consent_details','customers_streaming','splio_data_dedup','customers','today_whales','today_stars','today_spectators','today_inactive','today_lost','today_middle','today_new','today_prospects','today_risky','today_spectators','today_segments'] -%}\n    {%- set inter_materialized_view_tmp_tables = ['yearly_check','products_detailed_rating','warehouse','user_consent','tva_product','shipup_tracking','survey_questions','survey_results','survey_Result_answers','consent','b2c_order_notifications','orders_status','consent_topic','gift_codes_generated','options','order_status','payments','postmeta','survey_answers','survey_questions','survey_result_answers','survey_results','user_consent_history','allocation_history','b2c_exported_orders','ga_transactions','mini_reexp','optin','payment_profiles','raf','raf_order_link','reception_details','reward_points_history','reward_points_history_uses','saved_cart','saved_cart_details','store_mouvements','term_relationships','trackings','user_campaign','user_mailing_list'] -%}\n    {%- set forecast_tmp_tables = ['classement_groupe_marque'] -%}\n    {%- set alerting_tmp_tables = ['surveillance_incremental'] -%}\n    {%- set reviews_tmp_tables = ['reviews_by_user'] -%}\n    {%- set mailjet_tmp_tables = ['mailjet'] -%}\n    {%- set survey_tmp_tables = ['archives_survey_answers'] -%}\n    {%- set pnl_tmp_tables = ['pnl2','export_pnl_live_materialized'] -%}\n    {%- set crm_tmp_tables = ['crm_zapier','Export_imagino_extract'] -%}\n    {%- set archives_tmp_tables = ['archives_payments'] -%}\n    {%- set catalog_tmp_tables = ['flag_materialized','projects_materialized','work_orders_materialized'] -%}\n    {%- set history_table_tmp_tables = ['catalog__stock','pnl__export_pnl_live','catalog__bank'] -%}\n    \n\n    {%- set inter_all_tables = inter_tmp_tables + inter_view_tmp_tables + inter_materialized_view_tmp_tables   -%}\n\n\n    {%- if node.resource_type == \"test\" -%}\n        dbt_test_failures  {# Sch\u00e9ma d\u00e9di\u00e9 pour les r\u00e9sultats des tests #}\n    {%- elif node.name in sales_tmp_tables -%}\n        sales\n    {%- elif node.name in product_tmp_tables -%}\n        product\n    {%- elif node.name in ops_tmp_tables -%}\n        ops\n    {%- elif node.name in snippets_tmp_tables -%}\n        snippets\n    {%- elif node.name in allocation_tmp_tables -%}\n        allocation\n    {%- elif node.name in payment_tmp_tables -%}\n        payment\n    {%- elif node.name in marketing_tmp_tables -%}\n        marketing\n    {%- elif node.name in accounting_tmp_tables -%}\n        accounting\n    {%- elif node.name in blissim_analytics_tmp_tables -%}\n        blissim_analytics\n    {%- elif node.name in inter_all_tables -%}\n        inter\n    {%- elif node.name in archives_tmp_tables -%}\n        Archives\n    {%- elif node.name in crm_tmp_tables -%}\n        crm\n    {%- elif node.name in sublissim_tmp_tables -%}\n        bdd_prod_sublissim\n    {%- elif node.name in alerting_tmp_tables -%}\n        alerting\n    {%- elif node.name in forecast_tmp_tables -%}\n        forecast\n    {%- elif node.name in survey_tmp_tables -%}\n        survey\n    {%- elif node.name in user_tmp_tables -%}\n        user\n    {%- elif node.name in catalog_tmp_tables -%}\n        catalog\n    {%- elif node.name in mailjet_tmp_tables -%}\n        mailjet\n    {%- elif node.name in reviews_tmp_tables -%}\n        reviews\n    {%- elif node.name in pnl_tmp_tables -%}\n        pnl\n    {%- elif node.name in history_table_tmp_tables -%}\n        history_table\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.159414, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.159712, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.159915, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.160161, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.163093, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.163564, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.163696, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.163837, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1639738, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.164115, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.164287, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.164547, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1646988, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.165078, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.165428, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1661131, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.16628, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.166548, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.166852, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1670022, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1677482, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.168191, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.168807, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.171187, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.172534, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.173774, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.175551, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.175818, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.176515, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.177312, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.18114, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.181524, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.181679, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.181807, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.181996, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1821241, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.183191, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.183747, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.184334, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.185128, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.185484, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.18709, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.188525, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.189058, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.190007, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.190658, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1917162, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1923358, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1927161, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.192956, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.193572, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.193898, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.19407, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.194484, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.194963, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1951628, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.195901, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.196046, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.196604, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.196824, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.197302, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.197582, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.198133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.198285, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.19857, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.19874, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.1989498, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.20031, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.200499, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.200711, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2009752, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2011452, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2020822, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.202938, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2030258, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.203116, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.203417, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.20352, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.203779, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.204635, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.204746, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2049458, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.20516, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.20532, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2054908, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.205565, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.205667, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2059221, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.206557, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2071118, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.207278, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.207732, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.20795, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.208318, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.208777, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.21008, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2102919, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.210457, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.210633, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.210772, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.210937, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.211071, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.211614, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.211817, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.212131, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.212342, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.212935, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.213173, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.213408, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.213676, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.213921, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.214775, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2149692, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.215109, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2152479, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.215384, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2156858, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.215966, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.216243, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.216682, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.217462, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2197142, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.219897, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.220122, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.221056, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.221217, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2213771, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.222698, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.224129, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.226411, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2266948, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.226856, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2269409, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.227079, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.227189, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.227387, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.227629, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.231243, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.231445, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.231937, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.232346, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.232903, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.233309, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.233571, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.233889, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.234429, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2346299, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.234824, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.238841, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.241083, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.241664, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2419572, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.24216, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2427351, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.243062, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2434182, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.24491, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.24655, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.246923, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.24716, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.248457, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.248679, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2492979, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.251352, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.253454, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.254317, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.254828, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.255441, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.255666, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2563388, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.257532, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2592242, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.259476, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.260154, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2604082, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.261031, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.261641, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.262332, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.262555, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.262733, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.263011, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2631848, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.263474, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.26365, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2638981, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.264073, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.264213, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.264384, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.264537, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.264802, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.269026, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.270379, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.271523, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.272649, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.273443, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.273684, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2737951, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.274077, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.274236, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.276787, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2793002, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.280376, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.281217, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.281445, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.281905, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2820868, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2822132, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.282347, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.282458, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.282607, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.282718, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2831628, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.28334, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.284534, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.284933, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.285291, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.285758, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.28601, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2862778, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2866912, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.286931, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.287393, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.287764, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.287939, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.288128, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.288307, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2888992, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.29012, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.290459, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.290696, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.290955, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.291161, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.291457, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.291651, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.292119, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2925272, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.292724, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.293003, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2933109, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2935638, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2939389, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.294361, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.29466, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2948558, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.29515, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.295271, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.295537, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.295748, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.296046, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.296179, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.296443, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.296586, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2971342, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.297318, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.297586, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2977228, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2979882, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2981231, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2989419, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.299056, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.299551, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.29971, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.2998369, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.301116, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.301481, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.301804, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.302055, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.302171, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.302432, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.302569, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.302828, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.302964, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3036559, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.303828, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3042371, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.304883, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3053288, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.305509, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.305689, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.305952, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.306077, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.306658, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.306803, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.307932, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3081229, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.308345, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.308606, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.308743, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.309116, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.309269, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.309442, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.309854, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.310148, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.310433, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.310665, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.311171, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.312481, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.313034, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.31331, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.314087, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3152719, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.31597, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.31619, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.31642, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3164952, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.317027, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3175879, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.317812, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.318166, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.318506, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.318777, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3190851, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.319242, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.319487, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.319608, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3201, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.320489, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.320669, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.321166, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3214169, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.32152, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.321833, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.322068, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.32229, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.322365, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3226318, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.322766, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.323043, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.323178, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.323634, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.324024, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.324335, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3244932, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.324777, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.324909, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.325228, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3255098, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.325762, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.325912, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.32615, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.326303, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.32658, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.326771, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.327012, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.327113, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3273852, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3275158, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3277571, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3278568, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3286898, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3288372, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.32899, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.329132, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3292868, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.32943, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3295841, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.329754, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.32991, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.330053, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3302028, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.330339, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.330561, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.330698, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.330969, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3310962, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.331338, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.331439, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.331764, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.332025, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.332171, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3325472, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.332705, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3329222, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.333193, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.333317, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.333685, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.333911, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.334191, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3343182, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.334649, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3348238, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3350568, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.335246, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3357399, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.335881, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.336017, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.336119, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.336513, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.336734, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.336822, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.336986, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.337147, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.337653, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3377888, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3379462, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.338326, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.33851, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.33864, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.338788, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.338911, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.339645, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.339875, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.340238, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.340514, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.340744, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3410492, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.341226, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.341395, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.341632, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.342149, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.342366, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.342504, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3429708, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3433568, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3435571, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.343856, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3441322, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3443441, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.34567, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.345782, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.345941, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3462842, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.346616, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.346797, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.346912, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.347123, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.347318, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.347533, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.347726, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3479412, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.348599, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.34878, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.34901, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.349227, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.350372, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.35077, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.350945, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.351124, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3515651, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.351726, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3519201, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.352077, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.352334, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.352777, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.353719, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.353962, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.354157, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.354402, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.354583, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.354733, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.354903, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.355137, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3553941, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.355684, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.355862, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.356013, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.356189, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.35634, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.356502, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.356645, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.356839, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.356999, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3582468, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.358401, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.35869, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.358905, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3590982, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.359272, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3604748, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3608088, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.360987, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3613188, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.361562, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.362237, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3624902, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3632379, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.36566, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3661819, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.367234, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.367436, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.367527, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3683221, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.368468, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.369371, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.369757, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.370336, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3708658, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.370941, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.371393, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.371628, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.371928, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.372206, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.372512, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3729541, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.373303, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3739169, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.374219, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.37452, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.375124, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.376086, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.376714, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.377804, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.378325, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.378716, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.379286, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.38011, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.380527, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3809652, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.381442, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.381896, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.382314, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.382682, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3831801, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.383992, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.384435, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.385036, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.38543, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3857589, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.386125, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.386538, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.387049, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.387869, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3884459, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.389309, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.390621, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3943691, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.394779, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.395103, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3959858, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.397428, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3976982, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.397853, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.398295, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.398567, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.39875, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.398998, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.3991628, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.399882, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4005718, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.401085, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.401644, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.401867, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4022138, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.402546, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4031308, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.403454, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4037812, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.404269, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4050748, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.405545, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.405931, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.406113, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4066, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.407085, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.407875, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.408253, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.40852, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.409282, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.410677, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.411511, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.413318, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4136162, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4137459, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.414906, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.418155, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4184508, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.418688, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.419332, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.419543, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.419708, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4199092, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.420098, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4202812, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.420456, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.420795, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4210172, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.421351, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.421857, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4221702, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.422486, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.423382, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.423732, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.424435, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4251158, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.425586, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.426358, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4277918, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.42871, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4295108, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.429932, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.430627, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.431085, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4315252, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4317062, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.432053, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.432608, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.432981, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.433572, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.43392, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.434056, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.4341881, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.434318, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.434737, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.435671, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.436165, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.436429, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.436984, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759995463.437739, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.warehouse.box_detailed": ["model.warehouse.box_turnover"], "model.warehouse.reconciliation_live": ["model.warehouse.adyen_notifications", "model.warehouse.box_turnover", "model.warehouse.shop_detailed", "model.warehouse.shop_sales"], "model.warehouse.shop_detailed": ["model.warehouse.shop_sales", "model.warehouse.tva_product"], "model.warehouse.box_turnover": ["model.warehouse.adyen_notifications_authorization", "model.warehouse.box_refunds", "model.warehouse.box_sales", "model.warehouse.da_eu_countries", "model.warehouse.order_detail_sub"], "model.warehouse.current_box": ["model.warehouse.boxes"], "model.warehouse.box_acquisition_detail": ["model.warehouse.box_sales", "model.warehouse.boxes", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders"], "model.warehouse.box_refunds": ["model.warehouse.adyen_notifications", "model.warehouse.boxes", "model.warehouse.coupons", "model.warehouse.gift_cards", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.sub_offers", "model.warehouse.sub_payments_status", "model.warehouse.tva_product"], "model.warehouse.box_gift": ["model.warehouse.boxes", "model.warehouse.current_box", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders"], "model.warehouse.shop_sales_with_gross_profit": ["model.warehouse.shop_orders_margin"], "model.warehouse.shop_refunds": ["model.warehouse.adyen_notifications", "model.warehouse.brands", "model.warehouse.catalog", "model.warehouse.categories", "model.warehouse.codification_bundle_product", "model.warehouse.coupons", "model.warehouse.da_eu_countries", "model.warehouse.gift_cards", "model.warehouse.nice_names", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.order_status", "model.warehouse.orders", "model.warehouse.partial_cancelations", "model.warehouse.posts", "model.warehouse.product_codification", "model.warehouse.products", "model.warehouse.shipping_modes", "model.warehouse.tva_product"], "model.warehouse.box_sales": ["model.warehouse.adyen_notifications_authorization", "model.warehouse.box_committed_not_paid", "model.warehouse.box_gift", "model.warehouse.box_mono", "model.warehouse.boxes", "model.warehouse.catalog", "model.warehouse.coupons", "model.warehouse.current_box", "model.warehouse.gift_cards", "model.warehouse.kit_costs", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.partial_box_paid", "model.warehouse.products", "model.warehouse.raf_order_link", "model.warehouse.shipping_costs", "model.warehouse.sub_history", "model.warehouse.sub_offers", "model.warehouse.sub_order_link", "model.warehouse.sub_payments_status", "model.warehouse.sub_suspend_survey_question_answer", "model.warehouse.sub_suspend_survey_result", "model.warehouse.sub_suspend_survey_result_answer", "model.warehouse.sub_suspended_reasons", "model.warehouse.tags"], "model.warehouse.shop_sales": ["model.warehouse.adyen_notifications", "model.warehouse.box_refunds", "model.warehouse.brands", "model.warehouse.catalog", "model.warehouse.categories", "model.warehouse.coupons", "model.warehouse.da_eu_countries", "model.warehouse.gift_cards", "model.warehouse.nice_names", "model.warehouse.order_details", "model.warehouse.order_status", "model.warehouse.orders", "model.warehouse.partial_cancelations", "model.warehouse.posts", "model.warehouse.product_codification", "model.warehouse.products", "model.warehouse.shipping_modes", "model.warehouse.shop_refunds", "model.warehouse.tva_product"], "model.warehouse.box_committed_not_paid": ["model.warehouse.boxes", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders"], "model.warehouse.box_acquisition_daily": ["model.warehouse.box_sales", "model.warehouse.boxes"], "model.warehouse.box_sales_by_user_by_type": ["model.warehouse.adyen_notifications", "model.warehouse.box_sales", "model.warehouse.boxes", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.sub_history"], "model.warehouse.kpi_box": ["model.warehouse.box_sales", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.boxes", "model.warehouse.current_box", "model.warehouse.tags"], "model.warehouse.box_paused": ["model.warehouse.boxes", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders"], "model.warehouse.shop_orders_margin": ["model.warehouse.catalog", "model.warehouse.logistics_costs", "model.warehouse.orders", "model.warehouse.products", "model.warehouse.shipping_costs", "model.warehouse.shop_sales"], "model.warehouse.adyen_notifications_authorization": ["model.warehouse.adyen_notifications"], "model.warehouse.product_classes": ["model.warehouse.brands", "model.warehouse.posts", "model.warehouse.products", "model.warehouse.products_bundle_component", "model.warehouse.products_stock_log", "model.warehouse.shop_sales"], "model.warehouse.reviews": ["model.warehouse.catalog", "model.warehouse.comments", "model.warehouse.posts", "model.warehouse.products", "model.warehouse.users"], "model.warehouse.categories": ["model.warehouse.term_taxonomy", "model.warehouse.terms"], "model.warehouse.all_kits": ["model.warehouse.kit_links", "model.warehouse.lte_kits"], "model.warehouse.catalog": ["model.warehouse.algolia_product_categories", "model.warehouse.brands", "model.warehouse.categories", "model.warehouse.company", "model.warehouse.inventory_items", "model.warehouse.kit_costs", "model.warehouse.nice_names", "model.warehouse.posts", "model.warehouse.product_codification", "model.warehouse.products", "model.warehouse.tva_product"], "model.warehouse.algolia_product_categories": ["model.warehouse.term_taxonomy", "model.warehouse.terms"], "model.warehouse.stock_store": ["model.warehouse.catalog", "model.warehouse.products", "model.warehouse.store_products"], "model.warehouse.codification_bundle_product": ["model.warehouse.product_codification", "model.warehouse.products", "model.warehouse.products_bundle_component"], "model.warehouse.kit_costs": ["model.warehouse.all_kits", "model.warehouse.inventory_items", "model.warehouse.logistics_costs", "model.warehouse.posts", "model.warehouse.product_codification", "model.warehouse.products"], "model.warehouse.kit_details": ["model.warehouse.boxes", "model.warehouse.catalog", "model.warehouse.kit_links", "model.warehouse.lte_kits", "model.warehouse.product_codification", "model.warehouse.products"], "model.warehouse.stock": ["model.warehouse.catalog", "model.warehouse.product_warehouse_location", "model.warehouse.products"], "model.warehouse.nice_names": ["model.warehouse.brands", "model.warehouse.posts", "model.warehouse.products"], "model.warehouse.stock_bs": ["model.warehouse.catalog", "model.warehouse.product_warehouse_location", "model.warehouse.products"], "model.warehouse.product_classes_3m": ["model.warehouse.brands", "model.warehouse.posts", "model.warehouse.products", "model.warehouse.products_bundle_component", "model.warehouse.products_stock_log", "model.warehouse.shop_sales"], "model.warehouse.users": [], "model.warehouse.sub_suspend_survey_result": [], "model.warehouse.raf_order_link": [], "model.warehouse.company": [], "model.warehouse.product_warehouse_location": [], "model.warehouse.sub_payments_status": [], "model.warehouse.kit_links": [], "model.warehouse.payments": [], "model.warehouse.survey_result_answers": [], "model.warehouse.tags": [], "model.warehouse.user_consent_history": [], "model.warehouse.reward_points_history_uses": [], "model.warehouse.prepacked_products": [], "model.warehouse.products": [], "model.warehouse.products_bundle_component": [], "model.warehouse.invoices": [], "model.warehouse.b2c_order_notifications": [], "model.warehouse.sub_suspended_reasons": [], "model.warehouse.open_comment_posts": [], "model.warehouse.posts": [], "model.warehouse.sub_order_link": [], "model.warehouse.order_detail_sub": [], "model.warehouse.raf_reward_moment": [], "model.warehouse.orders": [], "model.warehouse.choose_choices": [], "model.warehouse.inventory_items": [], "model.warehouse.survey_answers": [], "model.warehouse.raf_offers": [], "model.warehouse.mini_lte_reexp": [], "model.warehouse.shipup_tracking": [], "model.warehouse.raf_offer_details": [], "model.warehouse.user_consent": [], "model.warehouse.choose_users": [], "model.warehouse.customers_beauty_profile": [], "model.warehouse.products_detailed_rating": [], "model.warehouse.sub_suspend_survey_question": [], "model.warehouse.allocation_history": [], "model.warehouse.brands_correspondances": [], "model.warehouse.invoice_details": [], "model.warehouse.order_details": [], "model.warehouse.store_products": [], "model.warehouse.raf_sub_link": [], "model.warehouse.purchase_order_items": [], "model.warehouse.customers_info_perso": ["model.warehouse.orders"], "model.warehouse.saved_cart_details": [], "model.warehouse.products_stock_log": ["model.warehouse.archives_products_stock_log"], "model.warehouse.postmeta": [], "model.warehouse.choose_forms": [], "model.warehouse.shipping_modes": [], "model.warehouse.yearly_check": [], "model.warehouse.partial_cancelations": [], "model.warehouse.sub_suspend_survey_result_answer": [], "model.warehouse.store_mouvements": [], "model.warehouse.survey_surveys": [], "model.warehouse.sub_offers": [], "model.warehouse.raf_reward_type": [], "model.warehouse.partial_box_paid": [], "model.warehouse.boxes": [], "model.warehouse.sub_history": [], "model.warehouse.order_detail_sub_options": [], "model.warehouse.user_campaign": [], "model.warehouse.saved_cart": [], "model.warehouse.sub_suspend_survey_question_answer": [], "model.warehouse.raf": [], "model.warehouse.coupons": [], "model.warehouse.survey_answer_meanings": [], "model.warehouse.product_codification": [], "model.warehouse.purchase_orders": [], "model.warehouse.user_mailing_list": [], "model.warehouse.da_eu_countries": [], "model.warehouse.mini_byob_reexp": [], "model.warehouse.survey_question_categories": [], "model.warehouse.order_status": [], "model.warehouse.customers_carts": ["model.warehouse.catalog", "model.warehouse.products", "model.warehouse.saved_cart_details"], "model.warehouse.da_box_acquisition_detail": [], "model.warehouse.da_monthly_sub_baseline": [], "model.warehouse.expected_inbound_details": [], "model.warehouse.invoice_credit_notes": [], "model.warehouse.boxes_by_day": ["model.warehouse.boxes"], "model.warehouse.brands": [], "model.warehouse.terms": [], "model.warehouse.expected_inbounds": [], "model.warehouse.sample_product_link": [], "model.warehouse.tva_product": [], "model.warehouse.byob_product_link": [], "model.warehouse.range_of_age": [], "model.warehouse.da_box_shipped_detail": [], "model.warehouse.term_relationships": [], "model.warehouse.term_taxonomy": [], "model.warehouse.box_mono": [], "model.warehouse.consent": ["model.warehouse.consent_topic", "model.warehouse.user_consent"], "model.warehouse.reception_details": [], "model.warehouse.gift_cards": [], "model.warehouse.options": [], "model.warehouse.warehouse": [], "model.warehouse.survey_results": [], "model.warehouse.trackings": [], "model.warehouse.consent_topic": [], "model.warehouse.survey_questions": [], "model.warehouse.kit": [], "model.warehouse.ga_transactions": [], "model.warehouse.mini_reexp": [], "model.warehouse.payment_profiles": [], "model.warehouse.christmas_offer": [], "model.warehouse.lte_kits": [], "model.warehouse.optin": [], "model.warehouse.gift_codes_generated": [], "model.warehouse.b2c_exported_orders": [], "model.warehouse.comments": [], "model.warehouse.cc_orders_status": [], "model.warehouse.reward_points_history": [], "model.warehouse.orders_status": [], "model.warehouse.live_expenses": [], "model.warehouse.shipping_costs": ["model.warehouse.logistics_costs"], "model.warehouse.logistics_costs": [], "model.warehouse.monthly_rank_brands": ["model.warehouse.products", "model.warehouse.shop_sales"], "model.warehouse.box_choose": ["model.warehouse.box_sales", "model.warehouse.boxes", "model.warehouse.choose_choices", "model.warehouse.choose_forms", "model.warehouse.choose_users"], "model.warehouse.index_user_samples": ["model.warehouse.kit_links", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.products"], "model.warehouse.crm_zapier": [], "model.warehouse.reviews_by_user": [], "model.warehouse.flag_materialized": [], "model.warehouse.export_pnl_live_materialized": [], "model.warehouse.work_orders_materialized": [], "model.warehouse.pom_seasonality_table": [], "model.warehouse.projects_materialized": [], "model.warehouse.surveillance_incremental": [], "model.warehouse.user_consent_details": ["model.warehouse.consent_topic", "model.warehouse.user_consent"], "model.warehouse.Export_Acquisition_Daily": [], "model.warehouse.Export_GWS_LIVE": [], "model.warehouse.Export_predictive_ltv_per_campaign": [], "model.warehouse.Export_Yearly_Live": [], "model.warehouse.Export_Discount_Live": [], "model.warehouse.Export_imagino_extract": [], "model.warehouse.Export_predictive_ltv_per_campaign_agg": [], "model.warehouse.pnl2": ["model.warehouse.allocation_history", "model.warehouse.b2c_order_notifications", "model.warehouse.box_sales", "model.warehouse.boxes", "model.warehouse.catalog", "model.warehouse.gift_cards", "model.warehouse.kit_details", "model.warehouse.kit_links", "model.warehouse.order_detail_sub", "model.warehouse.order_details", "model.warehouse.orders", "model.warehouse.products", "model.warehouse.shop_orders_margin", "model.warehouse.shop_sales", "model.warehouse.tags"], "model.warehouse.fraude_yearly": ["model.warehouse.box_sales"], "model.warehouse.sra_test": [], "model.warehouse.today_segments": ["model.warehouse.today_inactive", "model.warehouse.today_lost", "model.warehouse.today_middle", "model.warehouse.today_new", "model.warehouse.today_prospects", "model.warehouse.today_risky", "model.warehouse.today_spectators", "model.warehouse.today_stars", "model.warehouse.today_whales"], "model.warehouse.today_inactive": [], "model.warehouse.today_middle": ["model.warehouse.today_inactive", "model.warehouse.today_lost", "model.warehouse.today_new", "model.warehouse.today_prospects", "model.warehouse.today_risky", "model.warehouse.today_spectators", "model.warehouse.today_stars", "model.warehouse.today_whales"], "model.warehouse.today_stars": ["model.warehouse.today_new", "model.warehouse.today_whales"], "model.warehouse.today_whales": ["model.warehouse.today_new"], "model.warehouse.today_spectators": ["model.warehouse.today_new", "model.warehouse.today_stars", "model.warehouse.today_whales"], "model.warehouse.today_new": [], "model.warehouse.today_prospects": ["model.warehouse.today_new"], "model.warehouse.today_lost": [], "model.warehouse.shipments_all": ["model.warehouse.box_shipments", "model.warehouse.shop_shipments"], "model.warehouse.today_risky": ["model.warehouse.today_new", "model.warehouse.today_prospects", "model.warehouse.today_spectators", "model.warehouse.today_stars", "model.warehouse.today_whales"], "model.warehouse.splio_data_dedup": [], "model.warehouse.Marketing_cac_expenses": [], "model.warehouse.pnl__export_pnl_live": [], "model.warehouse.obj_by_country": [], "model.warehouse.box_shipments": [], "model.warehouse.crm_data": ["model.warehouse.splio_data_dedup"], "model.warehouse.shop_shipments": [], "model.warehouse.bq_inventory_to_update": [], "model.warehouse.Marketing_cac_budget_vs_expenses": ["model.warehouse.Marketing_cac_expenses"], "model.warehouse.mailjet": [], "model.warehouse.Marketing_cac_live": ["model.warehouse.Marketing_cac_expenses"], "model.warehouse.Choose_by_user": ["model.warehouse.choose_choices", "model.warehouse.choose_forms", "model.warehouse.choose_users", "model.warehouse.customers"], "model.warehouse.bank": [], "model.warehouse.customers_streaming": ["model.warehouse.crm_data", "model.warehouse.customers_beauty_profile", "model.warehouse.customers_info_perso", "model.warehouse.orders"], "model.warehouse.classement_groupe_marque": [], "model.warehouse.customers": ["model.warehouse.crm_data", "model.warehouse.customers_beauty_profile", "model.warehouse.customers_info_perso", "model.warehouse.orders", "model.warehouse.user_consent"], "model.warehouse.catalog__stock": [], "model.warehouse.catalog__bank": [], "model.warehouse.archives_survey_answers": [], "model.warehouse.archives_products_stock_log": [], "model.warehouse.archives_payments": [], "snapshot.warehouse.history_segments": ["model.warehouse.today_segments"], "test.warehouse.unique_id_country_test": ["model.warehouse.adyen_notifications", "model.warehouse.allocation_history", "model.warehouse.b2c_exported_orders", "model.warehouse.b2c_order_notifications", "model.warehouse.boxes", "model.warehouse.brands", "model.warehouse.brands_correspondances", "model.warehouse.choose_choices", "model.warehouse.choose_forms", "model.warehouse.choose_users", "model.warehouse.christmas_offer", "model.warehouse.company", "model.warehouse.consent", "model.warehouse.coupons", "model.warehouse.expected_inbound_details", "model.warehouse.expected_inbounds", "model.warehouse.ga_transactions", "model.warehouse.gift_cards", "model.warehouse.gift_codes_generated", "model.warehouse.inventory_items", "model.warehouse.invoice_credit_notes", "model.warehouse.invoice_details", "model.warehouse.invoices", "model.warehouse.lte_kits", "model.warehouse.mini_byob_reexp", "model.warehouse.mini_lte_reexp", "model.warehouse.mini_reexp", "model.warehouse.open_comment_posts", "model.warehouse.optin", "model.warehouse.order_detail_sub", "model.warehouse.order_detail_sub_options", "model.warehouse.order_details", "model.warehouse.order_status", "model.warehouse.orders", "model.warehouse.partial_box_paid", "model.warehouse.partial_cancelations", "model.warehouse.payment_profiles", "model.warehouse.payments", "model.warehouse.posts", "model.warehouse.prepacked_products", "model.warehouse.product_codification", "model.warehouse.product_warehouse_location", "model.warehouse.products", "model.warehouse.products_bundle_component", "model.warehouse.products_stock_log", "model.warehouse.purchase_order_items", "model.warehouse.purchase_orders", "model.warehouse.raf", "model.warehouse.raf_offer_details", "model.warehouse.raf_offers", "model.warehouse.raf_order_link", "model.warehouse.raf_reward_moment", "model.warehouse.raf_reward_type", "model.warehouse.raf_sub_link", "model.warehouse.range_of_age", "model.warehouse.reception_details", "model.warehouse.reward_points_history", "model.warehouse.reward_points_history_uses", "model.warehouse.shipping_modes", "model.warehouse.shipup_tracking", "model.warehouse.store_mouvements", "model.warehouse.store_products", "model.warehouse.sub_history", "model.warehouse.sub_offers", "model.warehouse.sub_order_link", "model.warehouse.sub_payments_status", "model.warehouse.survey_answer_meanings", "model.warehouse.survey_answers", "model.warehouse.survey_question_categories", "model.warehouse.survey_questions", "model.warehouse.survey_result_answers", "model.warehouse.survey_results", "model.warehouse.survey_surveys", "model.warehouse.tags", "model.warehouse.user_campaign", "model.warehouse.user_consent", "model.warehouse.user_consent_history", "model.warehouse.users", "model.warehouse.warehouse"], "test.warehouse.dbt_utils_unique_combination_of_columns_box_sales_sub_id__dw_country_code.6ebb177269": ["model.warehouse.box_sales"], "test.warehouse.dbt_utils_unique_combination_of_columns_partial_box_paid_sub_id__dw_country_code.6b11f8bcd3": ["model.warehouse.partial_box_paid"], "model.warehouse.adyen_notifications": []}, "child_map": {"model.warehouse.box_detailed": [], "model.warehouse.reconciliation_live": [], "model.warehouse.shop_detailed": ["model.warehouse.reconciliation_live"], "model.warehouse.box_turnover": ["model.warehouse.box_detailed", "model.warehouse.reconciliation_live"], "model.warehouse.current_box": ["model.warehouse.box_gift", "model.warehouse.box_sales", "model.warehouse.kpi_box"], "model.warehouse.box_acquisition_detail": [], "model.warehouse.box_refunds": ["model.warehouse.box_turnover", "model.warehouse.shop_sales"], "model.warehouse.box_gift": ["model.warehouse.box_sales"], "model.warehouse.shop_sales_with_gross_profit": [], "model.warehouse.shop_refunds": ["model.warehouse.shop_sales"], "model.warehouse.box_sales": ["model.warehouse.box_acquisition_daily", "model.warehouse.box_acquisition_detail", "model.warehouse.box_choose", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.box_turnover", "model.warehouse.fraude_yearly", "model.warehouse.kpi_box", "model.warehouse.pnl2", "test.warehouse.dbt_utils_unique_combination_of_columns_box_sales_sub_id__dw_country_code.6ebb177269"], "model.warehouse.shop_sales": ["model.warehouse.monthly_rank_brands", "model.warehouse.pnl2", "model.warehouse.product_classes", "model.warehouse.product_classes_3m", "model.warehouse.reconciliation_live", "model.warehouse.shop_detailed", "model.warehouse.shop_orders_margin"], "model.warehouse.box_committed_not_paid": ["model.warehouse.box_sales"], "model.warehouse.box_acquisition_daily": [], "model.warehouse.box_sales_by_user_by_type": ["model.warehouse.kpi_box"], "model.warehouse.kpi_box": [], "model.warehouse.box_paused": [], "model.warehouse.shop_orders_margin": ["model.warehouse.pnl2", "model.warehouse.shop_sales_with_gross_profit"], "model.warehouse.adyen_notifications_authorization": ["model.warehouse.box_sales", "model.warehouse.box_turnover"], "model.warehouse.product_classes": [], "model.warehouse.reviews": [], "model.warehouse.categories": ["model.warehouse.catalog", "model.warehouse.shop_refunds", "model.warehouse.shop_sales"], "model.warehouse.all_kits": ["model.warehouse.kit_costs"], "model.warehouse.catalog": ["model.warehouse.box_sales", "model.warehouse.customers_carts", "model.warehouse.kit_details", "model.warehouse.pnl2", "model.warehouse.reviews", "model.warehouse.shop_orders_margin", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "model.warehouse.stock", "model.warehouse.stock_bs", "model.warehouse.stock_store"], "model.warehouse.algolia_product_categories": ["model.warehouse.catalog"], "model.warehouse.stock_store": [], "model.warehouse.codification_bundle_product": ["model.warehouse.shop_refunds"], "model.warehouse.kit_costs": ["model.warehouse.box_sales", "model.warehouse.catalog"], "model.warehouse.kit_details": ["model.warehouse.pnl2"], "model.warehouse.stock": [], "model.warehouse.nice_names": ["model.warehouse.catalog", "model.warehouse.shop_refunds", "model.warehouse.shop_sales"], "model.warehouse.stock_bs": [], "model.warehouse.product_classes_3m": [], "model.warehouse.users": ["model.warehouse.reviews", "test.warehouse.unique_id_country_test"], "model.warehouse.sub_suspend_survey_result": ["model.warehouse.box_sales"], "model.warehouse.raf_order_link": ["model.warehouse.box_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.company": ["model.warehouse.catalog", "test.warehouse.unique_id_country_test"], "model.warehouse.product_warehouse_location": ["model.warehouse.stock", "model.warehouse.stock_bs", "test.warehouse.unique_id_country_test"], "model.warehouse.sub_payments_status": ["model.warehouse.box_refunds", "model.warehouse.box_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.kit_links": ["model.warehouse.all_kits", "model.warehouse.index_user_samples", "model.warehouse.kit_details", "model.warehouse.pnl2"], "model.warehouse.payments": ["test.warehouse.unique_id_country_test"], "model.warehouse.survey_result_answers": ["test.warehouse.unique_id_country_test"], "model.warehouse.tags": ["model.warehouse.box_sales", "model.warehouse.kpi_box", "model.warehouse.pnl2", "test.warehouse.unique_id_country_test"], "model.warehouse.user_consent_history": ["test.warehouse.unique_id_country_test"], "model.warehouse.reward_points_history_uses": ["test.warehouse.unique_id_country_test"], "model.warehouse.prepacked_products": ["test.warehouse.unique_id_country_test"], "model.warehouse.products": ["model.warehouse.box_sales", "model.warehouse.catalog", "model.warehouse.codification_bundle_product", "model.warehouse.customers_carts", "model.warehouse.index_user_samples", "model.warehouse.kit_costs", "model.warehouse.kit_details", "model.warehouse.monthly_rank_brands", "model.warehouse.nice_names", "model.warehouse.pnl2", "model.warehouse.product_classes", "model.warehouse.product_classes_3m", "model.warehouse.reviews", "model.warehouse.shop_orders_margin", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "model.warehouse.stock", "model.warehouse.stock_bs", "model.warehouse.stock_store", "test.warehouse.unique_id_country_test"], "model.warehouse.products_bundle_component": ["model.warehouse.codification_bundle_product", "model.warehouse.product_classes", "model.warehouse.product_classes_3m", "test.warehouse.unique_id_country_test"], "model.warehouse.invoices": ["test.warehouse.unique_id_country_test"], "model.warehouse.b2c_order_notifications": ["model.warehouse.pnl2", "test.warehouse.unique_id_country_test"], "model.warehouse.sub_suspended_reasons": ["model.warehouse.box_sales"], "model.warehouse.open_comment_posts": ["test.warehouse.unique_id_country_test"], "model.warehouse.posts": ["model.warehouse.catalog", "model.warehouse.kit_costs", "model.warehouse.nice_names", "model.warehouse.product_classes", "model.warehouse.product_classes_3m", "model.warehouse.reviews", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.sub_order_link": ["model.warehouse.box_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.order_detail_sub": ["model.warehouse.box_acquisition_detail", "model.warehouse.box_committed_not_paid", "model.warehouse.box_gift", "model.warehouse.box_paused", "model.warehouse.box_refunds", "model.warehouse.box_sales", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.box_turnover", "model.warehouse.index_user_samples", "model.warehouse.pnl2", "model.warehouse.shop_refunds", "test.warehouse.unique_id_country_test"], "model.warehouse.raf_reward_moment": ["test.warehouse.unique_id_country_test"], "model.warehouse.orders": ["model.warehouse.box_acquisition_detail", "model.warehouse.box_committed_not_paid", "model.warehouse.box_gift", "model.warehouse.box_paused", "model.warehouse.box_refunds", "model.warehouse.box_sales", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.customers", "model.warehouse.customers_info_perso", "model.warehouse.customers_streaming", "model.warehouse.index_user_samples", "model.warehouse.pnl2", "model.warehouse.shop_orders_margin", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.choose_choices": ["model.warehouse.Choose_by_user", "model.warehouse.box_choose", "test.warehouse.unique_id_country_test"], "model.warehouse.inventory_items": ["model.warehouse.catalog", "model.warehouse.kit_costs", "test.warehouse.unique_id_country_test"], "model.warehouse.survey_answers": ["test.warehouse.unique_id_country_test"], "model.warehouse.raf_offers": ["test.warehouse.unique_id_country_test"], "model.warehouse.mini_lte_reexp": ["test.warehouse.unique_id_country_test"], "model.warehouse.shipup_tracking": ["test.warehouse.unique_id_country_test"], "model.warehouse.raf_offer_details": ["test.warehouse.unique_id_country_test"], "model.warehouse.user_consent": ["model.warehouse.consent", "model.warehouse.customers", "model.warehouse.user_consent_details", "test.warehouse.unique_id_country_test"], "model.warehouse.choose_users": ["model.warehouse.Choose_by_user", "model.warehouse.box_choose", "test.warehouse.unique_id_country_test"], "model.warehouse.customers_beauty_profile": ["model.warehouse.customers", "model.warehouse.customers_streaming"], "model.warehouse.products_detailed_rating": [], "model.warehouse.sub_suspend_survey_question": [], "model.warehouse.allocation_history": ["model.warehouse.pnl2", "test.warehouse.unique_id_country_test"], "model.warehouse.brands_correspondances": ["test.warehouse.unique_id_country_test"], "model.warehouse.invoice_details": ["test.warehouse.unique_id_country_test"], "model.warehouse.order_details": ["model.warehouse.box_acquisition_detail", "model.warehouse.box_committed_not_paid", "model.warehouse.box_gift", "model.warehouse.box_paused", "model.warehouse.box_refunds", "model.warehouse.box_sales", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.index_user_samples", "model.warehouse.pnl2", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.store_products": ["model.warehouse.stock_store", "test.warehouse.unique_id_country_test"], "model.warehouse.raf_sub_link": ["test.warehouse.unique_id_country_test"], "model.warehouse.purchase_order_items": ["test.warehouse.unique_id_country_test"], "model.warehouse.customers_info_perso": ["model.warehouse.customers", "model.warehouse.customers_streaming"], "model.warehouse.saved_cart_details": ["model.warehouse.customers_carts"], "model.warehouse.products_stock_log": ["model.warehouse.product_classes", "model.warehouse.product_classes_3m", "test.warehouse.unique_id_country_test"], "model.warehouse.postmeta": [], "model.warehouse.choose_forms": ["model.warehouse.Choose_by_user", "model.warehouse.box_choose", "test.warehouse.unique_id_country_test"], "model.warehouse.shipping_modes": ["model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.yearly_check": [], "model.warehouse.partial_cancelations": ["model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.sub_suspend_survey_result_answer": ["model.warehouse.box_sales"], "model.warehouse.store_mouvements": ["test.warehouse.unique_id_country_test"], "model.warehouse.survey_surveys": ["test.warehouse.unique_id_country_test"], "model.warehouse.sub_offers": ["model.warehouse.box_refunds", "model.warehouse.box_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.raf_reward_type": ["test.warehouse.unique_id_country_test"], "model.warehouse.partial_box_paid": ["model.warehouse.box_sales", "test.warehouse.dbt_utils_unique_combination_of_columns_partial_box_paid_sub_id__dw_country_code.6b11f8bcd3", "test.warehouse.unique_id_country_test"], "model.warehouse.boxes": ["model.warehouse.box_acquisition_daily", "model.warehouse.box_acquisition_detail", "model.warehouse.box_choose", "model.warehouse.box_committed_not_paid", "model.warehouse.box_gift", "model.warehouse.box_paused", "model.warehouse.box_refunds", "model.warehouse.box_sales", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.boxes_by_day", "model.warehouse.current_box", "model.warehouse.kit_details", "model.warehouse.kpi_box", "model.warehouse.pnl2", "test.warehouse.unique_id_country_test"], "model.warehouse.sub_history": ["model.warehouse.box_sales", "model.warehouse.box_sales_by_user_by_type", "test.warehouse.unique_id_country_test"], "model.warehouse.order_detail_sub_options": ["test.warehouse.unique_id_country_test"], "model.warehouse.user_campaign": ["test.warehouse.unique_id_country_test"], "model.warehouse.saved_cart": [], "model.warehouse.sub_suspend_survey_question_answer": ["model.warehouse.box_sales"], "model.warehouse.raf": ["test.warehouse.unique_id_country_test"], "model.warehouse.coupons": ["model.warehouse.box_refunds", "model.warehouse.box_sales", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.survey_answer_meanings": ["test.warehouse.unique_id_country_test"], "model.warehouse.product_codification": ["model.warehouse.catalog", "model.warehouse.codification_bundle_product", "model.warehouse.kit_costs", "model.warehouse.kit_details", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.purchase_orders": ["test.warehouse.unique_id_country_test"], "model.warehouse.user_mailing_list": [], "model.warehouse.da_eu_countries": ["model.warehouse.box_turnover", "model.warehouse.shop_refunds", "model.warehouse.shop_sales"], "model.warehouse.mini_byob_reexp": ["test.warehouse.unique_id_country_test"], "model.warehouse.survey_question_categories": ["test.warehouse.unique_id_country_test"], "model.warehouse.order_status": ["model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.customers_carts": [], "model.warehouse.da_box_acquisition_detail": [], "model.warehouse.da_monthly_sub_baseline": [], "model.warehouse.expected_inbound_details": ["test.warehouse.unique_id_country_test"], "model.warehouse.invoice_credit_notes": ["test.warehouse.unique_id_country_test"], "model.warehouse.boxes_by_day": [], "model.warehouse.brands": ["model.warehouse.catalog", "model.warehouse.nice_names", "model.warehouse.product_classes", "model.warehouse.product_classes_3m", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.terms": ["model.warehouse.algolia_product_categories", "model.warehouse.categories"], "model.warehouse.expected_inbounds": ["test.warehouse.unique_id_country_test"], "model.warehouse.sample_product_link": [], "model.warehouse.tva_product": ["model.warehouse.box_refunds", "model.warehouse.catalog", "model.warehouse.shop_detailed", "model.warehouse.shop_refunds", "model.warehouse.shop_sales"], "model.warehouse.byob_product_link": [], "model.warehouse.range_of_age": ["test.warehouse.unique_id_country_test"], "model.warehouse.da_box_shipped_detail": [], "model.warehouse.term_relationships": [], "model.warehouse.term_taxonomy": ["model.warehouse.algolia_product_categories", "model.warehouse.categories"], "model.warehouse.box_mono": ["model.warehouse.box_sales"], "model.warehouse.consent": ["test.warehouse.unique_id_country_test"], "model.warehouse.reception_details": ["test.warehouse.unique_id_country_test"], "model.warehouse.gift_cards": ["model.warehouse.box_refunds", "model.warehouse.box_sales", "model.warehouse.pnl2", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"], "model.warehouse.options": [], "model.warehouse.warehouse": ["test.warehouse.unique_id_country_test"], "model.warehouse.survey_results": ["test.warehouse.unique_id_country_test"], "model.warehouse.trackings": [], "model.warehouse.consent_topic": ["model.warehouse.consent", "model.warehouse.user_consent_details"], "model.warehouse.survey_questions": ["test.warehouse.unique_id_country_test"], "model.warehouse.kit": [], "model.warehouse.ga_transactions": ["test.warehouse.unique_id_country_test"], "model.warehouse.mini_reexp": ["test.warehouse.unique_id_country_test"], "model.warehouse.payment_profiles": ["test.warehouse.unique_id_country_test"], "model.warehouse.christmas_offer": ["test.warehouse.unique_id_country_test"], "model.warehouse.lte_kits": ["model.warehouse.all_kits", "model.warehouse.kit_details", "test.warehouse.unique_id_country_test"], "model.warehouse.optin": ["test.warehouse.unique_id_country_test"], "model.warehouse.gift_codes_generated": ["test.warehouse.unique_id_country_test"], "model.warehouse.b2c_exported_orders": ["test.warehouse.unique_id_country_test"], "model.warehouse.comments": ["model.warehouse.reviews"], "model.warehouse.cc_orders_status": [], "model.warehouse.reward_points_history": ["test.warehouse.unique_id_country_test"], "model.warehouse.orders_status": [], "model.warehouse.live_expenses": [], "model.warehouse.shipping_costs": ["model.warehouse.box_sales", "model.warehouse.shop_orders_margin"], "model.warehouse.logistics_costs": ["model.warehouse.kit_costs", "model.warehouse.shipping_costs", "model.warehouse.shop_orders_margin"], "model.warehouse.monthly_rank_brands": [], "model.warehouse.box_choose": [], "model.warehouse.index_user_samples": [], "model.warehouse.crm_zapier": [], "model.warehouse.reviews_by_user": [], "model.warehouse.flag_materialized": [], "model.warehouse.export_pnl_live_materialized": [], "model.warehouse.work_orders_materialized": [], "model.warehouse.pom_seasonality_table": [], "model.warehouse.projects_materialized": [], "model.warehouse.surveillance_incremental": [], "model.warehouse.user_consent_details": [], "model.warehouse.Export_Acquisition_Daily": [], "model.warehouse.Export_GWS_LIVE": [], "model.warehouse.Export_predictive_ltv_per_campaign": [], "model.warehouse.Export_Yearly_Live": [], "model.warehouse.Export_Discount_Live": [], "model.warehouse.Export_imagino_extract": [], "model.warehouse.Export_predictive_ltv_per_campaign_agg": [], "model.warehouse.pnl2": [], "model.warehouse.fraude_yearly": [], "model.warehouse.sra_test": [], "model.warehouse.today_segments": ["snapshot.warehouse.history_segments"], "model.warehouse.today_inactive": ["model.warehouse.today_middle", "model.warehouse.today_segments"], "model.warehouse.today_middle": ["model.warehouse.today_segments"], "model.warehouse.today_stars": ["model.warehouse.today_middle", "model.warehouse.today_risky", "model.warehouse.today_segments", "model.warehouse.today_spectators"], "model.warehouse.today_whales": ["model.warehouse.today_middle", "model.warehouse.today_risky", "model.warehouse.today_segments", "model.warehouse.today_spectators", "model.warehouse.today_stars"], "model.warehouse.today_spectators": ["model.warehouse.today_middle", "model.warehouse.today_risky", "model.warehouse.today_segments"], "model.warehouse.today_new": ["model.warehouse.today_middle", "model.warehouse.today_prospects", "model.warehouse.today_risky", "model.warehouse.today_segments", "model.warehouse.today_spectators", "model.warehouse.today_stars", "model.warehouse.today_whales"], "model.warehouse.today_prospects": ["model.warehouse.today_middle", "model.warehouse.today_risky", "model.warehouse.today_segments"], "model.warehouse.today_lost": ["model.warehouse.today_middle", "model.warehouse.today_segments"], "model.warehouse.shipments_all": [], "model.warehouse.today_risky": ["model.warehouse.today_middle", "model.warehouse.today_segments"], "model.warehouse.splio_data_dedup": ["model.warehouse.crm_data"], "model.warehouse.Marketing_cac_expenses": ["model.warehouse.Marketing_cac_budget_vs_expenses", "model.warehouse.Marketing_cac_live"], "model.warehouse.pnl__export_pnl_live": [], "model.warehouse.obj_by_country": [], "model.warehouse.box_shipments": ["model.warehouse.shipments_all"], "model.warehouse.crm_data": ["model.warehouse.customers", "model.warehouse.customers_streaming"], "model.warehouse.shop_shipments": ["model.warehouse.shipments_all"], "model.warehouse.bq_inventory_to_update": [], "model.warehouse.Marketing_cac_budget_vs_expenses": [], "model.warehouse.mailjet": [], "model.warehouse.Marketing_cac_live": [], "model.warehouse.Choose_by_user": [], "model.warehouse.bank": [], "model.warehouse.customers_streaming": [], "model.warehouse.classement_groupe_marque": [], "model.warehouse.customers": ["model.warehouse.Choose_by_user"], "model.warehouse.catalog__stock": [], "model.warehouse.catalog__bank": [], "model.warehouse.archives_survey_answers": [], "model.warehouse.archives_products_stock_log": ["model.warehouse.products_stock_log"], "model.warehouse.archives_payments": [], "snapshot.warehouse.history_segments": [], "test.warehouse.unique_id_country_test": [], "test.warehouse.dbt_utils_unique_combination_of_columns_box_sales_sub_id__dw_country_code.6ebb177269": [], "test.warehouse.dbt_utils_unique_combination_of_columns_partial_box_paid_sub_id__dw_country_code.6b11f8bcd3": [], "model.warehouse.adyen_notifications": ["model.warehouse.adyen_notifications_authorization", "model.warehouse.box_refunds", "model.warehouse.box_sales_by_user_by_type", "model.warehouse.reconciliation_live", "model.warehouse.shop_refunds", "model.warehouse.shop_sales", "test.warehouse.unique_id_country_test"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}